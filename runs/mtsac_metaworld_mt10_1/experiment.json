{
  "_snapshotter": {
    "_snapshot_dir": "/home/ubuntu/data/local/experiment/mtsac_metaworld_mt10_1",
    "_snapshot_mode": "none",
    "_snapshot_gap": 1,
    "$type": "garage.experiment.snapshotter.Snapshotter"
  },
  "_has_setup": true,
  "_plot": false,
  "_seed": 1,
  "_train_args": {
    "n_epochs": 500,
    "batch_size": 5000,
    "plot": false,
    "store_episodes": false,
    "pause_for_plot": false,
    "start_epoch": 0,
    "$type": "garage.trainer.TrainArgs"
  },
  "_stats": {
    "total_epoch": 0,
    "total_itr": 0,
    "total_env_steps": 0,
    "last_episode": "None",
    "$type": "garage.trainer.ExperimentStats"
  },
  "_algo": {
    "_qf1": {
      "_env_spec": {
        "max_episode_length": 500,
        "input_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True])",
          "_shape": [
            4
          ],
          "low": "array([-1., -1., -1., -1.], dtype=float32)",
          "high": "array([1., 1., 1., 1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "_shape": [
            49
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
          "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
          "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_obs_dim": 49.0,
      "_action_dim": 4.0,
      "training": true,
      "_parameters": {},
      "_buffers": {},
      "_non_persistent_buffers_set": [],
      "_backward_hooks": {},
      "_forward_hooks": {},
      "_forward_pre_hooks": {},
      "_state_dict_hooks": {},
      "_load_state_dict_pre_hooks": {},
      "_modules": {
        "_layers": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "0": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "linear": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 53.0,
                  "out_features": 400,
                  "$type": "torch.nn.modules.linear.Linear"
                },
                "non_linearity": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "module": {
                    "$type": "builtins.function"
                  },
                  "$type": "garage.torch._functions.NonLinearity"
                }
              },
              "$type": "torch.nn.modules.container.Sequential"
            },
            "1": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "linear": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 400,
                  "out_features": 400,
                  "$type": "torch.nn.modules.linear.Linear"
                },
                "non_linearity": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "module": {
                    "$type": "builtins.function"
                  },
                  "$type": "garage.torch._functions.NonLinearity"
                }
              },
              "$type": "torch.nn.modules.container.Sequential"
            },
            "2": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "linear": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 400,
                  "out_features": 400,
                  "$type": "torch.nn.modules.linear.Linear"
                },
                "non_linearity": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "module": {
                    "$type": "builtins.function"
                  },
                  "$type": "garage.torch._functions.NonLinearity"
                }
              },
              "$type": "torch.nn.modules.container.Sequential"
            }
          },
          "$type": "torch.nn.modules.container.ModuleList"
        },
        "_output_layers": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "0": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "linear": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 400,
                  "out_features": 1,
                  "$type": "torch.nn.modules.linear.Linear"
                }
              },
              "$type": "torch.nn.modules.container.Sequential"
            }
          },
          "$type": "torch.nn.modules.container.ModuleList"
        }
      },
      "_output_dim": 1,
      "$type": "garage.torch.q_functions.continuous_mlp_q_function.ContinuousMLPQFunction"
    },
    "_qf2": {
      "_env_spec": {
        "max_episode_length": 500,
        "input_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True])",
          "_shape": [
            4
          ],
          "low": "array([-1., -1., -1., -1.], dtype=float32)",
          "high": "array([1., 1., 1., 1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "_shape": [
            49
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
          "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
          "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_obs_dim": 49.0,
      "_action_dim": 4.0,
      "training": true,
      "_parameters": {},
      "_buffers": {},
      "_non_persistent_buffers_set": [],
      "_backward_hooks": {},
      "_forward_hooks": {},
      "_forward_pre_hooks": {},
      "_state_dict_hooks": {},
      "_load_state_dict_pre_hooks": {},
      "_modules": {
        "_layers": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "0": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "linear": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 53.0,
                  "out_features": 400,
                  "$type": "torch.nn.modules.linear.Linear"
                },
                "non_linearity": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "module": {
                    "$type": "builtins.function"
                  },
                  "$type": "garage.torch._functions.NonLinearity"
                }
              },
              "$type": "torch.nn.modules.container.Sequential"
            },
            "1": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "linear": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 400,
                  "out_features": 400,
                  "$type": "torch.nn.modules.linear.Linear"
                },
                "non_linearity": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "module": {
                    "$type": "builtins.function"
                  },
                  "$type": "garage.torch._functions.NonLinearity"
                }
              },
              "$type": "torch.nn.modules.container.Sequential"
            },
            "2": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "linear": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 400,
                  "out_features": 400,
                  "$type": "torch.nn.modules.linear.Linear"
                },
                "non_linearity": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "module": {
                    "$type": "builtins.function"
                  },
                  "$type": "garage.torch._functions.NonLinearity"
                }
              },
              "$type": "torch.nn.modules.container.Sequential"
            }
          },
          "$type": "torch.nn.modules.container.ModuleList"
        },
        "_output_layers": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "0": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "linear": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 400,
                  "out_features": 1,
                  "$type": "torch.nn.modules.linear.Linear"
                }
              },
              "$type": "torch.nn.modules.container.Sequential"
            }
          },
          "$type": "torch.nn.modules.container.ModuleList"
        }
      },
      "_output_dim": 1,
      "$type": "garage.torch.q_functions.continuous_mlp_q_function.ContinuousMLPQFunction"
    },
    "replay_buffer": {
      "_capacity": 1000000,
      "_env_spec": "None",
      "_transitions_stored": 0,
      "_first_idx_of_next_path": 0,
      "_path_segments": [],
      "_buffer": {},
      "$type": "garage.replay_buffer.path_buffer.PathBuffer"
    },
    "_tau": 0.005,
    "_policy_lr": 0.0003,
    "_qf_lr": 0.0003,
    "_initial_log_entropy": 0.0,
    "_gradient_steps": 500,
    "_optimizer": {
      "$typename": "torch.optim.adam.Adam"
    },
    "_num_evaluation_episodes": 5,
    "_eval_env": [
      {
        "_env": {
          "_env": {
            "_env": {
              "frame_skip": 5,
              "model": "<mujoco_py.cymj.PyMjModel object at 0x5556952bf360>",
              "sim": "<mujoco_py.cymj.MjSim object at 0x7f173b49e540>",
              "data": "<mujoco_py.cymj.PyMjData object at 0x5556959957b0>",
              "viewer": "None",
              "_viewers": {},
              "metadata": {
                "render.modes": [
                  "human"
                ],
                "video.frames_per_second": 80
              },
              "init_qpos": "array([0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 ,\n       0.02, 1.  , 0.  , 0.  , 0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_did_see_sim_exception": false,
              "_np_random": "Generator(PCG64) at 0x7F173BF2F820",
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": true,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([ 0.04495891,  0.63612804,  0.02      , -0.02475502,  0.83693882,\n        0.08019446])",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
              "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
              "action_space": {
                "dtype": "dtype('float64')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.])",
                "high": "array([1., 1., 1., 1.])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "isV2": true,
              "_obs_obj_max_len": 14,
              "_obs_obj_possible_lens": [
                6,
                14
              ],
              "_set_task_called": true,
              "_partially_observable": false,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "array([-0.02475502,  0.83693882,  0.08019446])",
              "_random_reset_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05], dtype=float32)",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ], dtype=float32)",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([0.00615235, 0.6001898 , 0.19430117, 1.        , 0.04495891,\n       0.63612804, 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([-0.1,  0.8,  0.2])",
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.04495891, 0.63612804, 0.02      ])",
              "goal_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05], dtype=float32)",
                "high": "array([0.1, 0.9, 0.3], dtype=float32)",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "num_resets": 1,
              "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
              "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_reach_v2.SawyerReachEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
              "_shape": [
                39
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05  ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3  ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                "_shape": [
                  39
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05  ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3  ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "reach-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        "_task_index": 0,
        "_n_total_tasks": 10,
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "_shape": [
            49
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
          "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
          "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
      },
      {
        "_env": {
          "_env": {
            "_env": {
              "frame_skip": 5,
              "model": "<mujoco_py.cymj.PyMjModel object at 0x5556952d3690>",
              "sim": "<mujoco_py.cymj.MjSim object at 0x7f173bd2bd40>",
              "data": "<mujoco_py.cymj.PyMjData object at 0x5556959867d0>",
              "viewer": "None",
              "_viewers": {},
              "metadata": {
                "render.modes": [
                  "human"
                ],
                "video.frames_per_second": 80
              },
              "init_qpos": "array([0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 ,\n       0.02, 1.  , 0.  , 0.  , 0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_did_see_sim_exception": false,
              "_np_random": "Generator(PCG64) at 0x7F173BF2F9E0",
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": true,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.09188587,  0.66849137,  0.02      ,  0.07242987,  0.84195538,\n        0.01123988])",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
              "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
              "action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "isV2": true,
              "_obs_obj_max_len": 14,
              "_obs_obj_possible_lens": [
                6,
                14
              ],
              "_set_task_called": true,
              "_partially_observable": false,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "array([0.07242987, 0.84195538, 0.01987216])",
              "_random_reset_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.01], dtype=float32)",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.02], dtype=float32)",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.01]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.02]",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([ 0.00615235,  0.6001898 ,  0.19430117,  1.        , -0.09188587,\n        0.66849137,  0.01987216,  0.        ,  0.        ,  0.        ,\n        1.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1 , 0.8 , 0.02])",
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([-0.09188587,  0.66849137,  0.01987216])",
              "goal_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.01], dtype=float32)",
                "high": "array([0.1 , 0.9 , 0.02], dtype=float32)",
                "low_repr": "[-0.1   0.8   0.01]",
                "high_repr": "[0.1  0.9  0.02]",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "num_resets": 1,
              "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
              "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_push_v2.SawyerPushEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
              "_shape": [
                39
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.01  ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.02 ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.01  ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.02 ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                "_shape": [
                  39
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.01  ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.02 ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.01  ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.02 ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "push-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        "_task_index": 1,
        "_n_total_tasks": 10,
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "_shape": [
            49
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.01  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.02 , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
          "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.01    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
          "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.02  1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.01  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.02 , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.01    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.02  1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
      },
      {
        "_env": {
          "_env": {
            "_env": {
              "frame_skip": 5,
              "model": "<mujoco_py.cymj.PyMjModel object at 0x555695881f00>",
              "sim": "<mujoco_py.cymj.MjSim object at 0x7f173bbc26c0>",
              "data": "<mujoco_py.cymj.PyMjData object at 0x5556959bfda0>",
              "viewer": "None",
              "_viewers": {},
              "metadata": {
                "render.modes": [
                  "human"
                ],
                "video.frames_per_second": 80
              },
              "init_qpos": "array([0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 ,\n       0.02, 1.  , 0.  , 0.  , 0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_did_see_sim_exception": false,
              "_np_random": "Generator(PCG64) at 0x7F173BF2FBA0",
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": true,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([ 0.08168774,  0.63992362,  0.02      , -0.03196034,  0.88867735,\n        0.07261145])",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
              "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
              "action_space": {
                "dtype": "dtype('float64')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.])",
                "high": "array([1., 1., 1., 1.])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "isV2": true,
              "_obs_obj_max_len": 14,
              "_obs_obj_possible_lens": [
                6,
                14
              ],
              "_set_task_called": true,
              "_partially_observable": false,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "array([-0.03196034,  0.88867735,  0.07261145])",
              "_random_reset_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "_shape": [
                  6
                ],
                "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05], dtype=float32)",
                "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ], dtype=float32)",
                "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([0.00615235, 0.6001898 , 0.19430117, 1.        , 0.08168774,\n       0.63992362, 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([0.1, 0.8, 0.2])",
              "obj_init_angle": 0.3,
              "obj_init_pos": "array([0.08168774, 0.63992362, 0.02      ])",
              "goal_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.8 ,  0.05], dtype=float32)",
                "high": "array([0.1, 0.9, 0.3], dtype=float32)",
                "low_repr": "[-0.1   0.8   0.05]",
                "high_repr": "[0.1 0.9 0.3]",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "num_resets": 1,
              "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
              "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
              "_shape": [
                39
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05  ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3  ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                "_shape": [
                  39
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05  ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3  ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "pick-place-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        "_task_index": 2,
        "_n_total_tasks": 10,
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "_shape": [
            49
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
          "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
          "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
      },
      {
        "_env": {
          "_env": {
            "_env": {
              "frame_skip": 5,
              "model": "<mujoco_py.cymj.PyMjModel object at 0x5556952cc000>",
              "sim": "<mujoco_py.cymj.MjSim object at 0x7f173bacee40>",
              "data": "<mujoco_py.cymj.PyMjData object at 0x555695358a00>",
              "viewer": "None",
              "_viewers": {},
              "metadata": {
                "render.modes": [
                  "human"
                ],
                "video.frames_per_second": 80
              },
              "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_did_see_sim_exception": false,
              "_np_random": "Generator(PCG64) at 0x7F173BF2FE40",
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": true,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([0.08783605, 0.8522255 , 0.15000001])",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
              "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
              "action_space": {
                "dtype": "dtype('float64')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.])",
                "high": "array([1., 1., 1., 1.])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "isV2": true,
              "_obs_obj_max_len": 14,
              "_obs_obj_possible_lens": [
                6,
                14
              ],
              "_set_task_called": true,
              "_partially_observable": false,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "array([-0.21216395,  0.4022255 ,  0.15000001])",
              "_random_reset_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "_shape": [
                  3
                ],
                "low": "array([0.  , 0.85, 0.15], dtype=float32)",
                "high": "array([0.1 , 0.95, 0.15], dtype=float32)",
                "low_repr": "[0.   0.85 0.15]",
                "high_repr": "[0.1  0.95 0.15]",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([ 0.00615235,  0.6001898 ,  0.19430117,  1.        ,  0.27855768,\n        0.64508561,  0.15003595,  0.6907585 , -0.15062097,  0.69087866,\n        0.15117109,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
              "init_config": {
                "obj_init_angle": "array([0.3])",
                "obj_init_pos": "array([0.1 , 0.95, 0.15])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([-0.2 ,  0.7 ,  0.15])",
              "obj_init_pos": "array([0.08783605, 0.8522255 , 0.15000001])",
              "obj_init_angle": "array([0.3])",
              "door_angle_idx": 9.0,
              "goal_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "_shape": [
                  3
                ],
                "low": "array([-0.3   ,  0.4   ,  0.1499], dtype=float32)",
                "high": "array([-0.2   ,  0.5   ,  0.1501], dtype=float32)",
                "low_repr": "[-0.3     0.4     0.1499]",
                "high_repr": "[-0.2     0.5     0.1501]",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
              "objHeight": 0.15003594872010784,
              "maxPullDist": 0.5475296783430732,
              "target_reward": 2547.529678343073,
              "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_door_v2.SawyerDoorEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
              "_shape": [
                39
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.3   ,  0.4   ,  0.1499], dtype=float32)",
              "high": "array([ 0.525 ,  1.025 ,  0.7   ,  1.    ,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,  0.525 ,  1.025 ,  0.7   ,\n        1.    ,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf, -0.2   ,  0.5   ,  0.1501], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.3     0.4     0.1499]",
              "high_repr": "[ 0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n  0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n -0.2     0.5     0.1501]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                "_shape": [
                  39
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.3   ,  0.4   ,  0.1499], dtype=float32)",
                "high": "array([ 0.525 ,  1.025 ,  0.7   ,  1.    ,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,  0.525 ,  1.025 ,  0.7   ,\n        1.    ,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf, -0.2   ,  0.5   ,  0.1501], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.3     0.4     0.1499]",
                "high_repr": "[ 0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n  0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n -0.2     0.5     0.1501]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "door-open-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        "_task_index": 3,
        "_n_total_tasks": 10,
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "_shape": [
            49
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.3   ,  0.4   ,  0.1499,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
          "high": "array([ 0.525 ,  1.025 ,  0.7   ,  1.    ,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,  0.525 ,  1.025 ,  0.7   ,\n        1.    ,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf, -0.2   ,  0.5   ,  0.1501,  1.    ,  1.    ,  1.    ,\n        1.    ,  1.    ,  1.    ,  1.    ,  1.    ,  1.    ,  1.    ],\n      dtype=float32)",
          "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.3     0.4     0.1499  0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
          "high_repr": "[ 0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n  0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n -0.2     0.5     0.1501  1.      1.      1.      1.      1.      1.\n  1.      1.      1.      1.    ]",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.3   ,  0.4   ,  0.1499,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([ 0.525 ,  1.025 ,  0.7   ,  1.    ,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,  0.525 ,  1.025 ,  0.7   ,\n        1.    ,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf, -0.2   ,  0.5   ,  0.1501,  1.    ,  1.    ,  1.    ,\n        1.    ,  1.    ,  1.    ,  1.    ,  1.    ,  1.    ,  1.    ],\n      dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.3     0.4     0.1499  0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
            "high_repr": "[ 0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n  0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n -0.2     0.5     0.1501  1.      1.      1.      1.      1.      1.\n  1.      1.      1.      1.    ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
      },
      {
        "_env": {
          "_env": {
            "_env": {
              "frame_skip": 5,
              "model": "<mujoco_py.cymj.PyMjModel object at 0x555695431580>",
              "sim": "<mujoco_py.cymj.MjSim object at 0x7f173b9e9640>",
              "data": "<mujoco_py.cymj.PyMjData object at 0x5556959bd8b0>",
              "viewer": "None",
              "_viewers": {},
              "metadata": {
                "render.modes": [
                  "human"
                ],
                "video.frames_per_second": 80
              },
              "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_did_see_sim_exception": false,
              "_np_random": "Generator(PCG64) at 0x7F173B93D040",
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": true,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([0.03982043, 0.89999998, 0.        ])",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "init_left_pad": "array([0.00424391, 0.64740393, 0.1945706 ])",
              "init_right_pad": "array([0.00807892, 0.55313929, 0.19412857])",
              "action_space": {
                "dtype": "dtype('float64')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.])",
                "high": "array([1., 1., 1., 1.])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "isV2": true,
              "_obs_obj_max_len": 14,
              "_obs_obj_possible_lens": [
                6,
                14
              ],
              "_set_task_called": true,
              "_partially_observable": false,
              "hand_init_pos": "array([0. , 0.6, 0.2], dtype=float32)",
              "_target_pos": "array([0.03982043, 0.53999998, 0.09      ])",
              "_random_reset_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "_shape": [
                  3
                ],
                "low": "array([-0.1,  0.9,  0. ], dtype=float32)",
                "high": "array([0.1, 0.9, 0. ], dtype=float32)",
                "low_repr": "[-0.1  0.9  0. ]",
                "high_repr": "[0.1 0.9 0. ]",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([0.00616141, 0.60027169, 0.19434958, 1.        , 0.        ,\n       0.73      , 0.09      , 1.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
              "init_config": {
                "obj_init_angle": "array([0.3], dtype=float32)",
                "obj_init_pos": "array([0. , 0.9, 0. ], dtype=float32)",
                "hand_init_pos": "array([0. , 0.6, 0.2], dtype=float32)"
              },
              "obj_init_pos": "array([0.03982043, 0.89999998, 0.        ])",
              "obj_init_angle": "array([0.3], dtype=float32)",
              "goal_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "_shape": [
                  3
                ],
                "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                "high": "array([0.5, 1. , 0.5], dtype=float32)",
                "low_repr": "[-0.5   0.4   0.05]",
                "high_repr": "[0.5 1.  0.5]",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "maxDist": 0.2,
              "target_reward": 2200.0,
              "init_tcp": "array([0.00600364, 0.6004762 , 0.14935033])",
              "prev_obs": "array([0.00616141, 0.60027169, 0.19434958, 1.        , 0.        ,\n       0.73      , 0.09      , 1.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
              "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_open_v2.SawyerDrawerOpenEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
              "_shape": [
                39
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                "_shape": [
                  39
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "drawer-open-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        "_task_index": 4,
        "_n_total_tasks": 10,
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "_shape": [
            49
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
          "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
          "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
      },
      {
        "_env": {
          "_env": {
            "_env": {
              "frame_skip": 5,
              "model": "<mujoco_py.cymj.PyMjModel object at 0x555695caab20>",
              "sim": "<mujoco_py.cymj.MjSim object at 0x7f173b8f8dc0>",
              "data": "<mujoco_py.cymj.PyMjData object at 0x55569599a4c0>",
              "viewer": "None",
              "_viewers": {},
              "metadata": {
                "render.modes": [
                  "human"
                ],
                "video.frames_per_second": 80
              },
              "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_did_see_sim_exception": false,
              "_np_random": "Generator(PCG64) at 0x7F173B93D200",
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": true,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.04664498,  0.89999998,  0.        ])",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "init_left_pad": "array([0.00455658, 0.64733405, 0.19452415])",
              "init_right_pad": "array([0.00774813, 0.55304544, 0.1940782 ])",
              "action_space": {
                "dtype": "dtype('float64')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.])",
                "high": "array([1., 1., 1., 1.])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "isV2": true,
              "_obs_obj_max_len": 14,
              "_obs_obj_possible_lens": [
                6,
                14
              ],
              "_set_task_called": true,
              "_partially_observable": false,
              "hand_init_pos": "array([0. , 0.6, 0.2], dtype=float32)",
              "_target_pos": "array([-0.04664498,  0.73999998,  0.09      ])",
              "_random_reset_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "_shape": [
                  3
                ],
                "low": "array([-0.1,  0.9,  0. ], dtype=float32)",
                "high": "array([0.1, 0.9, 0. ], dtype=float32)",
                "low_repr": "[-0.1  0.9  0. ]",
                "high_repr": "[0.1 0.9 0. ]",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([ 0.00615235,  0.60018983,  0.19430118,  1.        , -0.04664498,\n        0.57999998,  0.14      ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
              "init_config": {
                "obj_init_angle": "array([0.3], dtype=float32)",
                "obj_init_pos": "array([0. , 0.9, 0. ], dtype=float32)",
                "hand_init_pos": "array([0. , 0.6, 0.2], dtype=float32)"
              },
              "obj_init_pos": "array([-0.04664498,  0.57999998,  0.14      ])",
              "obj_init_angle": "array([0.3], dtype=float32)",
              "goal_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "_shape": [
                  3
                ],
                "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                "high": "array([0.5, 1. , 0.5], dtype=float32)",
                "low_repr": "[-0.5   0.4   0.05]",
                "high_repr": "[0.5 1.  0.5]",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "maxDist": 0.15,
              "target_reward": 2150.0,
              "init_tcp": "array([0.00600364, 0.6004762 , 0.14935033])",
              "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_close_v2.SawyerDrawerCloseEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
              "_shape": [
                39
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                "_shape": [
                  39
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "drawer-close-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        "_task_index": 5,
        "_n_total_tasks": 10,
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "_shape": [
            49
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
          "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
          "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
      },
      {
        "_env": {
          "_env": {
            "_env": {
              "frame_skip": 5,
              "model": "<mujoco_py.cymj.PyMjModel object at 0x5556953a54a0>",
              "sim": "<mujoco_py.cymj.MjSim object at 0x7f173b78e5c0>",
              "data": "<mujoco_py.cymj.PyMjData object at 0x555695556d40>",
              "viewer": "None",
              "_viewers": {},
              "metadata": {
                "render.modes": [
                  "human"
                ],
                "video.frames_per_second": 80
              },
              "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_did_see_sim_exception": false,
              "_np_random": "Generator(PCG64) at 0x7F173B93D3C0",
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": true,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.00138776,  0.85885027,  0.115     ])",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "init_left_pad": "array([0.00494545, 0.44686319, 0.19504709])",
              "init_right_pad": "array([0.00687854, 0.35253942, 0.19492245])",
              "action_space": {
                "dtype": "dtype('float64')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.])",
                "high": "array([1., 1., 1., 1.])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "isV2": true,
              "_obs_obj_max_len": 14,
              "_obs_obj_possible_lens": [
                6,
                14
              ],
              "_set_task_called": true,
              "_partially_observable": false,
              "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)",
              "_target_pos": "array([0.        , 0.84992037, 0.21999997])",
              "_random_reset_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "_shape": [
                  3
                ],
                "low": "array([-0.1  ,  0.8  ,  0.115], dtype=float32)",
                "high": "array([0.1  , 0.9  , 0.115], dtype=float32)",
                "low_repr": "[-0.1    0.8    0.115]",
                "high_repr": "[0.1   0.9   0.115]",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        ,  0.        ,\n        0.84999963,  0.31346152,  0.70738827, -0.70682518,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
              "init_config": {
                "obj_init_pos": "array([0.   , 0.8  , 0.115], dtype=float32)",
                "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)"
              },
              "goal": "array([0.  , 0.88, 0.1 ])",
              "obj_init_pos": "array([-0.00138776,  0.85885027,  0.115     ])",
              "goal_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "_shape": [
                  3
                ],
                "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                "high": "array([0.5, 1. , 0.5], dtype=float32)",
                "low_repr": "[-0.5   0.4   0.05]",
                "high_repr": "[0.5 1.  0.5]",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "init_tcp": "array([0.00588028, 0.39976012, 0.14998482])",
              "_obj_to_target_init": 0.09349997035412655,
              "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_button_press_topdown_v2.SawyerButtonPressTopdownEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
              "_shape": [
                39
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                "_shape": [
                  39
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "button-press-topdown-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        "_task_index": 6,
        "_n_total_tasks": 10,
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "_shape": [
            49
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
          "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
          "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
      },
      {
        "_env": {
          "_env": {
            "_env": {
              "frame_skip": 5,
              "model": "<mujoco_py.cymj.PyMjModel object at 0x555695cb49a0>",
              "sim": "<mujoco_py.cymj.MjSim object at 0x7f173b69bcc0>",
              "data": "<mujoco_py.cymj.PyMjData object at 0x555695883ed0>",
              "viewer": "None",
              "_viewers": {},
              "metadata": {
                "render.modes": [
                  "human"
                ],
                "video.frames_per_second": 80
              },
              "init_qpos": "array([0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 ,\n       0.03, 1.  , 0.  , 0.  , 0.  ])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_did_see_sim_exception": false,
              "_np_random": "Generator(PCG64) at 0x7F173B93D580",
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": true,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([ 0.16833531,  0.62019174,  0.02      , -0.27916094,  0.42741075,\n        0.00080814])",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
              "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
              "action_space": {
                "dtype": "dtype('float64')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.])",
                "high": "array([1., 1., 1., 1.])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "isV2": true,
              "_obs_obj_max_len": 14,
              "_obs_obj_possible_lens": [
                6,
                14
              ],
              "_set_task_called": true,
              "_partially_observable": false,
              "hand_init_pos": "array([0. , 0.6, 0.2])",
              "_target_pos": "array([-0.24916094,  0.42741075,  0.13080814])",
              "_random_reset_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                "_shape": [
                  6
                ],
                "low": "array([ 0.   ,  0.5  ,  0.02 , -0.35 ,  0.4  , -0.001], dtype=float32)",
                "high": "array([ 0.2  ,  0.7  ,  0.02 , -0.25 ,  0.7  ,  0.001], dtype=float32)",
                "low_repr": "[ 0.     0.5    0.02  -0.35   0.4   -0.001]",
                "high_repr": "[ 0.2    0.7    0.02  -0.25   0.7    0.001]",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([0.00615235, 0.6001898 , 0.19430117, 1.        , 0.19833531,\n       0.62019174, 0.03      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
              "init_config": {
                "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                "hand_init_pos": "array([0. , 0.6, 0.2])"
              },
              "goal": "array([-0.3,  0.6,  0. ])",
              "obj_init_pos": "array([0.16833531, 0.62019174, 0.02      ])",
              "goal_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "_shape": [
                  3
                ],
                "low": "array([-0.32 ,  0.4  ,  0.129], dtype=float32)",
                "high": "array([-0.22 ,  0.7  ,  0.131], dtype=float32)",
                "low_repr": "[-0.32   0.4    0.129]",
                "high_repr": "[-0.22   0.7    0.131]",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
              "peg_head_pos_init": "array([-0.1       ,  0.6       ,  0.01478467])",
              "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_peg_insertion_side_v2.SawyerPegInsertionSideEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
              "_shape": [
                39
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.32  ,  0.4   ,  0.129 ], dtype=float32)",
              "high": "array([ 0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,  0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf, -0.22 ,  0.7  ,  0.131],\n      dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.32    0.4     0.129 ]",
              "high_repr": "[ 0.525  1.025  0.7    1.       inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf    inf    inf  0.525  1.025\n  0.7    1.       inf    inf    inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf -0.22   0.7    0.131]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                "_shape": [
                  39
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.32  ,  0.4   ,  0.129 ], dtype=float32)",
                "high": "array([ 0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,  0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf, -0.22 ,  0.7  ,  0.131],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.32    0.4     0.129 ]",
                "high_repr": "[ 0.525  1.025  0.7    1.       inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf    inf    inf  0.525  1.025\n  0.7    1.       inf    inf    inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf -0.22   0.7    0.131]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "peg-insert-side-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        "_task_index": 7,
        "_n_total_tasks": 10,
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "_shape": [
            49
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.32  ,  0.4   ,  0.129 ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
          "high": "array([ 0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,  0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf, -0.22 ,  0.7  ,  0.131,  1.   ,\n        1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,\n        1.   ], dtype=float32)",
          "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.32    0.4     0.129   0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
          "high_repr": "[ 0.525  1.025  0.7    1.       inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf    inf    inf  0.525  1.025\n  0.7    1.       inf    inf    inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf -0.22   0.7    0.131  1.\n  1.     1.     1.     1.     1.     1.     1.     1.     1.   ]",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.32  ,  0.4   ,  0.129 ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([ 0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,  0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf, -0.22 ,  0.7  ,  0.131,  1.   ,\n        1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,\n        1.   ], dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.32    0.4     0.129   0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
            "high_repr": "[ 0.525  1.025  0.7    1.       inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf    inf    inf  0.525  1.025\n  0.7    1.       inf    inf    inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf -0.22   0.7    0.131  1.\n  1.     1.     1.     1.     1.     1.     1.     1.     1.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
      },
      {
        "_env": {
          "_env": {
            "_env": {
              "frame_skip": 5,
              "model": "<mujoco_py.cymj.PyMjModel object at 0x555695984230>",
              "sim": "<mujoco_py.cymj.MjSim object at 0x7f173b5264c0>",
              "data": "<mujoco_py.cymj.PyMjData object at 0x5556954f0340>",
              "viewer": "None",
              "_viewers": {},
              "metadata": {
                "render.modes": [
                  "human"
                ],
                "video.frames_per_second": 80
              },
              "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_did_see_sim_exception": false,
              "_np_random": "Generator(PCG64) at 0x7F173B93D740",
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": true,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([-0.04554758,  0.76984581,  0.16      ])",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "init_left_pad": "array([0.00494545, 0.44686319, 0.19504709])",
              "init_right_pad": "array([0.00687854, 0.35253942, 0.19492245])",
              "action_space": {
                "dtype": "dtype('float64')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.])",
                "high": "array([1., 1., 1., 1.])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "isV2": true,
              "_obs_obj_max_len": 14,
              "_obs_obj_possible_lens": [
                6,
                14
              ],
              "_set_task_called": true,
              "_partially_observable": false,
              "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)",
              "_target_pos": "array([0.15445242, 0.76984581, 0.16      ])",
              "_random_reset_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "_shape": [
                  3
                ],
                "low": "array([-0.1 ,  0.7 ,  0.16], dtype=float32)",
                "high": "array([0.1 , 0.9 , 0.16], dtype=float32)",
                "low_repr": "[-0.1   0.7   0.16]",
                "high_repr": "[0.1  0.9  0.16]",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        , -0.14      ,\n        0.69      ,  0.202     ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
              "init_config": {
                "obj_init_angle": "array([0.3], dtype=float32)",
                "obj_init_pos": "array([-0.1  ,  0.785,  0.16 ], dtype=float32)",
                "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)"
              },
              "obj_init_pos": "array([-0.04554758,  0.76984581,  0.16      ])",
              "obj_init_angle": "array([0.3], dtype=float32)",
              "goal_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "_shape": [
                  3
                ],
                "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                "high": "array([0.5, 1. , 0.5], dtype=float32)",
                "low_repr": "[-0.5   0.4   0.05]",
                "high_repr": "[0.5 1.  0.5]",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "maxPullDist": 0.2,
              "target_reward": 2200.0,
              "init_tcp": "array([0.00588028, 0.39976012, 0.14998482])",
              "prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        , -0.14      ,\n        0.69      ,  0.202     ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
              "window_handle_pos_init": "array([-0.14 ,  0.69 ,  0.202])",
              "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_open_v2.SawyerWindowOpenEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
              "_shape": [
                39
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                "_shape": [
                  39
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "window-open-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        "_task_index": 8,
        "_n_total_tasks": 10,
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "_shape": [
            49
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
          "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
          "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
      },
      {
        "_env": {
          "_env": {
            "_env": {
              "frame_skip": 5,
              "model": "<mujoco_py.cymj.PyMjModel object at 0x55569596cb00>",
              "sim": "<mujoco_py.cymj.MjSim object at 0x7f173b332cc0>",
              "data": "<mujoco_py.cymj.PyMjData object at 0x5556955f8860>",
              "viewer": "None",
              "_viewers": {},
              "metadata": {
                "render.modes": [
                  "human"
                ],
                "video.frames_per_second": 80
              },
              "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_did_see_sim_exception": false,
              "_np_random": "Generator(PCG64) at 0x7F173B93D900",
              "action_scale": 0.01,
              "action_rot_scale": 1.0,
              "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
              "hand_high": "array([0.5, 1. , 0.5])",
              "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
              "mocap_high": "array([0.5, 1. , 0.5])",
              "curr_path_length": 0,
              "seeded_rand_vec": true,
              "_freeze_rand_vec": true,
              "_last_rand_vec": "array([0.        , 0.86615664, 0.2       ])",
              "discrete_goal_space": "None",
              "discrete_goals": [],
              "active_discrete_goal": "None",
              "init_left_pad": "array([0.00494545, 0.44686319, 0.19504709])",
              "init_right_pad": "array([0.00687854, 0.35253942, 0.19492245])",
              "action_space": {
                "dtype": "dtype('float64')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.])",
                "high": "array([1., 1., 1., 1.])",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "isV2": true,
              "_obs_obj_max_len": 14,
              "_obs_obj_possible_lens": [
                6,
                14
              ],
              "_set_task_called": true,
              "_partially_observable": false,
              "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)",
              "_target_pos": "array([0.        , 0.86615664, 0.2       ])",
              "_random_reset_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "_shape": [
                  3
                ],
                "low": "array([0.  , 0.75, 0.2 ], dtype=float32)",
                "high": "array([0. , 0.9, 0.2], dtype=float32)",
                "low_repr": "[0.   0.75 0.2 ]",
                "high_repr": "[0.  0.9 0.2]",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "_last_stable_obs": "None",
              "_prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        , -0.09      ,\n        0.69      ,  0.202     ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
              "init_config": {
                "obj_init_angle": 0.3,
                "obj_init_pos": "array([0.1  , 0.785, 0.16 ], dtype=float32)",
                "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)"
              },
              "obj_init_pos": "array([0.        , 0.86615664, 0.2       ])",
              "obj_init_angle": 0.3,
              "liftThresh": 0.02,
              "goal_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "_shape": [
                  3
                ],
                "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                "high": "array([0.5, 1. , 0.5], dtype=float32)",
                "low_repr": "[-0.5   0.4   0.05]",
                "high_repr": "[0.5 1.  0.5]",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "maxPullDist": 0.2,
              "target_reward": 2200.0,
              "init_tcp": "array([0.00588028, 0.39976012, 0.14998482])",
              "prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        , -0.09      ,\n        0.69      ,  0.202     ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
              "window_handle_pos_init": "array([0.11 , 0.69 , 0.202])",
              "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_close_v2.SawyerWindowCloseEnvV2"
            },
            "_max_episode_length": 500,
            "_render_modes": [
              "human"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
              "_shape": [
                39
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                "_shape": [
                  39
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_task_name": "window-close-v2",
          "_task_id": "None",
          "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
        },
        "_task_index": 9,
        "_n_total_tasks": 10,
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "_shape": [
            49
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
          "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
          "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
      }
    ],
    "_min_buffer_size": 1500,
    "_steps_per_epoch": 8,
    "_buffer_batch_size": 1280,
    "_discount": 0.99,
    "_reward_scale": 1.0,
    "max_episode_length": 500,
    "_max_episode_length_eval": 500,
    "_use_deterministic_evaluation": true,
    "policy": {
      "training": true,
      "_parameters": {},
      "_buffers": {},
      "_non_persistent_buffers_set": [],
      "_backward_hooks": {},
      "_forward_hooks": {},
      "_forward_pre_hooks": {},
      "_state_dict_hooks": {},
      "_load_state_dict_pre_hooks": {},
      "_modules": {
        "_module": {
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            },
            "max_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_shared_mean_log_std_network": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 49.0,
                          "out_features": 400,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "module": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "inplace": false,
                              "$type": "torch.nn.modules.activation.ReLU"
                            }
                          },
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 400,
                          "out_features": 400,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "module": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "inplace": false,
                              "$type": "torch.nn.modules.activation.ReLU"
                            }
                          },
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "2": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 400,
                          "out_features": 400,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "module": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "inplace": false,
                              "$type": "torch.nn.modules.activation.ReLU"
                            }
                          },
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 400,
                          "out_features": 4.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 400,
                          "out_features": 4.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
            }
          },
          "_input_dim": 49.0,
          "_hidden_sizes": [
            400,
            400,
            400
          ],
          "_action_dim": 4.0,
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 2.061153622438558e-09,
          "_max_std": 7.38905609893065,
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": {
            "$typename": "torch.nn.modules.activation.ReLU"
          },
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": {
            "$type": "torch.Tensor"
          },
          "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
        }
      },
      "_env_spec": {
        "max_episode_length": 500,
        "input_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True])",
          "_shape": [
            4
          ],
          "low": "array([-1., -1., -1., -1.], dtype=float32)",
          "high": "array([1., 1., 1., 1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "_shape": [
            49
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
          "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
          "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_name": "TanhGaussianPolicy",
      "_obs_dim": 49.0,
      "_action_dim": 4.0,
      "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
    },
    "env_spec": {
      "max_episode_length": 500,
      "input_space": {
        "dtype": "dtype('float32')",
        "bounded_below": "array([ True,  True,  True,  True])",
        "bounded_above": "array([ True,  True,  True,  True])",
        "_shape": [
          4
        ],
        "low": "array([-1., -1., -1., -1.], dtype=float32)",
        "high": "array([1., 1., 1., 1.], dtype=float32)",
        "low_repr": "-1.0",
        "high_repr": "1.0",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "output_space": {
        "dtype": "dtype('float32')",
        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
        "_shape": [
          49
        ],
        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
        "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
        "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "$type": "garage._environment.EnvSpec"
    },
    "_sampler": {
      "_factory": {
        "n_workers": 10,
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_class": {
          "$typename": "garage.sampler.fragment_worker.FragmentWorker"
        },
        "_worker_args": {
          "n_envs": 2
        },
        "$type": "garage.sampler.worker_factory.WorkerFactory"
      },
      "_agents": [
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                },
                "max_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_shared_mean_log_std_network": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 49.0,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "2": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                }
              },
              "_input_dim": 49.0,
              "_hidden_sizes": [
                400,
                400,
                400
              ],
              "_action_dim": 4.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 2.061153622438558e-09,
              "_max_std": 7.38905609893065,
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "$typename": "torch.nn.modules.activation.ReLU"
              },
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": {
                "$type": "torch.Tensor"
              },
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "_shape": [
                49
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "TanhGaussianPolicy",
          "_obs_dim": 49.0,
          "_action_dim": 4.0,
          "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                },
                "max_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_shared_mean_log_std_network": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 49.0,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "2": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                }
              },
              "_input_dim": 49.0,
              "_hidden_sizes": [
                400,
                400,
                400
              ],
              "_action_dim": 4.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 2.061153622438558e-09,
              "_max_std": 7.38905609893065,
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "$typename": "torch.nn.modules.activation.ReLU"
              },
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": {
                "$type": "torch.Tensor"
              },
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "_shape": [
                49
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "TanhGaussianPolicy",
          "_obs_dim": 49.0,
          "_action_dim": 4.0,
          "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                },
                "max_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_shared_mean_log_std_network": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 49.0,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "2": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                }
              },
              "_input_dim": 49.0,
              "_hidden_sizes": [
                400,
                400,
                400
              ],
              "_action_dim": 4.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 2.061153622438558e-09,
              "_max_std": 7.38905609893065,
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "$typename": "torch.nn.modules.activation.ReLU"
              },
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": {
                "$type": "torch.Tensor"
              },
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "_shape": [
                49
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "TanhGaussianPolicy",
          "_obs_dim": 49.0,
          "_action_dim": 4.0,
          "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                },
                "max_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_shared_mean_log_std_network": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 49.0,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "2": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                }
              },
              "_input_dim": 49.0,
              "_hidden_sizes": [
                400,
                400,
                400
              ],
              "_action_dim": 4.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 2.061153622438558e-09,
              "_max_std": 7.38905609893065,
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "$typename": "torch.nn.modules.activation.ReLU"
              },
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": {
                "$type": "torch.Tensor"
              },
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "_shape": [
                49
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "TanhGaussianPolicy",
          "_obs_dim": 49.0,
          "_action_dim": 4.0,
          "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                },
                "max_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_shared_mean_log_std_network": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 49.0,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "2": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                }
              },
              "_input_dim": 49.0,
              "_hidden_sizes": [
                400,
                400,
                400
              ],
              "_action_dim": 4.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 2.061153622438558e-09,
              "_max_std": 7.38905609893065,
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "$typename": "torch.nn.modules.activation.ReLU"
              },
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": {
                "$type": "torch.Tensor"
              },
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "_shape": [
                49
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "TanhGaussianPolicy",
          "_obs_dim": 49.0,
          "_action_dim": 4.0,
          "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                },
                "max_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_shared_mean_log_std_network": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 49.0,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "2": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                }
              },
              "_input_dim": 49.0,
              "_hidden_sizes": [
                400,
                400,
                400
              ],
              "_action_dim": 4.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 2.061153622438558e-09,
              "_max_std": 7.38905609893065,
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "$typename": "torch.nn.modules.activation.ReLU"
              },
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": {
                "$type": "torch.Tensor"
              },
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "_shape": [
                49
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "TanhGaussianPolicy",
          "_obs_dim": 49.0,
          "_action_dim": 4.0,
          "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                },
                "max_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_shared_mean_log_std_network": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 49.0,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "2": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                }
              },
              "_input_dim": 49.0,
              "_hidden_sizes": [
                400,
                400,
                400
              ],
              "_action_dim": 4.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 2.061153622438558e-09,
              "_max_std": 7.38905609893065,
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "$typename": "torch.nn.modules.activation.ReLU"
              },
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": {
                "$type": "torch.Tensor"
              },
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "_shape": [
                49
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "TanhGaussianPolicy",
          "_obs_dim": 49.0,
          "_action_dim": 4.0,
          "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                },
                "max_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_shared_mean_log_std_network": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 49.0,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "2": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                }
              },
              "_input_dim": 49.0,
              "_hidden_sizes": [
                400,
                400,
                400
              ],
              "_action_dim": 4.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 2.061153622438558e-09,
              "_max_std": 7.38905609893065,
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "$typename": "torch.nn.modules.activation.ReLU"
              },
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": {
                "$type": "torch.Tensor"
              },
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "_shape": [
                49
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "TanhGaussianPolicy",
          "_obs_dim": 49.0,
          "_action_dim": 4.0,
          "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                },
                "max_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_shared_mean_log_std_network": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 49.0,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "2": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                }
              },
              "_input_dim": 49.0,
              "_hidden_sizes": [
                400,
                400,
                400
              ],
              "_action_dim": 4.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 2.061153622438558e-09,
              "_max_std": 7.38905609893065,
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "$typename": "torch.nn.modules.activation.ReLU"
              },
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": {
                "$type": "torch.Tensor"
              },
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "_shape": [
                49
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "TanhGaussianPolicy",
          "_obs_dim": 49.0,
          "_action_dim": 4.0,
          "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                },
                "max_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_shared_mean_log_std_network": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 49.0,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "2": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                }
              },
              "_input_dim": 49.0,
              "_hidden_sizes": [
                400,
                400,
                400
              ],
              "_action_dim": 4.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 2.061153622438558e-09,
              "_max_std": 7.38905609893065,
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "$typename": "torch.nn.modules.activation.ReLU"
              },
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": {
                "$type": "torch.Tensor"
              },
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "_shape": [
                49
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "TanhGaussianPolicy",
          "_obs_dim": 49.0,
          "_action_dim": 4.0,
          "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
        }
      ],
      "_envs": [
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_reach_v2.SawyerReachEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_push_v2.SawyerPushEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_door_v2.SawyerDoorEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_open_v2.SawyerDrawerOpenEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_close_v2.SawyerDrawerCloseEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_button_press_topdown_v2.SawyerButtonPressTopdownEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_peg_insertion_side_v2.SawyerPegInsertionSideEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_open_v2.SawyerWindowOpenEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        },
        {
          "_env_type": {
            "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_close_v2.SawyerWindowCloseEnvV2"
          },
          "_task": {
            "$type": "metaworld.Task"
          },
          "_wrapper_cons": {
            "$type": "builtins.function"
          },
          "$type": "garage.sampler.env_update.SetTaskUpdate"
        }
      ],
      "_workers": [
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 0,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  },
                  "max_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_shared_mean_log_std_network": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 49.0,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "2": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                  }
                },
                "_input_dim": 49.0,
                "_hidden_sizes": [
                  400,
                  400,
                  400
                ],
                "_action_dim": 4.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 2.061153622438558e-09,
                "_max_std": 7.38905609893065,
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": {
                  "$typename": "torch.nn.modules.activation.ReLU"
                },
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": {
                  "$type": "torch.Tensor"
                },
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "TanhGaussianPolicy",
            "_obs_dim": 49.0,
            "_action_dim": 4.0,
            "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
          },
          "env": "None",
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "_n_envs": 2,
          "_timesteps_per_call": 1,
          "_needs_env_reset": true,
          "_envs": [
            {
              "_env": {
                "_env": {
                  "_env": {
                    "_env": {
                      "frame_skip": 5,
                      "model": "<mujoco_py.cymj.PyMjModel object at 0x5556958842e0>",
                      "sim": "<mujoco_py.cymj.MjSim object at 0x7f173b1f6040>",
                      "data": "<mujoco_py.cymj.PyMjData object at 0x555695cc0770>",
                      "viewer": "None",
                      "_viewers": {},
                      "metadata": {
                        "render.modes": [
                          "human"
                        ],
                        "video.frames_per_second": 80
                      },
                      "init_qpos": "array([0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 ,\n       0.02, 1.  , 0.  , 0.  , 0.  ])",
                      "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "_did_see_sim_exception": false,
                      "_np_random": "Generator(PCG64) at 0x7F173B2B1660",
                      "action_scale": 0.01,
                      "action_rot_scale": 1.0,
                      "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "hand_high": "array([0.5, 1. , 0.5])",
                      "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "mocap_high": "array([0.5, 1. , 0.5])",
                      "curr_path_length": 0,
                      "seeded_rand_vec": true,
                      "_freeze_rand_vec": true,
                      "_last_rand_vec": "array([-0.09680346,  0.61399291,  0.02      ,  0.07461136,  0.89134247,\n        0.24947998])",
                      "discrete_goal_space": "None",
                      "discrete_goals": [],
                      "active_discrete_goal": "None",
                      "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
                      "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
                      "action_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.])",
                        "high": "array([1., 1., 1., 1.])",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "isV2": true,
                      "_obs_obj_max_len": 14,
                      "_obs_obj_possible_lens": [
                        6,
                        14
                      ],
                      "_set_task_called": true,
                      "_partially_observable": false,
                      "hand_init_pos": "array([0. , 0.6, 0.2])",
                      "_target_pos": "array([0.07461136, 0.89134247, 0.24947998])",
                      "_random_reset_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                        "_shape": [
                          6
                        ],
                        "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05], dtype=float32)",
                        "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ], dtype=float32)",
                        "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                        "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "_last_stable_obs": "None",
                      "_prev_obs": "array([ 0.00615235,  0.6001898 ,  0.19430117,  1.        , -0.09680346,\n        0.61399291,  0.02      ,  0.        ,  0.        ,  0.        ,\n        1.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                      "init_config": {
                        "obj_init_angle": 0.3,
                        "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                        "hand_init_pos": "array([0. , 0.6, 0.2])"
                      },
                      "goal": "array([-0.1,  0.8,  0.2])",
                      "obj_init_angle": 0.3,
                      "obj_init_pos": "array([-0.09680346,  0.61399291,  0.02      ])",
                      "goal_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.1 ,  0.8 ,  0.05], dtype=float32)",
                        "high": "array([0.1, 0.9, 0.3], dtype=float32)",
                        "low_repr": "[-0.1   0.8   0.05]",
                        "high_repr": "[0.1 0.9 0.3]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "num_resets": 1,
                      "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
                      "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_reach_v2.SawyerReachEnvV2"
                    },
                    "_max_episode_length": 500,
                    "_render_modes": [
                      "human"
                    ],
                    "_step_cnt": "None",
                    "_visualize": false,
                    "_action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_observation_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_spec": {
                      "max_episode_length": 500,
                      "input_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "output_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "_shape": [
                          39
                        ],
                        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ], dtype=float32)",
                        "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  ], dtype=float32)",
                        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05  ]",
                        "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3  ]",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "$type": "garage._environment.EnvSpec"
                    },
                    "_env_info": "None",
                    "$type": "garage.envs.gym_env.GymEnv"
                  },
                  "_task_name": "reach-v2",
                  "_task_id": "None",
                  "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
                },
                "_task_index": 0,
                "_n_total_tasks": 10,
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 500,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "_shape": [
                      49
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
              },
              "_scale_reward": 1.0,
              "_normalize_obs": false,
              "_normalize_reward": true,
              "_expected_action_scale": 1.0,
              "_flatten_obs": true,
              "_obs_alpha": 0.001,
              "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
              "_reward_alpha": 0.001,
              "_reward_mean": 0.0,
              "_reward_var": 1.0,
              "$type": "garage.envs.normalized_env.NormalizedEnv"
            },
            {
              "_env": {
                "_env": {
                  "_env": {
                    "_env": {
                      "frame_skip": 5,
                      "model": "<mujoco_py.cymj.PyMjModel object at 0x55569542be50>",
                      "sim": "<mujoco_py.cymj.MjSim object at 0x7f173b1057c0>",
                      "data": "<mujoco_py.cymj.PyMjData object at 0x5556954df590>",
                      "viewer": "None",
                      "_viewers": {},
                      "metadata": {
                        "render.modes": [
                          "human"
                        ],
                        "video.frames_per_second": 80
                      },
                      "init_qpos": "array([0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 ,\n       0.02, 1.  , 0.  , 0.  , 0.  ])",
                      "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "_did_see_sim_exception": false,
                      "_np_random": "Generator(PCG64) at 0x7F173B2B1820",
                      "action_scale": 0.01,
                      "action_rot_scale": 1.0,
                      "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "hand_high": "array([0.5, 1. , 0.5])",
                      "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "mocap_high": "array([0.5, 1. , 0.5])",
                      "curr_path_length": 0,
                      "seeded_rand_vec": true,
                      "_freeze_rand_vec": true,
                      "_last_rand_vec": "array([-0.09680346,  0.61399291,  0.02      ,  0.07461136,  0.89134247,\n        0.24947998])",
                      "discrete_goal_space": "None",
                      "discrete_goals": [],
                      "active_discrete_goal": "None",
                      "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
                      "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
                      "action_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.])",
                        "high": "array([1., 1., 1., 1.])",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "isV2": true,
                      "_obs_obj_max_len": 14,
                      "_obs_obj_possible_lens": [
                        6,
                        14
                      ],
                      "_set_task_called": true,
                      "_partially_observable": false,
                      "hand_init_pos": "array([0. , 0.6, 0.2])",
                      "_target_pos": "array([0.07461136, 0.89134247, 0.24947998])",
                      "_random_reset_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                        "_shape": [
                          6
                        ],
                        "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05], dtype=float32)",
                        "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ], dtype=float32)",
                        "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                        "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "_last_stable_obs": "None",
                      "_prev_obs": "array([ 0.00615235,  0.6001898 ,  0.19430117,  1.        , -0.09680346,\n        0.61399291,  0.02      ,  0.        ,  0.        ,  0.        ,\n        1.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                      "init_config": {
                        "obj_init_angle": 0.3,
                        "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                        "hand_init_pos": "array([0. , 0.6, 0.2])"
                      },
                      "goal": "array([-0.1,  0.8,  0.2])",
                      "obj_init_angle": 0.3,
                      "obj_init_pos": "array([-0.09680346,  0.61399291,  0.02      ])",
                      "goal_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.1 ,  0.8 ,  0.05], dtype=float32)",
                        "high": "array([0.1, 0.9, 0.3], dtype=float32)",
                        "low_repr": "[-0.1   0.8   0.05]",
                        "high_repr": "[0.1 0.9 0.3]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "num_resets": 1,
                      "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
                      "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_reach_v2.SawyerReachEnvV2"
                    },
                    "_max_episode_length": 500,
                    "_render_modes": [
                      "human"
                    ],
                    "_step_cnt": "None",
                    "_visualize": false,
                    "_action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_observation_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_spec": {
                      "max_episode_length": 500,
                      "input_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "output_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "_shape": [
                          39
                        ],
                        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ], dtype=float32)",
                        "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  ], dtype=float32)",
                        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05  ]",
                        "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3  ]",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "$type": "garage._environment.EnvSpec"
                    },
                    "_env_info": "None",
                    "$type": "garage.envs.gym_env.GymEnv"
                  },
                  "_task_name": "reach-v2",
                  "_task_id": "None",
                  "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
                },
                "_task_index": 0,
                "_n_total_tasks": 10,
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 500,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "_shape": [
                      49
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
              },
              "_scale_reward": 1.0,
              "_normalize_obs": false,
              "_normalize_reward": true,
              "_expected_action_scale": 1.0,
              "_flatten_obs": true,
              "_obs_alpha": 0.001,
              "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
              "_reward_alpha": 0.001,
              "_reward_mean": 0.0,
              "_reward_var": 1.0,
              "$type": "garage.envs.normalized_env.NormalizedEnv"
            }
          ],
          "_agents": [
            "None",
            "None"
          ],
          "_episode_lengths": [
            0,
            0
          ],
          "_complete_fragments": [],
          "_fragments": "None",
          "$type": "garage.sampler.fragment_worker.FragmentWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 1,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  },
                  "max_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_shared_mean_log_std_network": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 49.0,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "2": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                  }
                },
                "_input_dim": 49.0,
                "_hidden_sizes": [
                  400,
                  400,
                  400
                ],
                "_action_dim": 4.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 2.061153622438558e-09,
                "_max_std": 7.38905609893065,
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": {
                  "$typename": "torch.nn.modules.activation.ReLU"
                },
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": {
                  "$type": "torch.Tensor"
                },
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "TanhGaussianPolicy",
            "_obs_dim": 49.0,
            "_action_dim": 4.0,
            "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
          },
          "env": "None",
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "_n_envs": 2,
          "_timesteps_per_call": 1,
          "_needs_env_reset": true,
          "_envs": [
            {
              "_env": {
                "_env": {
                  "_env": {
                    "_env": {
                      "frame_skip": 5,
                      "model": "<mujoco_py.cymj.PyMjModel object at 0x555695553b40>",
                      "sim": "<mujoco_py.cymj.MjSim object at 0x7f173b014f40>",
                      "data": "<mujoco_py.cymj.PyMjData object at 0x555695990270>",
                      "viewer": "None",
                      "_viewers": {},
                      "metadata": {
                        "render.modes": [
                          "human"
                        ],
                        "video.frames_per_second": 80
                      },
                      "init_qpos": "array([0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 ,\n       0.02, 1.  , 0.  , 0.  , 0.  ])",
                      "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "_did_see_sim_exception": false,
                      "_np_random": "Generator(PCG64) at 0x7F173B2B19E0",
                      "action_scale": 0.01,
                      "action_rot_scale": 1.0,
                      "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "hand_high": "array([0.5, 1. , 0.5])",
                      "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "mocap_high": "array([0.5, 1. , 0.5])",
                      "curr_path_length": 0,
                      "seeded_rand_vec": true,
                      "_freeze_rand_vec": true,
                      "_last_rand_vec": "array([ 0.02282344,  0.65634415,  0.02      , -0.05023519,  0.82252896,\n        0.01174526])",
                      "discrete_goal_space": "None",
                      "discrete_goals": [],
                      "active_discrete_goal": "None",
                      "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
                      "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "isV2": true,
                      "_obs_obj_max_len": 14,
                      "_obs_obj_possible_lens": [
                        6,
                        14
                      ],
                      "_set_task_called": true,
                      "_partially_observable": false,
                      "hand_init_pos": "array([0. , 0.6, 0.2])",
                      "_target_pos": "array([-0.05023519,  0.82252896,  0.01987216])",
                      "_random_reset_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                        "_shape": [
                          6
                        ],
                        "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.01], dtype=float32)",
                        "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.02], dtype=float32)",
                        "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.01]",
                        "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.02]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "_last_stable_obs": "None",
                      "_prev_obs": "array([0.00615235, 0.6001898 , 0.19430117, 1.        , 0.02282344,\n       0.65634415, 0.01987216, 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
                      "init_config": {
                        "obj_init_angle": 0.3,
                        "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                        "hand_init_pos": "array([0. , 0.6, 0.2])"
                      },
                      "goal": "array([0.1 , 0.8 , 0.02])",
                      "obj_init_angle": 0.3,
                      "obj_init_pos": "array([0.02282344, 0.65634415, 0.01987216])",
                      "goal_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.1 ,  0.8 ,  0.01], dtype=float32)",
                        "high": "array([0.1 , 0.9 , 0.02], dtype=float32)",
                        "low_repr": "[-0.1   0.8   0.01]",
                        "high_repr": "[0.1  0.9  0.02]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "num_resets": 1,
                      "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
                      "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_push_v2.SawyerPushEnvV2"
                    },
                    "_max_episode_length": 500,
                    "_render_modes": [
                      "human"
                    ],
                    "_step_cnt": "None",
                    "_visualize": false,
                    "_action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_observation_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.01  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.02 ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.01  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.02 ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_spec": {
                      "max_episode_length": 500,
                      "input_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "output_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "_shape": [
                          39
                        ],
                        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.01  ], dtype=float32)",
                        "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.02 ], dtype=float32)",
                        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.01  ]",
                        "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.02 ]",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "$type": "garage._environment.EnvSpec"
                    },
                    "_env_info": "None",
                    "$type": "garage.envs.gym_env.GymEnv"
                  },
                  "_task_name": "push-v2",
                  "_task_id": "None",
                  "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
                },
                "_task_index": 1,
                "_n_total_tasks": 10,
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.01  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.02 , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.01    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.02  1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 500,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "_shape": [
                      49
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.01  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.02 , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.01    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.02  1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
              },
              "_scale_reward": 1.0,
              "_normalize_obs": false,
              "_normalize_reward": true,
              "_expected_action_scale": 1.0,
              "_flatten_obs": true,
              "_obs_alpha": 0.001,
              "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
              "_reward_alpha": 0.001,
              "_reward_mean": 0.0,
              "_reward_var": 1.0,
              "$type": "garage.envs.normalized_env.NormalizedEnv"
            },
            {
              "_env": {
                "_env": {
                  "_env": {
                    "_env": {
                      "frame_skip": 5,
                      "model": "<mujoco_py.cymj.PyMjModel object at 0x555695cb1ad0>",
                      "sim": "<mujoco_py.cymj.MjSim object at 0x7f173af2b740>",
                      "data": "<mujoco_py.cymj.PyMjData object at 0x5556959af370>",
                      "viewer": "None",
                      "_viewers": {},
                      "metadata": {
                        "render.modes": [
                          "human"
                        ],
                        "video.frames_per_second": 80
                      },
                      "init_qpos": "array([0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 ,\n       0.02, 1.  , 0.  , 0.  , 0.  ])",
                      "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "_did_see_sim_exception": false,
                      "_np_random": "Generator(PCG64) at 0x7F173B2B1BA0",
                      "action_scale": 0.01,
                      "action_rot_scale": 1.0,
                      "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "hand_high": "array([0.5, 1. , 0.5])",
                      "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "mocap_high": "array([0.5, 1. , 0.5])",
                      "curr_path_length": 0,
                      "seeded_rand_vec": true,
                      "_freeze_rand_vec": true,
                      "_last_rand_vec": "array([ 0.02282344,  0.65634415,  0.02      , -0.05023519,  0.82252896,\n        0.01174526])",
                      "discrete_goal_space": "None",
                      "discrete_goals": [],
                      "active_discrete_goal": "None",
                      "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
                      "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "isV2": true,
                      "_obs_obj_max_len": 14,
                      "_obs_obj_possible_lens": [
                        6,
                        14
                      ],
                      "_set_task_called": true,
                      "_partially_observable": false,
                      "hand_init_pos": "array([0. , 0.6, 0.2])",
                      "_target_pos": "array([-0.05023519,  0.82252896,  0.01987216])",
                      "_random_reset_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                        "_shape": [
                          6
                        ],
                        "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.01], dtype=float32)",
                        "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.02], dtype=float32)",
                        "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.01]",
                        "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.02]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "_last_stable_obs": "None",
                      "_prev_obs": "array([0.00615235, 0.6001898 , 0.19430117, 1.        , 0.02282344,\n       0.65634415, 0.01987216, 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
                      "init_config": {
                        "obj_init_angle": 0.3,
                        "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                        "hand_init_pos": "array([0. , 0.6, 0.2])"
                      },
                      "goal": "array([0.1 , 0.8 , 0.02])",
                      "obj_init_angle": 0.3,
                      "obj_init_pos": "array([0.02282344, 0.65634415, 0.01987216])",
                      "goal_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.1 ,  0.8 ,  0.01], dtype=float32)",
                        "high": "array([0.1 , 0.9 , 0.02], dtype=float32)",
                        "low_repr": "[-0.1   0.8   0.01]",
                        "high_repr": "[0.1  0.9  0.02]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "num_resets": 1,
                      "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
                      "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_push_v2.SawyerPushEnvV2"
                    },
                    "_max_episode_length": 500,
                    "_render_modes": [
                      "human"
                    ],
                    "_step_cnt": "None",
                    "_visualize": false,
                    "_action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_observation_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.01  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.02 ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.01  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.02 ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_spec": {
                      "max_episode_length": 500,
                      "input_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "output_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "_shape": [
                          39
                        ],
                        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.01  ], dtype=float32)",
                        "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.02 ], dtype=float32)",
                        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.01  ]",
                        "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.02 ]",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "$type": "garage._environment.EnvSpec"
                    },
                    "_env_info": "None",
                    "$type": "garage.envs.gym_env.GymEnv"
                  },
                  "_task_name": "push-v2",
                  "_task_id": "None",
                  "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
                },
                "_task_index": 1,
                "_n_total_tasks": 10,
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.01  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.02 , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.01    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.02  1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 500,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "_shape": [
                      49
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.01  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.02 , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.01    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.02  1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
              },
              "_scale_reward": 1.0,
              "_normalize_obs": false,
              "_normalize_reward": true,
              "_expected_action_scale": 1.0,
              "_flatten_obs": true,
              "_obs_alpha": 0.001,
              "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
              "_reward_alpha": 0.001,
              "_reward_mean": 0.0,
              "_reward_var": 1.0,
              "$type": "garage.envs.normalized_env.NormalizedEnv"
            }
          ],
          "_agents": [
            "None",
            "None"
          ],
          "_episode_lengths": [
            0,
            0
          ],
          "_complete_fragments": [],
          "_fragments": "None",
          "$type": "garage.sampler.fragment_worker.FragmentWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 2,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  },
                  "max_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_shared_mean_log_std_network": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 49.0,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "2": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                  }
                },
                "_input_dim": 49.0,
                "_hidden_sizes": [
                  400,
                  400,
                  400
                ],
                "_action_dim": 4.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 2.061153622438558e-09,
                "_max_std": 7.38905609893065,
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": {
                  "$typename": "torch.nn.modules.activation.ReLU"
                },
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": {
                  "$type": "torch.Tensor"
                },
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "TanhGaussianPolicy",
            "_obs_dim": 49.0,
            "_action_dim": 4.0,
            "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
          },
          "env": "None",
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "_n_envs": 2,
          "_timesteps_per_call": 1,
          "_needs_env_reset": true,
          "_envs": [
            {
              "_env": {
                "_env": {
                  "_env": {
                    "_env": {
                      "frame_skip": 5,
                      "model": "<mujoco_py.cymj.PyMjModel object at 0x5556954e50b0>",
                      "sim": "<mujoco_py.cymj.MjSim object at 0x7f173adb9ec0>",
                      "data": "<mujoco_py.cymj.PyMjData object at 0x555695573da0>",
                      "viewer": "None",
                      "_viewers": {},
                      "metadata": {
                        "render.modes": [
                          "human"
                        ],
                        "video.frames_per_second": 80
                      },
                      "init_qpos": "array([0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 ,\n       0.02, 1.  , 0.  , 0.  , 0.  ])",
                      "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "_did_see_sim_exception": false,
                      "_np_random": "Generator(PCG64) at 0x7F173B2B1D60",
                      "action_scale": 0.01,
                      "action_rot_scale": 1.0,
                      "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "hand_high": "array([0.5, 1. , 0.5])",
                      "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "mocap_high": "array([0.5, 1. , 0.5])",
                      "curr_path_length": 0,
                      "seeded_rand_vec": true,
                      "_freeze_rand_vec": true,
                      "_last_rand_vec": "array([ 0.04734335,  0.68134592,  0.02      , -0.04286314,  0.87136413,\n        0.11504219])",
                      "discrete_goal_space": "None",
                      "discrete_goals": [],
                      "active_discrete_goal": "None",
                      "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
                      "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
                      "action_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.])",
                        "high": "array([1., 1., 1., 1.])",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "isV2": true,
                      "_obs_obj_max_len": 14,
                      "_obs_obj_possible_lens": [
                        6,
                        14
                      ],
                      "_set_task_called": true,
                      "_partially_observable": false,
                      "hand_init_pos": "array([0. , 0.6, 0.2])",
                      "_target_pos": "array([-0.04286314,  0.87136413,  0.11504219])",
                      "_random_reset_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                        "_shape": [
                          6
                        ],
                        "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05], dtype=float32)",
                        "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ], dtype=float32)",
                        "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                        "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "_last_stable_obs": "None",
                      "_prev_obs": "array([0.00615235, 0.6001898 , 0.19430117, 1.        , 0.04734335,\n       0.68134592, 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
                      "init_config": {
                        "obj_init_angle": 0.3,
                        "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                        "hand_init_pos": "array([0. , 0.6, 0.2])"
                      },
                      "goal": "array([0.1, 0.8, 0.2])",
                      "obj_init_angle": 0.3,
                      "obj_init_pos": "array([0.04734335, 0.68134592, 0.02      ])",
                      "goal_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.1 ,  0.8 ,  0.05], dtype=float32)",
                        "high": "array([0.1, 0.9, 0.3], dtype=float32)",
                        "low_repr": "[-0.1   0.8   0.05]",
                        "high_repr": "[0.1 0.9 0.3]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "num_resets": 1,
                      "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
                      "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    },
                    "_max_episode_length": 500,
                    "_render_modes": [
                      "human"
                    ],
                    "_step_cnt": "None",
                    "_visualize": false,
                    "_action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_observation_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_spec": {
                      "max_episode_length": 500,
                      "input_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "output_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "_shape": [
                          39
                        ],
                        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ], dtype=float32)",
                        "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  ], dtype=float32)",
                        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05  ]",
                        "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3  ]",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "$type": "garage._environment.EnvSpec"
                    },
                    "_env_info": "None",
                    "$type": "garage.envs.gym_env.GymEnv"
                  },
                  "_task_name": "pick-place-v2",
                  "_task_id": "None",
                  "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
                },
                "_task_index": 2,
                "_n_total_tasks": 10,
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 500,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "_shape": [
                      49
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
              },
              "_scale_reward": 1.0,
              "_normalize_obs": false,
              "_normalize_reward": true,
              "_expected_action_scale": 1.0,
              "_flatten_obs": true,
              "_obs_alpha": 0.001,
              "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
              "_reward_alpha": 0.001,
              "_reward_mean": 0.0,
              "_reward_var": 1.0,
              "$type": "garage.envs.normalized_env.NormalizedEnv"
            },
            {
              "_env": {
                "_env": {
                  "_env": {
                    "_env": {
                      "frame_skip": 5,
                      "model": "<mujoco_py.cymj.PyMjModel object at 0x5556954fab00>",
                      "sim": "<mujoco_py.cymj.MjSim object at 0x7f173acd26c0>",
                      "data": "<mujoco_py.cymj.PyMjData object at 0x55569585cf50>",
                      "viewer": "None",
                      "_viewers": {},
                      "metadata": {
                        "render.modes": [
                          "human"
                        ],
                        "video.frames_per_second": 80
                      },
                      "init_qpos": "array([0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 ,\n       0.02, 1.  , 0.  , 0.  , 0.  ])",
                      "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "_did_see_sim_exception": false,
                      "_np_random": "Generator(PCG64) at 0x7F173B2B1F20",
                      "action_scale": 0.01,
                      "action_rot_scale": 1.0,
                      "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "hand_high": "array([0.5, 1. , 0.5])",
                      "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "mocap_high": "array([0.5, 1. , 0.5])",
                      "curr_path_length": 0,
                      "seeded_rand_vec": true,
                      "_freeze_rand_vec": true,
                      "_last_rand_vec": "array([ 0.04734335,  0.68134592,  0.02      , -0.04286314,  0.87136413,\n        0.11504219])",
                      "discrete_goal_space": "None",
                      "discrete_goals": [],
                      "active_discrete_goal": "None",
                      "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
                      "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
                      "action_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.])",
                        "high": "array([1., 1., 1., 1.])",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "isV2": true,
                      "_obs_obj_max_len": 14,
                      "_obs_obj_possible_lens": [
                        6,
                        14
                      ],
                      "_set_task_called": true,
                      "_partially_observable": false,
                      "hand_init_pos": "array([0. , 0.6, 0.2])",
                      "_target_pos": "array([-0.04286314,  0.87136413,  0.11504219])",
                      "_random_reset_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                        "_shape": [
                          6
                        ],
                        "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05], dtype=float32)",
                        "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ], dtype=float32)",
                        "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                        "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "_last_stable_obs": "None",
                      "_prev_obs": "array([0.00615235, 0.6001898 , 0.19430117, 1.        , 0.04734335,\n       0.68134592, 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
                      "init_config": {
                        "obj_init_angle": 0.3,
                        "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                        "hand_init_pos": "array([0. , 0.6, 0.2])"
                      },
                      "goal": "array([0.1, 0.8, 0.2])",
                      "obj_init_angle": 0.3,
                      "obj_init_pos": "array([0.04734335, 0.68134592, 0.02      ])",
                      "goal_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.1 ,  0.8 ,  0.05], dtype=float32)",
                        "high": "array([0.1, 0.9, 0.3], dtype=float32)",
                        "low_repr": "[-0.1   0.8   0.05]",
                        "high_repr": "[0.1 0.9 0.3]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "num_resets": 1,
                      "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
                      "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                    },
                    "_max_episode_length": 500,
                    "_render_modes": [
                      "human"
                    ],
                    "_step_cnt": "None",
                    "_visualize": false,
                    "_action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_observation_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_spec": {
                      "max_episode_length": 500,
                      "input_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "output_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "_shape": [
                          39
                        ],
                        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ], dtype=float32)",
                        "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  ], dtype=float32)",
                        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05  ]",
                        "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3  ]",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "$type": "garage._environment.EnvSpec"
                    },
                    "_env_info": "None",
                    "$type": "garage.envs.gym_env.GymEnv"
                  },
                  "_task_name": "pick-place-v2",
                  "_task_id": "None",
                  "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
                },
                "_task_index": 2,
                "_n_total_tasks": 10,
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 500,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "_shape": [
                      49
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
              },
              "_scale_reward": 1.0,
              "_normalize_obs": false,
              "_normalize_reward": true,
              "_expected_action_scale": 1.0,
              "_flatten_obs": true,
              "_obs_alpha": 0.001,
              "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
              "_reward_alpha": 0.001,
              "_reward_mean": 0.0,
              "_reward_var": 1.0,
              "$type": "garage.envs.normalized_env.NormalizedEnv"
            }
          ],
          "_agents": [
            "None",
            "None"
          ],
          "_episode_lengths": [
            0,
            0
          ],
          "_complete_fragments": [],
          "_fragments": "None",
          "$type": "garage.sampler.fragment_worker.FragmentWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 3,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  },
                  "max_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_shared_mean_log_std_network": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 49.0,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "2": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                  }
                },
                "_input_dim": 49.0,
                "_hidden_sizes": [
                  400,
                  400,
                  400
                ],
                "_action_dim": 4.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 2.061153622438558e-09,
                "_max_std": 7.38905609893065,
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": {
                  "$typename": "torch.nn.modules.activation.ReLU"
                },
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": {
                  "$type": "torch.Tensor"
                },
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "TanhGaussianPolicy",
            "_obs_dim": 49.0,
            "_action_dim": 4.0,
            "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
          },
          "env": "None",
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "_n_envs": 2,
          "_timesteps_per_call": 1,
          "_needs_env_reset": true,
          "_envs": [
            {
              "_env": {
                "_env": {
                  "_env": {
                    "_env": {
                      "frame_skip": 5,
                      "model": "<mujoco_py.cymj.PyMjModel object at 0x555695cd6c40>",
                      "sim": "<mujoco_py.cymj.MjSim object at 0x7f173abd8540>",
                      "data": "<mujoco_py.cymj.PyMjData object at 0x555696f161a0>",
                      "viewer": "None",
                      "_viewers": {},
                      "metadata": {
                        "render.modes": [
                          "human"
                        ],
                        "video.frames_per_second": 80
                      },
                      "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "_did_see_sim_exception": false,
                      "_np_random": "Generator(PCG64) at 0x7F173AC23120",
                      "action_scale": 0.01,
                      "action_rot_scale": 1.0,
                      "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "hand_high": "array([0.5, 1. , 0.5])",
                      "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "mocap_high": "array([0.5, 1. , 0.5])",
                      "curr_path_length": 0,
                      "seeded_rand_vec": true,
                      "_freeze_rand_vec": true,
                      "_last_rand_vec": "array([0.06405342, 0.92718979, 0.15000001])",
                      "discrete_goal_space": "None",
                      "discrete_goals": [],
                      "active_discrete_goal": "None",
                      "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
                      "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
                      "action_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.])",
                        "high": "array([1., 1., 1., 1.])",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "isV2": true,
                      "_obs_obj_max_len": 14,
                      "_obs_obj_possible_lens": [
                        6,
                        14
                      ],
                      "_set_task_called": true,
                      "_partially_observable": false,
                      "hand_init_pos": "array([0. , 0.6, 0.2])",
                      "_target_pos": "array([-0.23594658,  0.47718979,  0.15000001])",
                      "_random_reset_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([0.  , 0.85, 0.15], dtype=float32)",
                        "high": "array([0.1 , 0.95, 0.15], dtype=float32)",
                        "low_repr": "[0.   0.85 0.15]",
                        "high_repr": "[0.1  0.95 0.15]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "_last_stable_obs": "None",
                      "_prev_obs": "array([ 0.00615235,  0.6001898 ,  0.19430117,  1.        ,  0.25477505,\n        0.7200499 ,  0.15003595,  0.6907585 , -0.15062097,  0.69087866,\n        0.15117109,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                      "init_config": {
                        "obj_init_angle": "array([0.3])",
                        "obj_init_pos": "array([0.1 , 0.95, 0.15])",
                        "hand_init_pos": "array([0. , 0.6, 0.2])"
                      },
                      "goal": "array([-0.2 ,  0.7 ,  0.15])",
                      "obj_init_pos": "array([0.06405342, 0.92718979, 0.15000001])",
                      "obj_init_angle": "array([0.3])",
                      "door_angle_idx": 9.0,
                      "goal_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.3   ,  0.4   ,  0.1499], dtype=float32)",
                        "high": "array([-0.2   ,  0.5   ,  0.1501], dtype=float32)",
                        "low_repr": "[-0.3     0.4     0.1499]",
                        "high_repr": "[-0.2     0.5     0.1501]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
                      "objHeight": 0.15003594872010784,
                      "maxPullDist": 0.5475296783430732,
                      "target_reward": 2547.529678343073,
                      "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_door_v2.SawyerDoorEnvV2"
                    },
                    "_max_episode_length": 500,
                    "_render_modes": [
                      "human"
                    ],
                    "_step_cnt": "None",
                    "_visualize": false,
                    "_action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_observation_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.3   ,  0.4   ,  0.1499], dtype=float32)",
                      "high": "array([ 0.525 ,  1.025 ,  0.7   ,  1.    ,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,  0.525 ,  1.025 ,  0.7   ,\n        1.    ,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf, -0.2   ,  0.5   ,  0.1501], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.3     0.4     0.1499]",
                      "high_repr": "[ 0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n  0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n -0.2     0.5     0.1501]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_spec": {
                      "max_episode_length": 500,
                      "input_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "output_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "_shape": [
                          39
                        ],
                        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.3   ,  0.4   ,  0.1499], dtype=float32)",
                        "high": "array([ 0.525 ,  1.025 ,  0.7   ,  1.    ,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,  0.525 ,  1.025 ,  0.7   ,\n        1.    ,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf, -0.2   ,  0.5   ,  0.1501], dtype=float32)",
                        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.3     0.4     0.1499]",
                        "high_repr": "[ 0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n  0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n -0.2     0.5     0.1501]",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "$type": "garage._environment.EnvSpec"
                    },
                    "_env_info": "None",
                    "$type": "garage.envs.gym_env.GymEnv"
                  },
                  "_task_name": "door-open-v2",
                  "_task_id": "None",
                  "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
                },
                "_task_index": 3,
                "_n_total_tasks": 10,
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.3   ,  0.4   ,  0.1499,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([ 0.525 ,  1.025 ,  0.7   ,  1.    ,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,  0.525 ,  1.025 ,  0.7   ,\n        1.    ,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf, -0.2   ,  0.5   ,  0.1501,  1.    ,  1.    ,  1.    ,\n        1.    ,  1.    ,  1.    ,  1.    ,  1.    ,  1.    ,  1.    ],\n      dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.3     0.4     0.1499  0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[ 0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n  0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n -0.2     0.5     0.1501  1.      1.      1.      1.      1.      1.\n  1.      1.      1.      1.    ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 500,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "_shape": [
                      49
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.3   ,  0.4   ,  0.1499,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                    "high": "array([ 0.525 ,  1.025 ,  0.7   ,  1.    ,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,  0.525 ,  1.025 ,  0.7   ,\n        1.    ,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf, -0.2   ,  0.5   ,  0.1501,  1.    ,  1.    ,  1.    ,\n        1.    ,  1.    ,  1.    ,  1.    ,  1.    ,  1.    ,  1.    ],\n      dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.3     0.4     0.1499  0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                    "high_repr": "[ 0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n  0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n -0.2     0.5     0.1501  1.      1.      1.      1.      1.      1.\n  1.      1.      1.      1.    ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
              },
              "_scale_reward": 1.0,
              "_normalize_obs": false,
              "_normalize_reward": true,
              "_expected_action_scale": 1.0,
              "_flatten_obs": true,
              "_obs_alpha": 0.001,
              "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
              "_reward_alpha": 0.001,
              "_reward_mean": 0.0,
              "_reward_var": 1.0,
              "$type": "garage.envs.normalized_env.NormalizedEnv"
            },
            {
              "_env": {
                "_env": {
                  "_env": {
                    "_env": {
                      "frame_skip": 5,
                      "model": "<mujoco_py.cymj.PyMjModel object at 0x5556958897b0>",
                      "sim": "<mujoco_py.cymj.MjSim object at 0x7f173aae5cc0>",
                      "data": "<mujoco_py.cymj.PyMjData object at 0x555695cb04e0>",
                      "viewer": "None",
                      "_viewers": {},
                      "metadata": {
                        "render.modes": [
                          "human"
                        ],
                        "video.frames_per_second": 80
                      },
                      "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "_did_see_sim_exception": false,
                      "_np_random": "Generator(PCG64) at 0x7F173AC232E0",
                      "action_scale": 0.01,
                      "action_rot_scale": 1.0,
                      "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "hand_high": "array([0.5, 1. , 0.5])",
                      "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "mocap_high": "array([0.5, 1. , 0.5])",
                      "curr_path_length": 0,
                      "seeded_rand_vec": true,
                      "_freeze_rand_vec": true,
                      "_last_rand_vec": "array([0.06405342, 0.92718979, 0.15000001])",
                      "discrete_goal_space": "None",
                      "discrete_goals": [],
                      "active_discrete_goal": "None",
                      "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
                      "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
                      "action_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.])",
                        "high": "array([1., 1., 1., 1.])",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "isV2": true,
                      "_obs_obj_max_len": 14,
                      "_obs_obj_possible_lens": [
                        6,
                        14
                      ],
                      "_set_task_called": true,
                      "_partially_observable": false,
                      "hand_init_pos": "array([0. , 0.6, 0.2])",
                      "_target_pos": "array([-0.23594658,  0.47718979,  0.15000001])",
                      "_random_reset_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([0.  , 0.85, 0.15], dtype=float32)",
                        "high": "array([0.1 , 0.95, 0.15], dtype=float32)",
                        "low_repr": "[0.   0.85 0.15]",
                        "high_repr": "[0.1  0.95 0.15]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "_last_stable_obs": "None",
                      "_prev_obs": "array([ 0.00615235,  0.6001898 ,  0.19430117,  1.        ,  0.25477505,\n        0.7200499 ,  0.15003595,  0.6907585 , -0.15062097,  0.69087866,\n        0.15117109,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                      "init_config": {
                        "obj_init_angle": "array([0.3])",
                        "obj_init_pos": "array([0.1 , 0.95, 0.15])",
                        "hand_init_pos": "array([0. , 0.6, 0.2])"
                      },
                      "goal": "array([-0.2 ,  0.7 ,  0.15])",
                      "obj_init_pos": "array([0.06405342, 0.92718979, 0.15000001])",
                      "obj_init_angle": "array([0.3])",
                      "door_angle_idx": 9.0,
                      "goal_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.3   ,  0.4   ,  0.1499], dtype=float32)",
                        "high": "array([-0.2   ,  0.5   ,  0.1501], dtype=float32)",
                        "low_repr": "[-0.3     0.4     0.1499]",
                        "high_repr": "[-0.2     0.5     0.1501]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
                      "objHeight": 0.15003594872010784,
                      "maxPullDist": 0.5475296783430732,
                      "target_reward": 2547.529678343073,
                      "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_door_v2.SawyerDoorEnvV2"
                    },
                    "_max_episode_length": 500,
                    "_render_modes": [
                      "human"
                    ],
                    "_step_cnt": "None",
                    "_visualize": false,
                    "_action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_observation_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.3   ,  0.4   ,  0.1499], dtype=float32)",
                      "high": "array([ 0.525 ,  1.025 ,  0.7   ,  1.    ,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,  0.525 ,  1.025 ,  0.7   ,\n        1.    ,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf, -0.2   ,  0.5   ,  0.1501], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.3     0.4     0.1499]",
                      "high_repr": "[ 0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n  0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n -0.2     0.5     0.1501]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_spec": {
                      "max_episode_length": 500,
                      "input_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "output_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "_shape": [
                          39
                        ],
                        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.3   ,  0.4   ,  0.1499], dtype=float32)",
                        "high": "array([ 0.525 ,  1.025 ,  0.7   ,  1.    ,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,  0.525 ,  1.025 ,  0.7   ,\n        1.    ,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf, -0.2   ,  0.5   ,  0.1501], dtype=float32)",
                        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.3     0.4     0.1499]",
                        "high_repr": "[ 0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n  0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n -0.2     0.5     0.1501]",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "$type": "garage._environment.EnvSpec"
                    },
                    "_env_info": "None",
                    "$type": "garage.envs.gym_env.GymEnv"
                  },
                  "_task_name": "door-open-v2",
                  "_task_id": "None",
                  "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
                },
                "_task_index": 3,
                "_n_total_tasks": 10,
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.3   ,  0.4   ,  0.1499,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([ 0.525 ,  1.025 ,  0.7   ,  1.    ,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,  0.525 ,  1.025 ,  0.7   ,\n        1.    ,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf, -0.2   ,  0.5   ,  0.1501,  1.    ,  1.    ,  1.    ,\n        1.    ,  1.    ,  1.    ,  1.    ,  1.    ,  1.    ,  1.    ],\n      dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.3     0.4     0.1499  0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[ 0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n  0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n -0.2     0.5     0.1501  1.      1.      1.      1.      1.      1.\n  1.      1.      1.      1.    ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 500,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "_shape": [
                      49
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.3   ,  0.4   ,  0.1499,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                    "high": "array([ 0.525 ,  1.025 ,  0.7   ,  1.    ,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,  0.525 ,  1.025 ,  0.7   ,\n        1.    ,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf, -0.2   ,  0.5   ,  0.1501,  1.    ,  1.    ,  1.    ,\n        1.    ,  1.    ,  1.    ,  1.    ,  1.    ,  1.    ,  1.    ],\n      dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.3     0.4     0.1499  0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                    "high_repr": "[ 0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n  0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n -0.2     0.5     0.1501  1.      1.      1.      1.      1.      1.\n  1.      1.      1.      1.    ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
              },
              "_scale_reward": 1.0,
              "_normalize_obs": false,
              "_normalize_reward": true,
              "_expected_action_scale": 1.0,
              "_flatten_obs": true,
              "_obs_alpha": 0.001,
              "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
              "_reward_alpha": 0.001,
              "_reward_mean": 0.0,
              "_reward_var": 1.0,
              "$type": "garage.envs.normalized_env.NormalizedEnv"
            }
          ],
          "_agents": [
            "None",
            "None"
          ],
          "_episode_lengths": [
            0,
            0
          ],
          "_complete_fragments": [],
          "_fragments": "None",
          "$type": "garage.sampler.fragment_worker.FragmentWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 4,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  },
                  "max_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_shared_mean_log_std_network": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 49.0,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "2": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                  }
                },
                "_input_dim": 49.0,
                "_hidden_sizes": [
                  400,
                  400,
                  400
                ],
                "_action_dim": 4.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 2.061153622438558e-09,
                "_max_std": 7.38905609893065,
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": {
                  "$typename": "torch.nn.modules.activation.ReLU"
                },
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": {
                  "$type": "torch.Tensor"
                },
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "TanhGaussianPolicy",
            "_obs_dim": 49.0,
            "_action_dim": 4.0,
            "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
          },
          "env": "None",
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "_n_envs": 2,
          "_timesteps_per_call": 1,
          "_needs_env_reset": true,
          "_envs": [
            {
              "_env": {
                "_env": {
                  "_env": {
                    "_env": {
                      "frame_skip": 5,
                      "model": "<mujoco_py.cymj.PyMjModel object at 0x555696ebbba0>",
                      "sim": "<mujoco_py.cymj.MjSim object at 0x7f173a97c4c0>",
                      "data": "<mujoco_py.cymj.PyMjData object at 0x5556954214f0>",
                      "viewer": "None",
                      "_viewers": {},
                      "metadata": {
                        "render.modes": [
                          "human"
                        ],
                        "video.frames_per_second": 80
                      },
                      "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "_did_see_sim_exception": false,
                      "_np_random": "Generator(PCG64) at 0x7F173AC234A0",
                      "action_scale": 0.01,
                      "action_rot_scale": 1.0,
                      "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "hand_high": "array([0.5, 1. , 0.5])",
                      "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "mocap_high": "array([0.5, 1. , 0.5])",
                      "curr_path_length": 0,
                      "seeded_rand_vec": true,
                      "_freeze_rand_vec": true,
                      "_last_rand_vec": "array([0.09325532, 0.89999998, 0.        ])",
                      "discrete_goal_space": "None",
                      "discrete_goals": [],
                      "active_discrete_goal": "None",
                      "init_left_pad": "array([0.00424391, 0.64740393, 0.1945706 ])",
                      "init_right_pad": "array([0.00807892, 0.55313929, 0.19412857])",
                      "action_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.])",
                        "high": "array([1., 1., 1., 1.])",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "isV2": true,
                      "_obs_obj_max_len": 14,
                      "_obs_obj_possible_lens": [
                        6,
                        14
                      ],
                      "_set_task_called": true,
                      "_partially_observable": false,
                      "hand_init_pos": "array([0. , 0.6, 0.2], dtype=float32)",
                      "_target_pos": "array([0.09325532, 0.53999998, 0.09      ])",
                      "_random_reset_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.1,  0.9,  0. ], dtype=float32)",
                        "high": "array([0.1, 0.9, 0. ], dtype=float32)",
                        "low_repr": "[-0.1  0.9  0. ]",
                        "high_repr": "[0.1 0.9 0. ]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "_last_stable_obs": "None",
                      "_prev_obs": "array([0.00616141, 0.60027169, 0.19434958, 1.        , 0.        ,\n       0.73      , 0.09      , 1.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
                      "init_config": {
                        "obj_init_angle": "array([0.3], dtype=float32)",
                        "obj_init_pos": "array([0. , 0.9, 0. ], dtype=float32)",
                        "hand_init_pos": "array([0. , 0.6, 0.2], dtype=float32)"
                      },
                      "obj_init_pos": "array([0.09325532, 0.89999998, 0.        ])",
                      "obj_init_angle": "array([0.3], dtype=float32)",
                      "goal_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                        "high": "array([0.5, 1. , 0.5], dtype=float32)",
                        "low_repr": "[-0.5   0.4   0.05]",
                        "high_repr": "[0.5 1.  0.5]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "maxDist": 0.2,
                      "target_reward": 2200.0,
                      "init_tcp": "array([0.00600364, 0.6004762 , 0.14935033])",
                      "prev_obs": "array([0.00616141, 0.60027169, 0.19434958, 1.        , 0.        ,\n       0.73      , 0.09      , 1.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
                      "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_open_v2.SawyerDrawerOpenEnvV2"
                    },
                    "_max_episode_length": 500,
                    "_render_modes": [
                      "human"
                    ],
                    "_step_cnt": "None",
                    "_visualize": false,
                    "_action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_observation_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_spec": {
                      "max_episode_length": 500,
                      "input_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "output_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "_shape": [
                          39
                        ],
                        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                        "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                        "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "$type": "garage._environment.EnvSpec"
                    },
                    "_env_info": "None",
                    "$type": "garage.envs.gym_env.GymEnv"
                  },
                  "_task_name": "drawer-open-v2",
                  "_task_id": "None",
                  "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
                },
                "_task_index": 4,
                "_n_total_tasks": 10,
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 500,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "_shape": [
                      49
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
              },
              "_scale_reward": 1.0,
              "_normalize_obs": false,
              "_normalize_reward": true,
              "_expected_action_scale": 1.0,
              "_flatten_obs": true,
              "_obs_alpha": 0.001,
              "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
              "_reward_alpha": 0.001,
              "_reward_mean": 0.0,
              "_reward_var": 1.0,
              "$type": "garage.envs.normalized_env.NormalizedEnv"
            },
            {
              "_env": {
                "_env": {
                  "_env": {
                    "_env": {
                      "frame_skip": 5,
                      "model": "<mujoco_py.cymj.PyMjModel object at 0x55569ff87530>",
                      "sim": "<mujoco_py.cymj.MjSim object at 0x7f173a88ac40>",
                      "data": "<mujoco_py.cymj.PyMjData object at 0x55569d3cda00>",
                      "viewer": "None",
                      "_viewers": {},
                      "metadata": {
                        "render.modes": [
                          "human"
                        ],
                        "video.frames_per_second": 80
                      },
                      "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "_did_see_sim_exception": false,
                      "_np_random": "Generator(PCG64) at 0x7F173AC23660",
                      "action_scale": 0.01,
                      "action_rot_scale": 1.0,
                      "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "hand_high": "array([0.5, 1. , 0.5])",
                      "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "mocap_high": "array([0.5, 1. , 0.5])",
                      "curr_path_length": 0,
                      "seeded_rand_vec": true,
                      "_freeze_rand_vec": true,
                      "_last_rand_vec": "array([0.09325532, 0.89999998, 0.        ])",
                      "discrete_goal_space": "None",
                      "discrete_goals": [],
                      "active_discrete_goal": "None",
                      "init_left_pad": "array([0.00424391, 0.64740393, 0.1945706 ])",
                      "init_right_pad": "array([0.00807892, 0.55313929, 0.19412857])",
                      "action_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.])",
                        "high": "array([1., 1., 1., 1.])",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "isV2": true,
                      "_obs_obj_max_len": 14,
                      "_obs_obj_possible_lens": [
                        6,
                        14
                      ],
                      "_set_task_called": true,
                      "_partially_observable": false,
                      "hand_init_pos": "array([0. , 0.6, 0.2], dtype=float32)",
                      "_target_pos": "array([0.09325532, 0.53999998, 0.09      ])",
                      "_random_reset_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.1,  0.9,  0. ], dtype=float32)",
                        "high": "array([0.1, 0.9, 0. ], dtype=float32)",
                        "low_repr": "[-0.1  0.9  0. ]",
                        "high_repr": "[0.1 0.9 0. ]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "_last_stable_obs": "None",
                      "_prev_obs": "array([0.00616141, 0.60027169, 0.19434958, 1.        , 0.        ,\n       0.73      , 0.09      , 1.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
                      "init_config": {
                        "obj_init_angle": "array([0.3], dtype=float32)",
                        "obj_init_pos": "array([0. , 0.9, 0. ], dtype=float32)",
                        "hand_init_pos": "array([0. , 0.6, 0.2], dtype=float32)"
                      },
                      "obj_init_pos": "array([0.09325532, 0.89999998, 0.        ])",
                      "obj_init_angle": "array([0.3], dtype=float32)",
                      "goal_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                        "high": "array([0.5, 1. , 0.5], dtype=float32)",
                        "low_repr": "[-0.5   0.4   0.05]",
                        "high_repr": "[0.5 1.  0.5]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "maxDist": 0.2,
                      "target_reward": 2200.0,
                      "init_tcp": "array([0.00600364, 0.6004762 , 0.14935033])",
                      "prev_obs": "array([0.00616141, 0.60027169, 0.19434958, 1.        , 0.        ,\n       0.73      , 0.09      , 1.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
                      "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_open_v2.SawyerDrawerOpenEnvV2"
                    },
                    "_max_episode_length": 500,
                    "_render_modes": [
                      "human"
                    ],
                    "_step_cnt": "None",
                    "_visualize": false,
                    "_action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_observation_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_spec": {
                      "max_episode_length": 500,
                      "input_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "output_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "_shape": [
                          39
                        ],
                        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                        "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                        "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "$type": "garage._environment.EnvSpec"
                    },
                    "_env_info": "None",
                    "$type": "garage.envs.gym_env.GymEnv"
                  },
                  "_task_name": "drawer-open-v2",
                  "_task_id": "None",
                  "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
                },
                "_task_index": 4,
                "_n_total_tasks": 10,
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 500,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "_shape": [
                      49
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
              },
              "_scale_reward": 1.0,
              "_normalize_obs": false,
              "_normalize_reward": true,
              "_expected_action_scale": 1.0,
              "_flatten_obs": true,
              "_obs_alpha": 0.001,
              "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
              "_reward_alpha": 0.001,
              "_reward_mean": 0.0,
              "_reward_var": 1.0,
              "$type": "garage.envs.normalized_env.NormalizedEnv"
            }
          ],
          "_agents": [
            "None",
            "None"
          ],
          "_episode_lengths": [
            0,
            0
          ],
          "_complete_fragments": [],
          "_fragments": "None",
          "$type": "garage.sampler.fragment_worker.FragmentWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 5,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  },
                  "max_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_shared_mean_log_std_network": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 49.0,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "2": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                  }
                },
                "_input_dim": 49.0,
                "_hidden_sizes": [
                  400,
                  400,
                  400
                ],
                "_action_dim": 4.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 2.061153622438558e-09,
                "_max_std": 7.38905609893065,
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": {
                  "$typename": "torch.nn.modules.activation.ReLU"
                },
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": {
                  "$type": "torch.Tensor"
                },
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "TanhGaussianPolicy",
            "_obs_dim": 49.0,
            "_action_dim": 4.0,
            "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
          },
          "env": "None",
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "_n_envs": 2,
          "_timesteps_per_call": 1,
          "_needs_env_reset": true,
          "_envs": [
            {
              "_env": {
                "_env": {
                  "_env": {
                    "_env": {
                      "frame_skip": 5,
                      "model": "<mujoco_py.cymj.PyMjModel object at 0x55569a2ceae0>",
                      "sim": "<mujoco_py.cymj.MjSim object at 0x7f173a7a0440>",
                      "data": "<mujoco_py.cymj.PyMjData object at 0x55569558e840>",
                      "viewer": "None",
                      "_viewers": {},
                      "metadata": {
                        "render.modes": [
                          "human"
                        ],
                        "video.frames_per_second": 80
                      },
                      "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "_did_see_sim_exception": false,
                      "_np_random": "Generator(PCG64) at 0x7F173AC23820",
                      "action_scale": 0.01,
                      "action_rot_scale": 1.0,
                      "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "hand_high": "array([0.5, 1. , 0.5])",
                      "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "mocap_high": "array([0.5, 1. , 0.5])",
                      "curr_path_length": 0,
                      "seeded_rand_vec": true,
                      "_freeze_rand_vec": true,
                      "_last_rand_vec": "array([-0.03591261,  0.89999998,  0.        ])",
                      "discrete_goal_space": "None",
                      "discrete_goals": [],
                      "active_discrete_goal": "None",
                      "init_left_pad": "array([0.00455658, 0.64733405, 0.19452415])",
                      "init_right_pad": "array([0.00774813, 0.55304544, 0.1940782 ])",
                      "action_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.])",
                        "high": "array([1., 1., 1., 1.])",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "isV2": true,
                      "_obs_obj_max_len": 14,
                      "_obs_obj_possible_lens": [
                        6,
                        14
                      ],
                      "_set_task_called": true,
                      "_partially_observable": false,
                      "hand_init_pos": "array([0. , 0.6, 0.2], dtype=float32)",
                      "_target_pos": "array([-0.03591261,  0.73999998,  0.09      ])",
                      "_random_reset_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.1,  0.9,  0. ], dtype=float32)",
                        "high": "array([0.1, 0.9, 0. ], dtype=float32)",
                        "low_repr": "[-0.1  0.9  0. ]",
                        "high_repr": "[0.1 0.9 0. ]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "_last_stable_obs": "None",
                      "_prev_obs": "array([ 0.00615235,  0.60018983,  0.19430118,  1.        , -0.03591261,\n        0.57999998,  0.14      ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                      "init_config": {
                        "obj_init_angle": "array([0.3], dtype=float32)",
                        "obj_init_pos": "array([0. , 0.9, 0. ], dtype=float32)",
                        "hand_init_pos": "array([0. , 0.6, 0.2], dtype=float32)"
                      },
                      "obj_init_pos": "array([-0.03591261,  0.57999998,  0.14      ])",
                      "obj_init_angle": "array([0.3], dtype=float32)",
                      "goal_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                        "high": "array([0.5, 1. , 0.5], dtype=float32)",
                        "low_repr": "[-0.5   0.4   0.05]",
                        "high_repr": "[0.5 1.  0.5]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "maxDist": 0.15,
                      "target_reward": 2150.0,
                      "init_tcp": "array([0.00600364, 0.6004762 , 0.14935033])",
                      "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_close_v2.SawyerDrawerCloseEnvV2"
                    },
                    "_max_episode_length": 500,
                    "_render_modes": [
                      "human"
                    ],
                    "_step_cnt": "None",
                    "_visualize": false,
                    "_action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_observation_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_spec": {
                      "max_episode_length": 500,
                      "input_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "output_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "_shape": [
                          39
                        ],
                        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                        "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                        "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "$type": "garage._environment.EnvSpec"
                    },
                    "_env_info": "None",
                    "$type": "garage.envs.gym_env.GymEnv"
                  },
                  "_task_name": "drawer-close-v2",
                  "_task_id": "None",
                  "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
                },
                "_task_index": 5,
                "_n_total_tasks": 10,
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 500,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "_shape": [
                      49
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
              },
              "_scale_reward": 1.0,
              "_normalize_obs": false,
              "_normalize_reward": true,
              "_expected_action_scale": 1.0,
              "_flatten_obs": true,
              "_obs_alpha": 0.001,
              "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
              "_reward_alpha": 0.001,
              "_reward_mean": 0.0,
              "_reward_var": 1.0,
              "$type": "garage.envs.normalized_env.NormalizedEnv"
            },
            {
              "_env": {
                "_env": {
                  "_env": {
                    "_env": {
                      "frame_skip": 5,
                      "model": "<mujoco_py.cymj.PyMjModel object at 0x555695ca5120>",
                      "sim": "<mujoco_py.cymj.MjSim object at 0x7f173a6afbc0>",
                      "data": "<mujoco_py.cymj.PyMjData object at 0x55569537c430>",
                      "viewer": "None",
                      "_viewers": {},
                      "metadata": {
                        "render.modes": [
                          "human"
                        ],
                        "video.frames_per_second": 80
                      },
                      "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "_did_see_sim_exception": false,
                      "_np_random": "Generator(PCG64) at 0x7F173AC239E0",
                      "action_scale": 0.01,
                      "action_rot_scale": 1.0,
                      "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "hand_high": "array([0.5, 1. , 0.5])",
                      "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "mocap_high": "array([0.5, 1. , 0.5])",
                      "curr_path_length": 0,
                      "seeded_rand_vec": true,
                      "_freeze_rand_vec": true,
                      "_last_rand_vec": "array([-0.03591261,  0.89999998,  0.        ])",
                      "discrete_goal_space": "None",
                      "discrete_goals": [],
                      "active_discrete_goal": "None",
                      "init_left_pad": "array([0.00455658, 0.64733405, 0.19452415])",
                      "init_right_pad": "array([0.00774813, 0.55304544, 0.1940782 ])",
                      "action_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.])",
                        "high": "array([1., 1., 1., 1.])",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "isV2": true,
                      "_obs_obj_max_len": 14,
                      "_obs_obj_possible_lens": [
                        6,
                        14
                      ],
                      "_set_task_called": true,
                      "_partially_observable": false,
                      "hand_init_pos": "array([0. , 0.6, 0.2], dtype=float32)",
                      "_target_pos": "array([-0.03591261,  0.73999998,  0.09      ])",
                      "_random_reset_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.1,  0.9,  0. ], dtype=float32)",
                        "high": "array([0.1, 0.9, 0. ], dtype=float32)",
                        "low_repr": "[-0.1  0.9  0. ]",
                        "high_repr": "[0.1 0.9 0. ]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "_last_stable_obs": "None",
                      "_prev_obs": "array([ 0.00615235,  0.60018983,  0.19430118,  1.        , -0.03591261,\n        0.57999998,  0.14      ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                      "init_config": {
                        "obj_init_angle": "array([0.3], dtype=float32)",
                        "obj_init_pos": "array([0. , 0.9, 0. ], dtype=float32)",
                        "hand_init_pos": "array([0. , 0.6, 0.2], dtype=float32)"
                      },
                      "obj_init_pos": "array([-0.03591261,  0.57999998,  0.14      ])",
                      "obj_init_angle": "array([0.3], dtype=float32)",
                      "goal_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                        "high": "array([0.5, 1. , 0.5], dtype=float32)",
                        "low_repr": "[-0.5   0.4   0.05]",
                        "high_repr": "[0.5 1.  0.5]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "maxDist": 0.15,
                      "target_reward": 2150.0,
                      "init_tcp": "array([0.00600364, 0.6004762 , 0.14935033])",
                      "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_close_v2.SawyerDrawerCloseEnvV2"
                    },
                    "_max_episode_length": 500,
                    "_render_modes": [
                      "human"
                    ],
                    "_step_cnt": "None",
                    "_visualize": false,
                    "_action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_observation_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_spec": {
                      "max_episode_length": 500,
                      "input_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "output_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "_shape": [
                          39
                        ],
                        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                        "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                        "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "$type": "garage._environment.EnvSpec"
                    },
                    "_env_info": "None",
                    "$type": "garage.envs.gym_env.GymEnv"
                  },
                  "_task_name": "drawer-close-v2",
                  "_task_id": "None",
                  "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
                },
                "_task_index": 5,
                "_n_total_tasks": 10,
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 500,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "_shape": [
                      49
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
              },
              "_scale_reward": 1.0,
              "_normalize_obs": false,
              "_normalize_reward": true,
              "_expected_action_scale": 1.0,
              "_flatten_obs": true,
              "_obs_alpha": 0.001,
              "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
              "_reward_alpha": 0.001,
              "_reward_mean": 0.0,
              "_reward_var": 1.0,
              "$type": "garage.envs.normalized_env.NormalizedEnv"
            }
          ],
          "_agents": [
            "None",
            "None"
          ],
          "_episode_lengths": [
            0,
            0
          ],
          "_complete_fragments": [],
          "_fragments": "None",
          "$type": "garage.sampler.fragment_worker.FragmentWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 6,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  },
                  "max_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_shared_mean_log_std_network": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 49.0,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "2": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                  }
                },
                "_input_dim": 49.0,
                "_hidden_sizes": [
                  400,
                  400,
                  400
                ],
                "_action_dim": 4.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 2.061153622438558e-09,
                "_max_std": 7.38905609893065,
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": {
                  "$typename": "torch.nn.modules.activation.ReLU"
                },
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": {
                  "$type": "torch.Tensor"
                },
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "TanhGaussianPolicy",
            "_obs_dim": 49.0,
            "_action_dim": 4.0,
            "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
          },
          "env": "None",
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "_n_envs": 2,
          "_timesteps_per_call": 1,
          "_needs_env_reset": true,
          "_envs": [
            {
              "_env": {
                "_env": {
                  "_env": {
                    "_env": {
                      "frame_skip": 5,
                      "model": "<mujoco_py.cymj.PyMjModel object at 0x5556959448d0>",
                      "sim": "<mujoco_py.cymj.MjSim object at 0x7f173a5463c0>",
                      "data": "<mujoco_py.cymj.PyMjData object at 0x55569a2a3670>",
                      "viewer": "None",
                      "_viewers": {},
                      "metadata": {
                        "render.modes": [
                          "human"
                        ],
                        "video.frames_per_second": 80
                      },
                      "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "_did_see_sim_exception": false,
                      "_np_random": "Generator(PCG64) at 0x7F173AC23BA0",
                      "action_scale": 0.01,
                      "action_rot_scale": 1.0,
                      "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "hand_high": "array([0.5, 1. , 0.5])",
                      "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "mocap_high": "array([0.5, 1. , 0.5])",
                      "curr_path_length": 0,
                      "seeded_rand_vec": true,
                      "_freeze_rand_vec": true,
                      "_last_rand_vec": "array([0.09841687, 0.86121587, 0.115     ])",
                      "discrete_goal_space": "None",
                      "discrete_goals": [],
                      "active_discrete_goal": "None",
                      "init_left_pad": "array([0.00494545, 0.44686319, 0.19504709])",
                      "init_right_pad": "array([0.00687854, 0.35253942, 0.19492245])",
                      "action_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.])",
                        "high": "array([1., 1., 1., 1.])",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "isV2": true,
                      "_obs_obj_max_len": 14,
                      "_obs_obj_possible_lens": [
                        6,
                        14
                      ],
                      "_set_task_called": true,
                      "_partially_observable": false,
                      "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)",
                      "_target_pos": "array([0.        , 0.84992037, 0.21999997])",
                      "_random_reset_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.1  ,  0.8  ,  0.115], dtype=float32)",
                        "high": "array([0.1  , 0.9  , 0.115], dtype=float32)",
                        "low_repr": "[-0.1    0.8    0.115]",
                        "high_repr": "[0.1   0.9   0.115]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "_last_stable_obs": "None",
                      "_prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        ,  0.        ,\n        0.84999963,  0.31346152,  0.70738827, -0.70682518,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                      "init_config": {
                        "obj_init_pos": "array([0.   , 0.8  , 0.115], dtype=float32)",
                        "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)"
                      },
                      "goal": "array([0.  , 0.88, 0.1 ])",
                      "obj_init_pos": "array([0.09841687, 0.86121587, 0.115     ])",
                      "goal_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                        "high": "array([0.5, 1. , 0.5], dtype=float32)",
                        "low_repr": "[-0.5   0.4   0.05]",
                        "high_repr": "[0.5 1.  0.5]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "init_tcp": "array([0.00588028, 0.39976012, 0.14998482])",
                      "_obj_to_target_init": 0.09349997035412655,
                      "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_button_press_topdown_v2.SawyerButtonPressTopdownEnvV2"
                    },
                    "_max_episode_length": 500,
                    "_render_modes": [
                      "human"
                    ],
                    "_step_cnt": "None",
                    "_visualize": false,
                    "_action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_observation_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_spec": {
                      "max_episode_length": 500,
                      "input_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "output_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "_shape": [
                          39
                        ],
                        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                        "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                        "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "$type": "garage._environment.EnvSpec"
                    },
                    "_env_info": "None",
                    "$type": "garage.envs.gym_env.GymEnv"
                  },
                  "_task_name": "button-press-topdown-v2",
                  "_task_id": "None",
                  "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
                },
                "_task_index": 6,
                "_n_total_tasks": 10,
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 500,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "_shape": [
                      49
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
              },
              "_scale_reward": 1.0,
              "_normalize_obs": false,
              "_normalize_reward": true,
              "_expected_action_scale": 1.0,
              "_flatten_obs": true,
              "_obs_alpha": 0.001,
              "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
              "_reward_alpha": 0.001,
              "_reward_mean": 0.0,
              "_reward_var": 1.0,
              "$type": "garage.envs.normalized_env.NormalizedEnv"
            },
            {
              "_env": {
                "_env": {
                  "_env": {
                    "_env": {
                      "frame_skip": 5,
                      "model": "<mujoco_py.cymj.PyMjModel object at 0x5556953779d0>",
                      "sim": "<mujoco_py.cymj.MjSim object at 0x7f173a453bc0>",
                      "data": "<mujoco_py.cymj.PyMjData object at 0x55569546c120>",
                      "viewer": "None",
                      "_viewers": {},
                      "metadata": {
                        "render.modes": [
                          "human"
                        ],
                        "video.frames_per_second": 80
                      },
                      "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "_did_see_sim_exception": false,
                      "_np_random": "Generator(PCG64) at 0x7F173AC23D60",
                      "action_scale": 0.01,
                      "action_rot_scale": 1.0,
                      "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "hand_high": "array([0.5, 1. , 0.5])",
                      "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "mocap_high": "array([0.5, 1. , 0.5])",
                      "curr_path_length": 0,
                      "seeded_rand_vec": true,
                      "_freeze_rand_vec": true,
                      "_last_rand_vec": "array([0.09841687, 0.86121587, 0.115     ])",
                      "discrete_goal_space": "None",
                      "discrete_goals": [],
                      "active_discrete_goal": "None",
                      "init_left_pad": "array([0.00494545, 0.44686319, 0.19504709])",
                      "init_right_pad": "array([0.00687854, 0.35253942, 0.19492245])",
                      "action_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.])",
                        "high": "array([1., 1., 1., 1.])",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "isV2": true,
                      "_obs_obj_max_len": 14,
                      "_obs_obj_possible_lens": [
                        6,
                        14
                      ],
                      "_set_task_called": true,
                      "_partially_observable": false,
                      "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)",
                      "_target_pos": "array([0.        , 0.84992037, 0.21999997])",
                      "_random_reset_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.1  ,  0.8  ,  0.115], dtype=float32)",
                        "high": "array([0.1  , 0.9  , 0.115], dtype=float32)",
                        "low_repr": "[-0.1    0.8    0.115]",
                        "high_repr": "[0.1   0.9   0.115]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "_last_stable_obs": "None",
                      "_prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        ,  0.        ,\n        0.84999963,  0.31346152,  0.70738827, -0.70682518,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                      "init_config": {
                        "obj_init_pos": "array([0.   , 0.8  , 0.115], dtype=float32)",
                        "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)"
                      },
                      "goal": "array([0.  , 0.88, 0.1 ])",
                      "obj_init_pos": "array([0.09841687, 0.86121587, 0.115     ])",
                      "goal_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                        "high": "array([0.5, 1. , 0.5], dtype=float32)",
                        "low_repr": "[-0.5   0.4   0.05]",
                        "high_repr": "[0.5 1.  0.5]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "init_tcp": "array([0.00588028, 0.39976012, 0.14998482])",
                      "_obj_to_target_init": 0.09349997035412655,
                      "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_button_press_topdown_v2.SawyerButtonPressTopdownEnvV2"
                    },
                    "_max_episode_length": 500,
                    "_render_modes": [
                      "human"
                    ],
                    "_step_cnt": "None",
                    "_visualize": false,
                    "_action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_observation_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_spec": {
                      "max_episode_length": 500,
                      "input_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "output_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "_shape": [
                          39
                        ],
                        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                        "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                        "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "$type": "garage._environment.EnvSpec"
                    },
                    "_env_info": "None",
                    "$type": "garage.envs.gym_env.GymEnv"
                  },
                  "_task_name": "button-press-topdown-v2",
                  "_task_id": "None",
                  "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
                },
                "_task_index": 6,
                "_n_total_tasks": 10,
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 500,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "_shape": [
                      49
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
              },
              "_scale_reward": 1.0,
              "_normalize_obs": false,
              "_normalize_reward": true,
              "_expected_action_scale": 1.0,
              "_flatten_obs": true,
              "_obs_alpha": 0.001,
              "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
              "_reward_alpha": 0.001,
              "_reward_mean": 0.0,
              "_reward_var": 1.0,
              "$type": "garage.envs.normalized_env.NormalizedEnv"
            }
          ],
          "_agents": [
            "None",
            "None"
          ],
          "_episode_lengths": [
            0,
            0
          ],
          "_complete_fragments": [],
          "_fragments": "None",
          "$type": "garage.sampler.fragment_worker.FragmentWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 7,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  },
                  "max_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_shared_mean_log_std_network": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 49.0,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "2": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                  }
                },
                "_input_dim": 49.0,
                "_hidden_sizes": [
                  400,
                  400,
                  400
                ],
                "_action_dim": 4.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 2.061153622438558e-09,
                "_max_std": 7.38905609893065,
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": {
                  "$typename": "torch.nn.modules.activation.ReLU"
                },
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": {
                  "$type": "torch.Tensor"
                },
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "TanhGaussianPolicy",
            "_obs_dim": 49.0,
            "_action_dim": 4.0,
            "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
          },
          "env": "None",
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "_n_envs": 2,
          "_timesteps_per_call": 1,
          "_needs_env_reset": true,
          "_envs": [
            {
              "_env": {
                "_env": {
                  "_env": {
                    "_env": {
                      "frame_skip": 5,
                      "model": "<mujoco_py.cymj.PyMjModel object at 0x55569537fc30>",
                      "sim": "<mujoco_py.cymj.MjSim object at 0x7f173a369340>",
                      "data": "<mujoco_py.cymj.PyMjData object at 0x5556953abee0>",
                      "viewer": "None",
                      "_viewers": {},
                      "metadata": {
                        "render.modes": [
                          "human"
                        ],
                        "video.frames_per_second": 80
                      },
                      "init_qpos": "array([0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 ,\n       0.03, 1.  , 0.  , 0.  , 0.  ])",
                      "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "_did_see_sim_exception": false,
                      "_np_random": "Generator(PCG64) at 0x7F173AC23F20",
                      "action_scale": 0.01,
                      "action_rot_scale": 1.0,
                      "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "hand_high": "array([0.5, 1. , 0.5])",
                      "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "mocap_high": "array([0.5, 1. , 0.5])",
                      "curr_path_length": 0,
                      "seeded_rand_vec": true,
                      "_freeze_rand_vec": true,
                      "_last_rand_vec": "array([ 6.62255991e-02,  6.35421029e-01,  1.99999996e-02, -2.64869171e-01,\n        4.59752731e-01,  6.10006397e-04])",
                      "discrete_goal_space": "None",
                      "discrete_goals": [],
                      "active_discrete_goal": "None",
                      "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
                      "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
                      "action_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.])",
                        "high": "array([1., 1., 1., 1.])",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "isV2": true,
                      "_obs_obj_max_len": 14,
                      "_obs_obj_possible_lens": [
                        6,
                        14
                      ],
                      "_set_task_called": true,
                      "_partially_observable": false,
                      "hand_init_pos": "array([0. , 0.6, 0.2])",
                      "_target_pos": "array([-0.23486917,  0.45975273,  0.13061001])",
                      "_random_reset_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                        "_shape": [
                          6
                        ],
                        "low": "array([ 0.   ,  0.5  ,  0.02 , -0.35 ,  0.4  , -0.001], dtype=float32)",
                        "high": "array([ 0.2  ,  0.7  ,  0.02 , -0.25 ,  0.7  ,  0.001], dtype=float32)",
                        "low_repr": "[ 0.     0.5    0.02  -0.35   0.4   -0.001]",
                        "high_repr": "[ 0.2    0.7    0.02  -0.25   0.7    0.001]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "_last_stable_obs": "None",
                      "_prev_obs": "array([0.00615235, 0.6001898 , 0.19430117, 1.        , 0.0962256 ,\n       0.63542103, 0.03      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
                      "init_config": {
                        "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                        "hand_init_pos": "array([0. , 0.6, 0.2])"
                      },
                      "goal": "array([-0.3,  0.6,  0. ])",
                      "obj_init_pos": "array([0.0662256 , 0.63542103, 0.02      ])",
                      "goal_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.32 ,  0.4  ,  0.129], dtype=float32)",
                        "high": "array([-0.22 ,  0.7  ,  0.131], dtype=float32)",
                        "low_repr": "[-0.32   0.4    0.129]",
                        "high_repr": "[-0.22   0.7    0.131]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
                      "peg_head_pos_init": "array([-0.1       ,  0.6       ,  0.01478467])",
                      "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_peg_insertion_side_v2.SawyerPegInsertionSideEnvV2"
                    },
                    "_max_episode_length": 500,
                    "_render_modes": [
                      "human"
                    ],
                    "_step_cnt": "None",
                    "_visualize": false,
                    "_action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_observation_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.32  ,  0.4   ,  0.129 ], dtype=float32)",
                      "high": "array([ 0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,  0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf, -0.22 ,  0.7  ,  0.131],\n      dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.32    0.4     0.129 ]",
                      "high_repr": "[ 0.525  1.025  0.7    1.       inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf    inf    inf  0.525  1.025\n  0.7    1.       inf    inf    inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf -0.22   0.7    0.131]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_spec": {
                      "max_episode_length": 500,
                      "input_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "output_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "_shape": [
                          39
                        ],
                        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.32  ,  0.4   ,  0.129 ], dtype=float32)",
                        "high": "array([ 0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,  0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf, -0.22 ,  0.7  ,  0.131],\n      dtype=float32)",
                        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.32    0.4     0.129 ]",
                        "high_repr": "[ 0.525  1.025  0.7    1.       inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf    inf    inf  0.525  1.025\n  0.7    1.       inf    inf    inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf -0.22   0.7    0.131]",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "$type": "garage._environment.EnvSpec"
                    },
                    "_env_info": "None",
                    "$type": "garage.envs.gym_env.GymEnv"
                  },
                  "_task_name": "peg-insert-side-v2",
                  "_task_id": "None",
                  "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
                },
                "_task_index": 7,
                "_n_total_tasks": 10,
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.32  ,  0.4   ,  0.129 ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([ 0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,  0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf, -0.22 ,  0.7  ,  0.131,  1.   ,\n        1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,\n        1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.32    0.4     0.129   0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[ 0.525  1.025  0.7    1.       inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf    inf    inf  0.525  1.025\n  0.7    1.       inf    inf    inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf -0.22   0.7    0.131  1.\n  1.     1.     1.     1.     1.     1.     1.     1.     1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 500,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "_shape": [
                      49
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.32  ,  0.4   ,  0.129 ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                    "high": "array([ 0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,  0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf, -0.22 ,  0.7  ,  0.131,  1.   ,\n        1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,\n        1.   ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.32    0.4     0.129   0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                    "high_repr": "[ 0.525  1.025  0.7    1.       inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf    inf    inf  0.525  1.025\n  0.7    1.       inf    inf    inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf -0.22   0.7    0.131  1.\n  1.     1.     1.     1.     1.     1.     1.     1.     1.   ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
              },
              "_scale_reward": 1.0,
              "_normalize_obs": false,
              "_normalize_reward": true,
              "_expected_action_scale": 1.0,
              "_flatten_obs": true,
              "_obs_alpha": 0.001,
              "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
              "_reward_alpha": 0.001,
              "_reward_mean": 0.0,
              "_reward_var": 1.0,
              "$type": "garage.envs.normalized_env.NormalizedEnv"
            },
            {
              "_env": {
                "_env": {
                  "_env": {
                    "_env": {
                      "frame_skip": 5,
                      "model": "<mujoco_py.cymj.PyMjModel object at 0x5556953acf10>",
                      "sim": "<mujoco_py.cymj.MjSim object at 0x7f173a1fca40>",
                      "data": "<mujoco_py.cymj.PyMjData object at 0x55569d42ace0>",
                      "viewer": "None",
                      "_viewers": {},
                      "metadata": {
                        "render.modes": [
                          "human"
                        ],
                        "video.frames_per_second": 80
                      },
                      "init_qpos": "array([0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 ,\n       0.03, 1.  , 0.  , 0.  , 0.  ])",
                      "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "_did_see_sim_exception": false,
                      "_np_random": "Generator(PCG64) at 0x7F173A248120",
                      "action_scale": 0.01,
                      "action_rot_scale": 1.0,
                      "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "hand_high": "array([0.5, 1. , 0.5])",
                      "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "mocap_high": "array([0.5, 1. , 0.5])",
                      "curr_path_length": 0,
                      "seeded_rand_vec": true,
                      "_freeze_rand_vec": true,
                      "_last_rand_vec": "array([ 6.62255991e-02,  6.35421029e-01,  1.99999996e-02, -2.64869171e-01,\n        4.59752731e-01,  6.10006397e-04])",
                      "discrete_goal_space": "None",
                      "discrete_goals": [],
                      "active_discrete_goal": "None",
                      "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
                      "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
                      "action_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.])",
                        "high": "array([1., 1., 1., 1.])",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "isV2": true,
                      "_obs_obj_max_len": 14,
                      "_obs_obj_possible_lens": [
                        6,
                        14
                      ],
                      "_set_task_called": true,
                      "_partially_observable": false,
                      "hand_init_pos": "array([0. , 0.6, 0.2])",
                      "_target_pos": "array([-0.23486917,  0.45975273,  0.13061001])",
                      "_random_reset_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                        "_shape": [
                          6
                        ],
                        "low": "array([ 0.   ,  0.5  ,  0.02 , -0.35 ,  0.4  , -0.001], dtype=float32)",
                        "high": "array([ 0.2  ,  0.7  ,  0.02 , -0.25 ,  0.7  ,  0.001], dtype=float32)",
                        "low_repr": "[ 0.     0.5    0.02  -0.35   0.4   -0.001]",
                        "high_repr": "[ 0.2    0.7    0.02  -0.25   0.7    0.001]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "_last_stable_obs": "None",
                      "_prev_obs": "array([0.00615235, 0.6001898 , 0.19430117, 1.        , 0.0962256 ,\n       0.63542103, 0.03      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
                      "init_config": {
                        "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                        "hand_init_pos": "array([0. , 0.6, 0.2])"
                      },
                      "goal": "array([-0.3,  0.6,  0. ])",
                      "obj_init_pos": "array([0.0662256 , 0.63542103, 0.02      ])",
                      "goal_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.32 ,  0.4  ,  0.129], dtype=float32)",
                        "high": "array([-0.22 ,  0.7  ,  0.131], dtype=float32)",
                        "low_repr": "[-0.32   0.4    0.129]",
                        "high_repr": "[-0.22   0.7    0.131]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
                      "peg_head_pos_init": "array([-0.1       ,  0.6       ,  0.01478467])",
                      "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_peg_insertion_side_v2.SawyerPegInsertionSideEnvV2"
                    },
                    "_max_episode_length": 500,
                    "_render_modes": [
                      "human"
                    ],
                    "_step_cnt": "None",
                    "_visualize": false,
                    "_action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_observation_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.32  ,  0.4   ,  0.129 ], dtype=float32)",
                      "high": "array([ 0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,  0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf, -0.22 ,  0.7  ,  0.131],\n      dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.32    0.4     0.129 ]",
                      "high_repr": "[ 0.525  1.025  0.7    1.       inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf    inf    inf  0.525  1.025\n  0.7    1.       inf    inf    inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf -0.22   0.7    0.131]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_spec": {
                      "max_episode_length": 500,
                      "input_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "output_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "_shape": [
                          39
                        ],
                        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.32  ,  0.4   ,  0.129 ], dtype=float32)",
                        "high": "array([ 0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,  0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf, -0.22 ,  0.7  ,  0.131],\n      dtype=float32)",
                        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.32    0.4     0.129 ]",
                        "high_repr": "[ 0.525  1.025  0.7    1.       inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf    inf    inf  0.525  1.025\n  0.7    1.       inf    inf    inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf -0.22   0.7    0.131]",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "$type": "garage._environment.EnvSpec"
                    },
                    "_env_info": "None",
                    "$type": "garage.envs.gym_env.GymEnv"
                  },
                  "_task_name": "peg-insert-side-v2",
                  "_task_id": "None",
                  "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
                },
                "_task_index": 7,
                "_n_total_tasks": 10,
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.32  ,  0.4   ,  0.129 ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([ 0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,  0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf, -0.22 ,  0.7  ,  0.131,  1.   ,\n        1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,\n        1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.32    0.4     0.129   0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[ 0.525  1.025  0.7    1.       inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf    inf    inf  0.525  1.025\n  0.7    1.       inf    inf    inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf -0.22   0.7    0.131  1.\n  1.     1.     1.     1.     1.     1.     1.     1.     1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 500,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "_shape": [
                      49
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.32  ,  0.4   ,  0.129 ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                    "high": "array([ 0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,  0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf, -0.22 ,  0.7  ,  0.131,  1.   ,\n        1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,\n        1.   ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.32    0.4     0.129   0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                    "high_repr": "[ 0.525  1.025  0.7    1.       inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf    inf    inf  0.525  1.025\n  0.7    1.       inf    inf    inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf -0.22   0.7    0.131  1.\n  1.     1.     1.     1.     1.     1.     1.     1.     1.   ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
              },
              "_scale_reward": 1.0,
              "_normalize_obs": false,
              "_normalize_reward": true,
              "_expected_action_scale": 1.0,
              "_flatten_obs": true,
              "_obs_alpha": 0.001,
              "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
              "_reward_alpha": 0.001,
              "_reward_mean": 0.0,
              "_reward_var": 1.0,
              "$type": "garage.envs.normalized_env.NormalizedEnv"
            }
          ],
          "_agents": [
            "None",
            "None"
          ],
          "_episode_lengths": [
            0,
            0
          ],
          "_complete_fragments": [],
          "_fragments": "None",
          "$type": "garage.sampler.fragment_worker.FragmentWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 8,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  },
                  "max_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_shared_mean_log_std_network": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 49.0,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "2": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                  }
                },
                "_input_dim": 49.0,
                "_hidden_sizes": [
                  400,
                  400,
                  400
                ],
                "_action_dim": 4.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 2.061153622438558e-09,
                "_max_std": 7.38905609893065,
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": {
                  "$typename": "torch.nn.modules.activation.ReLU"
                },
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": {
                  "$type": "torch.Tensor"
                },
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "TanhGaussianPolicy",
            "_obs_dim": 49.0,
            "_action_dim": 4.0,
            "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
          },
          "env": "None",
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "_n_envs": 2,
          "_timesteps_per_call": 1,
          "_needs_env_reset": true,
          "_envs": [
            {
              "_env": {
                "_env": {
                  "_env": {
                    "_env": {
                      "frame_skip": 5,
                      "model": "<mujoco_py.cymj.PyMjModel object at 0x55569540de20>",
                      "sim": "<mujoco_py.cymj.MjSim object at 0x7f173a112240>",
                      "data": "<mujoco_py.cymj.PyMjData object at 0x55569a62f220>",
                      "viewer": "None",
                      "_viewers": {},
                      "metadata": {
                        "render.modes": [
                          "human"
                        ],
                        "video.frames_per_second": 80
                      },
                      "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "_did_see_sim_exception": false,
                      "_np_random": "Generator(PCG64) at 0x7F173A2482E0",
                      "action_scale": 0.01,
                      "action_rot_scale": 1.0,
                      "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "hand_high": "array([0.5, 1. , 0.5])",
                      "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "mocap_high": "array([0.5, 1. , 0.5])",
                      "curr_path_length": 0,
                      "seeded_rand_vec": true,
                      "_freeze_rand_vec": true,
                      "_last_rand_vec": "array([-0.01160344,  0.84441865,  0.16      ])",
                      "discrete_goal_space": "None",
                      "discrete_goals": [],
                      "active_discrete_goal": "None",
                      "init_left_pad": "array([0.00494545, 0.44686319, 0.19504709])",
                      "init_right_pad": "array([0.00687854, 0.35253942, 0.19492245])",
                      "action_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.])",
                        "high": "array([1., 1., 1., 1.])",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "isV2": true,
                      "_obs_obj_max_len": 14,
                      "_obs_obj_possible_lens": [
                        6,
                        14
                      ],
                      "_set_task_called": true,
                      "_partially_observable": false,
                      "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)",
                      "_target_pos": "array([0.18839656, 0.84441865, 0.16      ])",
                      "_random_reset_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.1 ,  0.7 ,  0.16], dtype=float32)",
                        "high": "array([0.1 , 0.9 , 0.16], dtype=float32)",
                        "low_repr": "[-0.1   0.7   0.16]",
                        "high_repr": "[0.1  0.9  0.16]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "_last_stable_obs": "None",
                      "_prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        , -0.14      ,\n        0.69      ,  0.202     ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                      "init_config": {
                        "obj_init_angle": "array([0.3], dtype=float32)",
                        "obj_init_pos": "array([-0.1  ,  0.785,  0.16 ], dtype=float32)",
                        "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)"
                      },
                      "obj_init_pos": "array([-0.01160344,  0.84441865,  0.16      ])",
                      "obj_init_angle": "array([0.3], dtype=float32)",
                      "goal_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                        "high": "array([0.5, 1. , 0.5], dtype=float32)",
                        "low_repr": "[-0.5   0.4   0.05]",
                        "high_repr": "[0.5 1.  0.5]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "maxPullDist": 0.2,
                      "target_reward": 2200.0,
                      "init_tcp": "array([0.00588028, 0.39976012, 0.14998482])",
                      "prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        , -0.14      ,\n        0.69      ,  0.202     ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                      "window_handle_pos_init": "array([-0.14 ,  0.69 ,  0.202])",
                      "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_open_v2.SawyerWindowOpenEnvV2"
                    },
                    "_max_episode_length": 500,
                    "_render_modes": [
                      "human"
                    ],
                    "_step_cnt": "None",
                    "_visualize": false,
                    "_action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_observation_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_spec": {
                      "max_episode_length": 500,
                      "input_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "output_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "_shape": [
                          39
                        ],
                        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                        "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                        "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "$type": "garage._environment.EnvSpec"
                    },
                    "_env_info": "None",
                    "$type": "garage.envs.gym_env.GymEnv"
                  },
                  "_task_name": "window-open-v2",
                  "_task_id": "None",
                  "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
                },
                "_task_index": 8,
                "_n_total_tasks": 10,
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 500,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "_shape": [
                      49
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
              },
              "_scale_reward": 1.0,
              "_normalize_obs": false,
              "_normalize_reward": true,
              "_expected_action_scale": 1.0,
              "_flatten_obs": true,
              "_obs_alpha": 0.001,
              "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
              "_reward_alpha": 0.001,
              "_reward_mean": 0.0,
              "_reward_var": 1.0,
              "$type": "garage.envs.normalized_env.NormalizedEnv"
            },
            {
              "_env": {
                "_env": {
                  "_env": {
                    "_env": {
                      "frame_skip": 5,
                      "model": "<mujoco_py.cymj.PyMjModel object at 0x55569554e0f0>",
                      "sim": "<mujoco_py.cymj.MjSim object at 0x7f173a01e9c0>",
                      "data": "<mujoco_py.cymj.PyMjData object at 0x5556953b5990>",
                      "viewer": "None",
                      "_viewers": {},
                      "metadata": {
                        "render.modes": [
                          "human"
                        ],
                        "video.frames_per_second": 80
                      },
                      "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "_did_see_sim_exception": false,
                      "_np_random": "Generator(PCG64) at 0x7F173A2484A0",
                      "action_scale": 0.01,
                      "action_rot_scale": 1.0,
                      "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "hand_high": "array([0.5, 1. , 0.5])",
                      "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "mocap_high": "array([0.5, 1. , 0.5])",
                      "curr_path_length": 0,
                      "seeded_rand_vec": true,
                      "_freeze_rand_vec": true,
                      "_last_rand_vec": "array([-0.01160344,  0.84441865,  0.16      ])",
                      "discrete_goal_space": "None",
                      "discrete_goals": [],
                      "active_discrete_goal": "None",
                      "init_left_pad": "array([0.00494545, 0.44686319, 0.19504709])",
                      "init_right_pad": "array([0.00687854, 0.35253942, 0.19492245])",
                      "action_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.])",
                        "high": "array([1., 1., 1., 1.])",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "isV2": true,
                      "_obs_obj_max_len": 14,
                      "_obs_obj_possible_lens": [
                        6,
                        14
                      ],
                      "_set_task_called": true,
                      "_partially_observable": false,
                      "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)",
                      "_target_pos": "array([0.18839656, 0.84441865, 0.16      ])",
                      "_random_reset_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.1 ,  0.7 ,  0.16], dtype=float32)",
                        "high": "array([0.1 , 0.9 , 0.16], dtype=float32)",
                        "low_repr": "[-0.1   0.7   0.16]",
                        "high_repr": "[0.1  0.9  0.16]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "_last_stable_obs": "None",
                      "_prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        , -0.14      ,\n        0.69      ,  0.202     ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                      "init_config": {
                        "obj_init_angle": "array([0.3], dtype=float32)",
                        "obj_init_pos": "array([-0.1  ,  0.785,  0.16 ], dtype=float32)",
                        "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)"
                      },
                      "obj_init_pos": "array([-0.01160344,  0.84441865,  0.16      ])",
                      "obj_init_angle": "array([0.3], dtype=float32)",
                      "goal_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                        "high": "array([0.5, 1. , 0.5], dtype=float32)",
                        "low_repr": "[-0.5   0.4   0.05]",
                        "high_repr": "[0.5 1.  0.5]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "maxPullDist": 0.2,
                      "target_reward": 2200.0,
                      "init_tcp": "array([0.00588028, 0.39976012, 0.14998482])",
                      "prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        , -0.14      ,\n        0.69      ,  0.202     ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                      "window_handle_pos_init": "array([-0.14 ,  0.69 ,  0.202])",
                      "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_open_v2.SawyerWindowOpenEnvV2"
                    },
                    "_max_episode_length": 500,
                    "_render_modes": [
                      "human"
                    ],
                    "_step_cnt": "None",
                    "_visualize": false,
                    "_action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_observation_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_spec": {
                      "max_episode_length": 500,
                      "input_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "output_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "_shape": [
                          39
                        ],
                        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                        "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                        "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "$type": "garage._environment.EnvSpec"
                    },
                    "_env_info": "None",
                    "$type": "garage.envs.gym_env.GymEnv"
                  },
                  "_task_name": "window-open-v2",
                  "_task_id": "None",
                  "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
                },
                "_task_index": 8,
                "_n_total_tasks": 10,
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 500,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "_shape": [
                      49
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
              },
              "_scale_reward": 1.0,
              "_normalize_obs": false,
              "_normalize_reward": true,
              "_expected_action_scale": 1.0,
              "_flatten_obs": true,
              "_obs_alpha": 0.001,
              "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
              "_reward_alpha": 0.001,
              "_reward_mean": 0.0,
              "_reward_var": 1.0,
              "$type": "garage.envs.normalized_env.NormalizedEnv"
            }
          ],
          "_agents": [
            "None",
            "None"
          ],
          "_episode_lengths": [
            0,
            0
          ],
          "_complete_fragments": [],
          "_fragments": "None",
          "$type": "garage.sampler.fragment_worker.FragmentWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 9,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  },
                  "max_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_shared_mean_log_std_network": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 49.0,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "2": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 400,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {
                                  "module": {
                                    "training": true,
                                    "_parameters": {},
                                    "_buffers": {},
                                    "_non_persistent_buffers_set": [],
                                    "_backward_hooks": {},
                                    "_forward_hooks": {},
                                    "_forward_pre_hooks": {},
                                    "_state_dict_hooks": {},
                                    "_load_state_dict_pre_hooks": {},
                                    "_modules": {},
                                    "inplace": false,
                                    "$type": "torch.nn.modules.activation.ReLU"
                                  }
                                },
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 400,
                                "out_features": 4.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                  }
                },
                "_input_dim": 49.0,
                "_hidden_sizes": [
                  400,
                  400,
                  400
                ],
                "_action_dim": 4.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 2.061153622438558e-09,
                "_max_std": 7.38905609893065,
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": {
                  "$typename": "torch.nn.modules.activation.ReLU"
                },
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": {
                  "$type": "torch.Tensor"
                },
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 500,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True])",
                "_shape": [
                  4
                ],
                "low": "array([-1., -1., -1., -1.], dtype=float32)",
                "high": "array([1., 1., 1., 1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "TanhGaussianPolicy",
            "_obs_dim": 49.0,
            "_action_dim": 4.0,
            "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
          },
          "env": "None",
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "_n_envs": 2,
          "_timesteps_per_call": 1,
          "_needs_env_reset": true,
          "_envs": [
            {
              "_env": {
                "_env": {
                  "_env": {
                    "_env": {
                      "frame_skip": 5,
                      "model": "<mujoco_py.cymj.PyMjModel object at 0x5556959a6eb0>",
                      "sim": "<mujoco_py.cymj.MjSim object at 0x7f1739eb51c0>",
                      "data": "<mujoco_py.cymj.PyMjData object at 0x555695c8f3c0>",
                      "viewer": "None",
                      "_viewers": {},
                      "metadata": {
                        "render.modes": [
                          "human"
                        ],
                        "video.frames_per_second": 80
                      },
                      "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "_did_see_sim_exception": false,
                      "_np_random": "Generator(PCG64) at 0x7F173A248660",
                      "action_scale": 0.01,
                      "action_rot_scale": 1.0,
                      "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "hand_high": "array([0.5, 1. , 0.5])",
                      "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "mocap_high": "array([0.5, 1. , 0.5])",
                      "curr_path_length": 0,
                      "seeded_rand_vec": true,
                      "_freeze_rand_vec": true,
                      "_last_rand_vec": "array([0.       , 0.7773647, 0.2      ])",
                      "discrete_goal_space": "None",
                      "discrete_goals": [],
                      "active_discrete_goal": "None",
                      "init_left_pad": "array([0.00494545, 0.44686319, 0.19504709])",
                      "init_right_pad": "array([0.00687854, 0.35253942, 0.19492245])",
                      "action_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.])",
                        "high": "array([1., 1., 1., 1.])",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "isV2": true,
                      "_obs_obj_max_len": 14,
                      "_obs_obj_possible_lens": [
                        6,
                        14
                      ],
                      "_set_task_called": true,
                      "_partially_observable": false,
                      "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)",
                      "_target_pos": "array([0.       , 0.7773647, 0.2      ])",
                      "_random_reset_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([0.  , 0.75, 0.2 ], dtype=float32)",
                        "high": "array([0. , 0.9, 0.2], dtype=float32)",
                        "low_repr": "[0.   0.75 0.2 ]",
                        "high_repr": "[0.  0.9 0.2]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "_last_stable_obs": "None",
                      "_prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        , -0.09      ,\n        0.69      ,  0.202     ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                      "init_config": {
                        "obj_init_angle": 0.3,
                        "obj_init_pos": "array([0.1  , 0.785, 0.16 ], dtype=float32)",
                        "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)"
                      },
                      "obj_init_pos": "array([0.       , 0.7773647, 0.2      ])",
                      "obj_init_angle": 0.3,
                      "liftThresh": 0.02,
                      "goal_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                        "high": "array([0.5, 1. , 0.5], dtype=float32)",
                        "low_repr": "[-0.5   0.4   0.05]",
                        "high_repr": "[0.5 1.  0.5]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "maxPullDist": 0.2,
                      "target_reward": 2200.0,
                      "init_tcp": "array([0.00588028, 0.39976012, 0.14998482])",
                      "prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        , -0.09      ,\n        0.69      ,  0.202     ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                      "window_handle_pos_init": "array([0.11 , 0.69 , 0.202])",
                      "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_close_v2.SawyerWindowCloseEnvV2"
                    },
                    "_max_episode_length": 500,
                    "_render_modes": [
                      "human"
                    ],
                    "_step_cnt": "None",
                    "_visualize": false,
                    "_action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_observation_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_spec": {
                      "max_episode_length": 500,
                      "input_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "output_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "_shape": [
                          39
                        ],
                        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                        "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                        "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "$type": "garage._environment.EnvSpec"
                    },
                    "_env_info": "None",
                    "$type": "garage.envs.gym_env.GymEnv"
                  },
                  "_task_name": "window-close-v2",
                  "_task_id": "None",
                  "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
                },
                "_task_index": 9,
                "_n_total_tasks": 10,
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 500,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "_shape": [
                      49
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
              },
              "_scale_reward": 1.0,
              "_normalize_obs": false,
              "_normalize_reward": true,
              "_expected_action_scale": 1.0,
              "_flatten_obs": true,
              "_obs_alpha": 0.001,
              "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
              "_reward_alpha": 0.001,
              "_reward_mean": 0.0,
              "_reward_var": 1.0,
              "$type": "garage.envs.normalized_env.NormalizedEnv"
            },
            {
              "_env": {
                "_env": {
                  "_env": {
                    "_env": {
                      "frame_skip": 5,
                      "model": "<mujoco_py.cymj.PyMjModel object at 0x5556953b4fc0>",
                      "sim": "<mujoco_py.cymj.MjSim object at 0x7f1739dc0940>",
                      "data": "<mujoco_py.cymj.PyMjData object at 0x55569546c8f0>",
                      "viewer": "None",
                      "_viewers": {},
                      "metadata": {
                        "render.modes": [
                          "human"
                        ],
                        "video.frames_per_second": 80
                      },
                      "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                      "_did_see_sim_exception": false,
                      "_np_random": "Generator(PCG64) at 0x7F173A248820",
                      "action_scale": 0.01,
                      "action_rot_scale": 1.0,
                      "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "hand_high": "array([0.5, 1. , 0.5])",
                      "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                      "mocap_high": "array([0.5, 1. , 0.5])",
                      "curr_path_length": 0,
                      "seeded_rand_vec": true,
                      "_freeze_rand_vec": true,
                      "_last_rand_vec": "array([0.       , 0.7773647, 0.2      ])",
                      "discrete_goal_space": "None",
                      "discrete_goals": [],
                      "active_discrete_goal": "None",
                      "init_left_pad": "array([0.00494545, 0.44686319, 0.19504709])",
                      "init_right_pad": "array([0.00687854, 0.35253942, 0.19492245])",
                      "action_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.])",
                        "high": "array([1., 1., 1., 1.])",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "isV2": true,
                      "_obs_obj_max_len": 14,
                      "_obs_obj_possible_lens": [
                        6,
                        14
                      ],
                      "_set_task_called": true,
                      "_partially_observable": false,
                      "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)",
                      "_target_pos": "array([0.       , 0.7773647, 0.2      ])",
                      "_random_reset_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([0.  , 0.75, 0.2 ], dtype=float32)",
                        "high": "array([0. , 0.9, 0.2], dtype=float32)",
                        "low_repr": "[0.   0.75 0.2 ]",
                        "high_repr": "[0.  0.9 0.2]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "_last_stable_obs": "None",
                      "_prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        , -0.09      ,\n        0.69      ,  0.202     ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                      "init_config": {
                        "obj_init_angle": 0.3,
                        "obj_init_pos": "array([0.1  , 0.785, 0.16 ], dtype=float32)",
                        "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)"
                      },
                      "obj_init_pos": "array([0.       , 0.7773647, 0.2      ])",
                      "obj_init_angle": 0.3,
                      "liftThresh": 0.02,
                      "goal_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True])",
                        "_shape": [
                          3
                        ],
                        "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                        "high": "array([0.5, 1. , 0.5], dtype=float32)",
                        "low_repr": "[-0.5   0.4   0.05]",
                        "high_repr": "[0.5 1.  0.5]",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "maxPullDist": 0.2,
                      "target_reward": 2200.0,
                      "init_tcp": "array([0.00588028, 0.39976012, 0.14998482])",
                      "prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        , -0.09      ,\n        0.69      ,  0.202     ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                      "window_handle_pos_init": "array([0.11 , 0.69 , 0.202])",
                      "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_close_v2.SawyerWindowCloseEnvV2"
                    },
                    "_max_episode_length": 500,
                    "_render_modes": [
                      "human"
                    ],
                    "_step_cnt": "None",
                    "_visualize": false,
                    "_action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_observation_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "_spec": {
                      "max_episode_length": 500,
                      "input_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True])",
                        "_shape": [
                          4
                        ],
                        "low": "array([-1., -1., -1., -1.], dtype=float32)",
                        "high": "array([1., 1., 1., 1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "output_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                        "_shape": [
                          39
                        ],
                        "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                        "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                        "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                        "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                        "_np_random": "None",
                        "$type": "akro.box.Box"
                      },
                      "$type": "garage._environment.EnvSpec"
                    },
                    "_env_info": "None",
                    "$type": "garage.envs.gym_env.GymEnv"
                  },
                  "_task_name": "window-close-v2",
                  "_task_id": "None",
                  "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
                },
                "_task_index": 9,
                "_n_total_tasks": 10,
                "_observation_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "_spec": {
                  "max_episode_length": 500,
                  "input_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "output_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                    "_shape": [
                      49
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "$type": "garage._environment.EnvSpec"
                },
                "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
              },
              "_scale_reward": 1.0,
              "_normalize_obs": false,
              "_normalize_reward": true,
              "_expected_action_scale": 1.0,
              "_flatten_obs": true,
              "_obs_alpha": 0.001,
              "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
              "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
              "_reward_alpha": 0.001,
              "_reward_mean": 0.0,
              "_reward_var": 1.0,
              "$type": "garage.envs.normalized_env.NormalizedEnv"
            }
          ],
          "_agents": [
            "None",
            "None"
          ],
          "_episode_lengths": [
            0,
            0
          ],
          "_complete_fragments": [],
          "_fragments": "None",
          "$type": "garage.sampler.fragment_worker.FragmentWorker"
        }
      ],
      "total_env_steps": 0,
      "$type": "garage.sampler.local_sampler.LocalSampler"
    },
    "_target_qf1": {
      "_env_spec": {
        "max_episode_length": 500,
        "input_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True])",
          "_shape": [
            4
          ],
          "low": "array([-1., -1., -1., -1.], dtype=float32)",
          "high": "array([1., 1., 1., 1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "_shape": [
            49
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
          "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
          "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_obs_dim": 49.0,
      "_action_dim": 4.0,
      "training": true,
      "_parameters": {},
      "_buffers": {},
      "_non_persistent_buffers_set": [],
      "_backward_hooks": {},
      "_forward_hooks": {},
      "_forward_pre_hooks": {},
      "_state_dict_hooks": {},
      "_load_state_dict_pre_hooks": {},
      "_modules": {
        "_layers": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "0": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "linear": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 53.0,
                  "out_features": 400,
                  "$type": "torch.nn.modules.linear.Linear"
                },
                "non_linearity": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "module": {
                    "$type": "builtins.function"
                  },
                  "$type": "garage.torch._functions.NonLinearity"
                }
              },
              "$type": "torch.nn.modules.container.Sequential"
            },
            "1": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "linear": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 400,
                  "out_features": 400,
                  "$type": "torch.nn.modules.linear.Linear"
                },
                "non_linearity": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "module": {
                    "$type": "builtins.function"
                  },
                  "$type": "garage.torch._functions.NonLinearity"
                }
              },
              "$type": "torch.nn.modules.container.Sequential"
            },
            "2": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "linear": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 400,
                  "out_features": 400,
                  "$type": "torch.nn.modules.linear.Linear"
                },
                "non_linearity": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "module": {
                    "$type": "builtins.function"
                  },
                  "$type": "garage.torch._functions.NonLinearity"
                }
              },
              "$type": "torch.nn.modules.container.Sequential"
            }
          },
          "$type": "torch.nn.modules.container.ModuleList"
        },
        "_output_layers": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "0": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "linear": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 400,
                  "out_features": 1,
                  "$type": "torch.nn.modules.linear.Linear"
                }
              },
              "$type": "torch.nn.modules.container.Sequential"
            }
          },
          "$type": "torch.nn.modules.container.ModuleList"
        }
      },
      "_output_dim": 1,
      "$type": "garage.torch.q_functions.continuous_mlp_q_function.ContinuousMLPQFunction"
    },
    "_target_qf2": {
      "_env_spec": {
        "max_episode_length": 500,
        "input_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True])",
          "_shape": [
            4
          ],
          "low": "array([-1., -1., -1., -1.], dtype=float32)",
          "high": "array([1., 1., 1., 1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
          "_shape": [
            49
          ],
          "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
          "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
          "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
          "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_obs_dim": 49.0,
      "_action_dim": 4.0,
      "training": true,
      "_parameters": {},
      "_buffers": {},
      "_non_persistent_buffers_set": [],
      "_backward_hooks": {},
      "_forward_hooks": {},
      "_forward_pre_hooks": {},
      "_state_dict_hooks": {},
      "_load_state_dict_pre_hooks": {},
      "_modules": {
        "_layers": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "0": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "linear": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 53.0,
                  "out_features": 400,
                  "$type": "torch.nn.modules.linear.Linear"
                },
                "non_linearity": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "module": {
                    "$type": "builtins.function"
                  },
                  "$type": "garage.torch._functions.NonLinearity"
                }
              },
              "$type": "torch.nn.modules.container.Sequential"
            },
            "1": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "linear": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 400,
                  "out_features": 400,
                  "$type": "torch.nn.modules.linear.Linear"
                },
                "non_linearity": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "module": {
                    "$type": "builtins.function"
                  },
                  "$type": "garage.torch._functions.NonLinearity"
                }
              },
              "$type": "torch.nn.modules.container.Sequential"
            },
            "2": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "linear": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 400,
                  "out_features": 400,
                  "$type": "torch.nn.modules.linear.Linear"
                },
                "non_linearity": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "module": {
                    "$type": "builtins.function"
                  },
                  "$type": "garage.torch._functions.NonLinearity"
                }
              },
              "$type": "torch.nn.modules.container.Sequential"
            }
          },
          "$type": "torch.nn.modules.container.ModuleList"
        },
        "_output_layers": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "0": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "linear": {
                  "training": true,
                  "_parameters": {
                    "weight": {
                      "$type": "torch.nn.parameter.Parameter"
                    },
                    "bias": {
                      "$type": "torch.nn.parameter.Parameter"
                    }
                  },
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {},
                  "in_features": 400,
                  "out_features": 1,
                  "$type": "torch.nn.modules.linear.Linear"
                }
              },
              "$type": "torch.nn.modules.container.Sequential"
            }
          },
          "$type": "torch.nn.modules.container.ModuleList"
        }
      },
      "_output_dim": 1,
      "$type": "garage.torch.q_functions.continuous_mlp_q_function.ContinuousMLPQFunction"
    },
    "_policy_optimizer": {
      "defaults": {
        "lr": 0.0003,
        "betas": [
          0.9,
          0.999
        ],
        "eps": 1e-08,
        "weight_decay": 0,
        "amsgrad": false
      },
      "state": {},
      "param_groups": [
        {
          "params": [
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            }
          ],
          "lr": 0.0003,
          "betas": [
            0.9,
            0.999
          ],
          "eps": 1e-08,
          "weight_decay": 0,
          "amsgrad": false
        }
      ],
      "$type": "torch.optim.adam.Adam"
    },
    "_qf1_optimizer": {
      "defaults": {
        "lr": 0.0003,
        "betas": [
          0.9,
          0.999
        ],
        "eps": 1e-08,
        "weight_decay": 0,
        "amsgrad": false
      },
      "state": {},
      "param_groups": [
        {
          "params": [
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            }
          ],
          "lr": 0.0003,
          "betas": [
            0.9,
            0.999
          ],
          "eps": 1e-08,
          "weight_decay": 0,
          "amsgrad": false
        }
      ],
      "$type": "torch.optim.adam.Adam"
    },
    "_qf2_optimizer": {
      "defaults": {
        "lr": 0.0003,
        "betas": [
          0.9,
          0.999
        ],
        "eps": 1e-08,
        "weight_decay": 0,
        "amsgrad": false
      },
      "state": {},
      "param_groups": [
        {
          "params": [
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            }
          ],
          "lr": 0.0003,
          "betas": [
            0.9,
            0.999
          ],
          "eps": 1e-08,
          "weight_decay": 0,
          "amsgrad": false
        }
      ],
      "$type": "torch.optim.adam.Adam"
    },
    "_use_automatic_entropy_tuning": true,
    "_fixed_alpha": "None",
    "_target_entropy": -4,
    "_log_alpha": {
      "$type": "torch.Tensor"
    },
    "_alpha_optimizer": {
      "defaults": {
        "lr": 0.0003,
        "betas": [
          0.9,
          0.999
        ],
        "eps": 1e-08,
        "weight_decay": 0,
        "amsgrad": false
      },
      "state": {},
      "param_groups": [
        {
          "params": [
            {
              "$type": "torch.Tensor"
            }
          ],
          "lr": 0.0003,
          "betas": [
            0.9,
            0.999
          ],
          "eps": 1e-08,
          "weight_decay": 0,
          "amsgrad": false
        }
      ],
      "$type": "torch.optim.adam.Adam"
    },
    "episode_rewards": [],
    "_num_tasks": 10,
    "_epoch_mean_success_rate": [],
    "_epoch_median_success_rate": [],
    "$type": "garage.torch.algos.mtsac.MTSAC"
  },
  "_env": [
    {
      "_env_type": {
        "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_reach_v2.SawyerReachEnvV2"
      },
      "_task": {
        "$type": "metaworld.Task"
      },
      "_wrapper_cons": {
        "$type": "builtins.function"
      },
      "$type": "garage.sampler.env_update.SetTaskUpdate"
    },
    {
      "_env_type": {
        "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_push_v2.SawyerPushEnvV2"
      },
      "_task": {
        "$type": "metaworld.Task"
      },
      "_wrapper_cons": {
        "$type": "builtins.function"
      },
      "$type": "garage.sampler.env_update.SetTaskUpdate"
    },
    {
      "_env_type": {
        "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
      },
      "_task": {
        "$type": "metaworld.Task"
      },
      "_wrapper_cons": {
        "$type": "builtins.function"
      },
      "$type": "garage.sampler.env_update.SetTaskUpdate"
    },
    {
      "_env_type": {
        "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_door_v2.SawyerDoorEnvV2"
      },
      "_task": {
        "$type": "metaworld.Task"
      },
      "_wrapper_cons": {
        "$type": "builtins.function"
      },
      "$type": "garage.sampler.env_update.SetTaskUpdate"
    },
    {
      "_env_type": {
        "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_open_v2.SawyerDrawerOpenEnvV2"
      },
      "_task": {
        "$type": "metaworld.Task"
      },
      "_wrapper_cons": {
        "$type": "builtins.function"
      },
      "$type": "garage.sampler.env_update.SetTaskUpdate"
    },
    {
      "_env_type": {
        "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_close_v2.SawyerDrawerCloseEnvV2"
      },
      "_task": {
        "$type": "metaworld.Task"
      },
      "_wrapper_cons": {
        "$type": "builtins.function"
      },
      "$type": "garage.sampler.env_update.SetTaskUpdate"
    },
    {
      "_env_type": {
        "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_button_press_topdown_v2.SawyerButtonPressTopdownEnvV2"
      },
      "_task": {
        "$type": "metaworld.Task"
      },
      "_wrapper_cons": {
        "$type": "builtins.function"
      },
      "$type": "garage.sampler.env_update.SetTaskUpdate"
    },
    {
      "_env_type": {
        "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_peg_insertion_side_v2.SawyerPegInsertionSideEnvV2"
      },
      "_task": {
        "$type": "metaworld.Task"
      },
      "_wrapper_cons": {
        "$type": "builtins.function"
      },
      "$type": "garage.sampler.env_update.SetTaskUpdate"
    },
    {
      "_env_type": {
        "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_open_v2.SawyerWindowOpenEnvV2"
      },
      "_task": {
        "$type": "metaworld.Task"
      },
      "_wrapper_cons": {
        "$type": "builtins.function"
      },
      "$type": "garage.sampler.env_update.SetTaskUpdate"
    },
    {
      "_env_type": {
        "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_close_v2.SawyerWindowCloseEnvV2"
      },
      "_task": {
        "$type": "metaworld.Task"
      },
      "_wrapper_cons": {
        "$type": "builtins.function"
      },
      "$type": "garage.sampler.env_update.SetTaskUpdate"
    }
  ],
  "_sampler": {
    "_factory": {
      "n_workers": 10,
      "_seed": "None",
      "_max_episode_length": 500,
      "_worker_class": {
        "$typename": "garage.sampler.fragment_worker.FragmentWorker"
      },
      "_worker_args": {
        "n_envs": 2
      },
      "$type": "garage.sampler.worker_factory.WorkerFactory"
    },
    "_agents": [
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              },
              "max_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_shared_mean_log_std_network": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 49.0,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "2": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
              }
            },
            "_input_dim": 49.0,
            "_hidden_sizes": [
              400,
              400,
              400
            ],
            "_action_dim": 4.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 2.061153622438558e-09,
            "_max_std": 7.38905609893065,
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": {
              "$typename": "torch.nn.modules.activation.ReLU"
            },
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": {
              "$type": "torch.Tensor"
            },
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "TanhGaussianPolicy",
        "_obs_dim": 49.0,
        "_action_dim": 4.0,
        "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              },
              "max_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_shared_mean_log_std_network": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 49.0,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "2": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
              }
            },
            "_input_dim": 49.0,
            "_hidden_sizes": [
              400,
              400,
              400
            ],
            "_action_dim": 4.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 2.061153622438558e-09,
            "_max_std": 7.38905609893065,
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": {
              "$typename": "torch.nn.modules.activation.ReLU"
            },
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": {
              "$type": "torch.Tensor"
            },
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "TanhGaussianPolicy",
        "_obs_dim": 49.0,
        "_action_dim": 4.0,
        "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              },
              "max_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_shared_mean_log_std_network": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 49.0,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "2": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
              }
            },
            "_input_dim": 49.0,
            "_hidden_sizes": [
              400,
              400,
              400
            ],
            "_action_dim": 4.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 2.061153622438558e-09,
            "_max_std": 7.38905609893065,
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": {
              "$typename": "torch.nn.modules.activation.ReLU"
            },
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": {
              "$type": "torch.Tensor"
            },
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "TanhGaussianPolicy",
        "_obs_dim": 49.0,
        "_action_dim": 4.0,
        "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              },
              "max_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_shared_mean_log_std_network": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 49.0,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "2": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
              }
            },
            "_input_dim": 49.0,
            "_hidden_sizes": [
              400,
              400,
              400
            ],
            "_action_dim": 4.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 2.061153622438558e-09,
            "_max_std": 7.38905609893065,
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": {
              "$typename": "torch.nn.modules.activation.ReLU"
            },
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": {
              "$type": "torch.Tensor"
            },
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "TanhGaussianPolicy",
        "_obs_dim": 49.0,
        "_action_dim": 4.0,
        "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              },
              "max_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_shared_mean_log_std_network": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 49.0,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "2": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
              }
            },
            "_input_dim": 49.0,
            "_hidden_sizes": [
              400,
              400,
              400
            ],
            "_action_dim": 4.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 2.061153622438558e-09,
            "_max_std": 7.38905609893065,
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": {
              "$typename": "torch.nn.modules.activation.ReLU"
            },
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": {
              "$type": "torch.Tensor"
            },
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "TanhGaussianPolicy",
        "_obs_dim": 49.0,
        "_action_dim": 4.0,
        "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              },
              "max_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_shared_mean_log_std_network": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 49.0,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "2": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
              }
            },
            "_input_dim": 49.0,
            "_hidden_sizes": [
              400,
              400,
              400
            ],
            "_action_dim": 4.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 2.061153622438558e-09,
            "_max_std": 7.38905609893065,
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": {
              "$typename": "torch.nn.modules.activation.ReLU"
            },
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": {
              "$type": "torch.Tensor"
            },
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "TanhGaussianPolicy",
        "_obs_dim": 49.0,
        "_action_dim": 4.0,
        "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              },
              "max_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_shared_mean_log_std_network": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 49.0,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "2": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
              }
            },
            "_input_dim": 49.0,
            "_hidden_sizes": [
              400,
              400,
              400
            ],
            "_action_dim": 4.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 2.061153622438558e-09,
            "_max_std": 7.38905609893065,
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": {
              "$typename": "torch.nn.modules.activation.ReLU"
            },
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": {
              "$type": "torch.Tensor"
            },
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "TanhGaussianPolicy",
        "_obs_dim": 49.0,
        "_action_dim": 4.0,
        "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              },
              "max_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_shared_mean_log_std_network": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 49.0,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "2": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
              }
            },
            "_input_dim": 49.0,
            "_hidden_sizes": [
              400,
              400,
              400
            ],
            "_action_dim": 4.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 2.061153622438558e-09,
            "_max_std": 7.38905609893065,
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": {
              "$typename": "torch.nn.modules.activation.ReLU"
            },
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": {
              "$type": "torch.Tensor"
            },
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "TanhGaussianPolicy",
        "_obs_dim": 49.0,
        "_action_dim": 4.0,
        "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              },
              "max_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_shared_mean_log_std_network": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 49.0,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "2": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
              }
            },
            "_input_dim": 49.0,
            "_hidden_sizes": [
              400,
              400,
              400
            ],
            "_action_dim": 4.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 2.061153622438558e-09,
            "_max_std": 7.38905609893065,
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": {
              "$typename": "torch.nn.modules.activation.ReLU"
            },
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": {
              "$type": "torch.Tensor"
            },
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "TanhGaussianPolicy",
        "_obs_dim": 49.0,
        "_action_dim": 4.0,
        "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              },
              "max_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_shared_mean_log_std_network": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 49.0,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "2": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 400,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "module": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "inplace": false,
                                "$type": "torch.nn.modules.activation.ReLU"
                              }
                            },
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 400,
                            "out_features": 4.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
              }
            },
            "_input_dim": 49.0,
            "_hidden_sizes": [
              400,
              400,
              400
            ],
            "_action_dim": 4.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 2.061153622438558e-09,
            "_max_std": 7.38905609893065,
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": {
              "$typename": "torch.nn.modules.activation.ReLU"
            },
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": {
              "$type": "torch.Tensor"
            },
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 500,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True])",
            "_shape": [
              4
            ],
            "low": "array([-1., -1., -1., -1.], dtype=float32)",
            "high": "array([1., 1., 1., 1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
            "_shape": [
              49
            ],
            "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
            "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
            "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
            "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "TanhGaussianPolicy",
        "_obs_dim": 49.0,
        "_action_dim": 4.0,
        "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
      }
    ],
    "_envs": [
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_reach_v2.SawyerReachEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_push_v2.SawyerPushEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_door_v2.SawyerDoorEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_open_v2.SawyerDrawerOpenEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_close_v2.SawyerDrawerCloseEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_button_press_topdown_v2.SawyerButtonPressTopdownEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_peg_insertion_side_v2.SawyerPegInsertionSideEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_open_v2.SawyerWindowOpenEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      },
      {
        "_env_type": {
          "$typename": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_close_v2.SawyerWindowCloseEnvV2"
        },
        "_task": {
          "$type": "metaworld.Task"
        },
        "_wrapper_cons": {
          "$type": "builtins.function"
        },
        "$type": "garage.sampler.env_update.SetTaskUpdate"
      }
    ],
    "_workers": [
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 0,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                },
                "max_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_shared_mean_log_std_network": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 49.0,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "2": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                }
              },
              "_input_dim": 49.0,
              "_hidden_sizes": [
                400,
                400,
                400
              ],
              "_action_dim": 4.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 2.061153622438558e-09,
              "_max_std": 7.38905609893065,
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "$typename": "torch.nn.modules.activation.ReLU"
              },
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": {
                "$type": "torch.Tensor"
              },
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "_shape": [
                49
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "TanhGaussianPolicy",
          "_obs_dim": 49.0,
          "_action_dim": 4.0,
          "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
        },
        "env": "None",
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "_n_envs": 2,
        "_timesteps_per_call": 1,
        "_needs_env_reset": true,
        "_envs": [
          {
            "_env": {
              "_env": {
                "_env": {
                  "_env": {
                    "frame_skip": 5,
                    "model": "<mujoco_py.cymj.PyMjModel object at 0x5556958842e0>",
                    "sim": "<mujoco_py.cymj.MjSim object at 0x7f173b1f6040>",
                    "data": "<mujoco_py.cymj.PyMjData object at 0x555695cc0770>",
                    "viewer": "None",
                    "_viewers": {},
                    "metadata": {
                      "render.modes": [
                        "human"
                      ],
                      "video.frames_per_second": 80
                    },
                    "init_qpos": "array([0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 ,\n       0.02, 1.  , 0.  , 0.  , 0.  ])",
                    "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "_did_see_sim_exception": false,
                    "_np_random": "Generator(PCG64) at 0x7F173B2B1660",
                    "action_scale": 0.01,
                    "action_rot_scale": 1.0,
                    "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "hand_high": "array([0.5, 1. , 0.5])",
                    "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "mocap_high": "array([0.5, 1. , 0.5])",
                    "curr_path_length": 0,
                    "seeded_rand_vec": true,
                    "_freeze_rand_vec": true,
                    "_last_rand_vec": "array([-0.09680346,  0.61399291,  0.02      ,  0.07461136,  0.89134247,\n        0.24947998])",
                    "discrete_goal_space": "None",
                    "discrete_goals": [],
                    "active_discrete_goal": "None",
                    "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
                    "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
                    "action_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.])",
                      "high": "array([1., 1., 1., 1.])",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "isV2": true,
                    "_obs_obj_max_len": 14,
                    "_obs_obj_possible_lens": [
                      6,
                      14
                    ],
                    "_set_task_called": true,
                    "_partially_observable": false,
                    "hand_init_pos": "array([0. , 0.6, 0.2])",
                    "_target_pos": "array([0.07461136, 0.89134247, 0.24947998])",
                    "_random_reset_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                      "_shape": [
                        6
                      ],
                      "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05], dtype=float32)",
                      "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ], dtype=float32)",
                      "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                      "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "_last_stable_obs": "None",
                    "_prev_obs": "array([ 0.00615235,  0.6001898 ,  0.19430117,  1.        , -0.09680346,\n        0.61399291,  0.02      ,  0.        ,  0.        ,  0.        ,\n        1.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                    "init_config": {
                      "obj_init_angle": 0.3,
                      "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                      "hand_init_pos": "array([0. , 0.6, 0.2])"
                    },
                    "goal": "array([-0.1,  0.8,  0.2])",
                    "obj_init_angle": 0.3,
                    "obj_init_pos": "array([-0.09680346,  0.61399291,  0.02      ])",
                    "goal_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.1 ,  0.8 ,  0.05], dtype=float32)",
                      "high": "array([0.1, 0.9, 0.3], dtype=float32)",
                      "low_repr": "[-0.1   0.8   0.05]",
                      "high_repr": "[0.1 0.9 0.3]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "num_resets": 1,
                    "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
                    "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_reach_v2.SawyerReachEnvV2"
                  },
                  "_max_episode_length": 500,
                  "_render_modes": [
                    "human"
                  ],
                  "_step_cnt": "None",
                  "_visualize": false,
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "_shape": [
                      39
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ], dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05  ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3  ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 500,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "_env_info": "None",
                  "$type": "garage.envs.gym_env.GymEnv"
                },
                "_task_name": "reach-v2",
                "_task_id": "None",
                "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
              },
              "_task_index": 0,
              "_n_total_tasks": 10,
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 500,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_shape": [
                    4
                  ],
                  "low": "array([-1., -1., -1., -1.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": true,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          {
            "_env": {
              "_env": {
                "_env": {
                  "_env": {
                    "frame_skip": 5,
                    "model": "<mujoco_py.cymj.PyMjModel object at 0x55569542be50>",
                    "sim": "<mujoco_py.cymj.MjSim object at 0x7f173b1057c0>",
                    "data": "<mujoco_py.cymj.PyMjData object at 0x5556954df590>",
                    "viewer": "None",
                    "_viewers": {},
                    "metadata": {
                      "render.modes": [
                        "human"
                      ],
                      "video.frames_per_second": 80
                    },
                    "init_qpos": "array([0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 ,\n       0.02, 1.  , 0.  , 0.  , 0.  ])",
                    "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "_did_see_sim_exception": false,
                    "_np_random": "Generator(PCG64) at 0x7F173B2B1820",
                    "action_scale": 0.01,
                    "action_rot_scale": 1.0,
                    "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "hand_high": "array([0.5, 1. , 0.5])",
                    "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "mocap_high": "array([0.5, 1. , 0.5])",
                    "curr_path_length": 0,
                    "seeded_rand_vec": true,
                    "_freeze_rand_vec": true,
                    "_last_rand_vec": "array([-0.09680346,  0.61399291,  0.02      ,  0.07461136,  0.89134247,\n        0.24947998])",
                    "discrete_goal_space": "None",
                    "discrete_goals": [],
                    "active_discrete_goal": "None",
                    "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
                    "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
                    "action_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.])",
                      "high": "array([1., 1., 1., 1.])",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "isV2": true,
                    "_obs_obj_max_len": 14,
                    "_obs_obj_possible_lens": [
                      6,
                      14
                    ],
                    "_set_task_called": true,
                    "_partially_observable": false,
                    "hand_init_pos": "array([0. , 0.6, 0.2])",
                    "_target_pos": "array([0.07461136, 0.89134247, 0.24947998])",
                    "_random_reset_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                      "_shape": [
                        6
                      ],
                      "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05], dtype=float32)",
                      "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ], dtype=float32)",
                      "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                      "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "_last_stable_obs": "None",
                    "_prev_obs": "array([ 0.00615235,  0.6001898 ,  0.19430117,  1.        , -0.09680346,\n        0.61399291,  0.02      ,  0.        ,  0.        ,  0.        ,\n        1.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                    "init_config": {
                      "obj_init_angle": 0.3,
                      "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                      "hand_init_pos": "array([0. , 0.6, 0.2])"
                    },
                    "goal": "array([-0.1,  0.8,  0.2])",
                    "obj_init_angle": 0.3,
                    "obj_init_pos": "array([-0.09680346,  0.61399291,  0.02      ])",
                    "goal_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.1 ,  0.8 ,  0.05], dtype=float32)",
                      "high": "array([0.1, 0.9, 0.3], dtype=float32)",
                      "low_repr": "[-0.1   0.8   0.05]",
                      "high_repr": "[0.1 0.9 0.3]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "num_resets": 1,
                    "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
                    "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_reach_v2.SawyerReachEnvV2"
                  },
                  "_max_episode_length": 500,
                  "_render_modes": [
                    "human"
                  ],
                  "_step_cnt": "None",
                  "_visualize": false,
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "_shape": [
                      39
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ], dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05  ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3  ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 500,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "_env_info": "None",
                  "$type": "garage.envs.gym_env.GymEnv"
                },
                "_task_name": "reach-v2",
                "_task_id": "None",
                "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
              },
              "_task_index": 0,
              "_n_total_tasks": 10,
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 500,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_shape": [
                    4
                  ],
                  "low": "array([-1., -1., -1., -1.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": true,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          }
        ],
        "_agents": [
          "None",
          "None"
        ],
        "_episode_lengths": [
          0,
          0
        ],
        "_complete_fragments": [],
        "_fragments": "None",
        "$type": "garage.sampler.fragment_worker.FragmentWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 1,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                },
                "max_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_shared_mean_log_std_network": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 49.0,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "2": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                }
              },
              "_input_dim": 49.0,
              "_hidden_sizes": [
                400,
                400,
                400
              ],
              "_action_dim": 4.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 2.061153622438558e-09,
              "_max_std": 7.38905609893065,
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "$typename": "torch.nn.modules.activation.ReLU"
              },
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": {
                "$type": "torch.Tensor"
              },
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "_shape": [
                49
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "TanhGaussianPolicy",
          "_obs_dim": 49.0,
          "_action_dim": 4.0,
          "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
        },
        "env": "None",
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "_n_envs": 2,
        "_timesteps_per_call": 1,
        "_needs_env_reset": true,
        "_envs": [
          {
            "_env": {
              "_env": {
                "_env": {
                  "_env": {
                    "frame_skip": 5,
                    "model": "<mujoco_py.cymj.PyMjModel object at 0x555695553b40>",
                    "sim": "<mujoco_py.cymj.MjSim object at 0x7f173b014f40>",
                    "data": "<mujoco_py.cymj.PyMjData object at 0x555695990270>",
                    "viewer": "None",
                    "_viewers": {},
                    "metadata": {
                      "render.modes": [
                        "human"
                      ],
                      "video.frames_per_second": 80
                    },
                    "init_qpos": "array([0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 ,\n       0.02, 1.  , 0.  , 0.  , 0.  ])",
                    "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "_did_see_sim_exception": false,
                    "_np_random": "Generator(PCG64) at 0x7F173B2B19E0",
                    "action_scale": 0.01,
                    "action_rot_scale": 1.0,
                    "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "hand_high": "array([0.5, 1. , 0.5])",
                    "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "mocap_high": "array([0.5, 1. , 0.5])",
                    "curr_path_length": 0,
                    "seeded_rand_vec": true,
                    "_freeze_rand_vec": true,
                    "_last_rand_vec": "array([ 0.02282344,  0.65634415,  0.02      , -0.05023519,  0.82252896,\n        0.01174526])",
                    "discrete_goal_space": "None",
                    "discrete_goals": [],
                    "active_discrete_goal": "None",
                    "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
                    "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "isV2": true,
                    "_obs_obj_max_len": 14,
                    "_obs_obj_possible_lens": [
                      6,
                      14
                    ],
                    "_set_task_called": true,
                    "_partially_observable": false,
                    "hand_init_pos": "array([0. , 0.6, 0.2])",
                    "_target_pos": "array([-0.05023519,  0.82252896,  0.01987216])",
                    "_random_reset_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                      "_shape": [
                        6
                      ],
                      "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.01], dtype=float32)",
                      "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.02], dtype=float32)",
                      "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.01]",
                      "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.02]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "_last_stable_obs": "None",
                    "_prev_obs": "array([0.00615235, 0.6001898 , 0.19430117, 1.        , 0.02282344,\n       0.65634415, 0.01987216, 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
                    "init_config": {
                      "obj_init_angle": 0.3,
                      "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                      "hand_init_pos": "array([0. , 0.6, 0.2])"
                    },
                    "goal": "array([0.1 , 0.8 , 0.02])",
                    "obj_init_angle": 0.3,
                    "obj_init_pos": "array([0.02282344, 0.65634415, 0.01987216])",
                    "goal_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.1 ,  0.8 ,  0.01], dtype=float32)",
                      "high": "array([0.1 , 0.9 , 0.02], dtype=float32)",
                      "low_repr": "[-0.1   0.8   0.01]",
                      "high_repr": "[0.1  0.9  0.02]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "num_resets": 1,
                    "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
                    "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_push_v2.SawyerPushEnvV2"
                  },
                  "_max_episode_length": 500,
                  "_render_modes": [
                    "human"
                  ],
                  "_step_cnt": "None",
                  "_visualize": false,
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "_shape": [
                      39
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.01  ], dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.02 ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.01  ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.02 ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 500,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.01  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.02 ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.01  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.02 ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "_env_info": "None",
                  "$type": "garage.envs.gym_env.GymEnv"
                },
                "_task_name": "push-v2",
                "_task_id": "None",
                "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
              },
              "_task_index": 1,
              "_n_total_tasks": 10,
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.01  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.02 , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.01    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.02  1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 500,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_shape": [
                    4
                  ],
                  "low": "array([-1., -1., -1., -1.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.01  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.02 , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.01    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.02  1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": true,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          {
            "_env": {
              "_env": {
                "_env": {
                  "_env": {
                    "frame_skip": 5,
                    "model": "<mujoco_py.cymj.PyMjModel object at 0x555695cb1ad0>",
                    "sim": "<mujoco_py.cymj.MjSim object at 0x7f173af2b740>",
                    "data": "<mujoco_py.cymj.PyMjData object at 0x5556959af370>",
                    "viewer": "None",
                    "_viewers": {},
                    "metadata": {
                      "render.modes": [
                        "human"
                      ],
                      "video.frames_per_second": 80
                    },
                    "init_qpos": "array([0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 ,\n       0.02, 1.  , 0.  , 0.  , 0.  ])",
                    "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "_did_see_sim_exception": false,
                    "_np_random": "Generator(PCG64) at 0x7F173B2B1BA0",
                    "action_scale": 0.01,
                    "action_rot_scale": 1.0,
                    "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "hand_high": "array([0.5, 1. , 0.5])",
                    "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "mocap_high": "array([0.5, 1. , 0.5])",
                    "curr_path_length": 0,
                    "seeded_rand_vec": true,
                    "_freeze_rand_vec": true,
                    "_last_rand_vec": "array([ 0.02282344,  0.65634415,  0.02      , -0.05023519,  0.82252896,\n        0.01174526])",
                    "discrete_goal_space": "None",
                    "discrete_goals": [],
                    "active_discrete_goal": "None",
                    "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
                    "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "isV2": true,
                    "_obs_obj_max_len": 14,
                    "_obs_obj_possible_lens": [
                      6,
                      14
                    ],
                    "_set_task_called": true,
                    "_partially_observable": false,
                    "hand_init_pos": "array([0. , 0.6, 0.2])",
                    "_target_pos": "array([-0.05023519,  0.82252896,  0.01987216])",
                    "_random_reset_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                      "_shape": [
                        6
                      ],
                      "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.01], dtype=float32)",
                      "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.02], dtype=float32)",
                      "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.01]",
                      "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.02]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "_last_stable_obs": "None",
                    "_prev_obs": "array([0.00615235, 0.6001898 , 0.19430117, 1.        , 0.02282344,\n       0.65634415, 0.01987216, 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
                    "init_config": {
                      "obj_init_angle": 0.3,
                      "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                      "hand_init_pos": "array([0. , 0.6, 0.2])"
                    },
                    "goal": "array([0.1 , 0.8 , 0.02])",
                    "obj_init_angle": 0.3,
                    "obj_init_pos": "array([0.02282344, 0.65634415, 0.01987216])",
                    "goal_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.1 ,  0.8 ,  0.01], dtype=float32)",
                      "high": "array([0.1 , 0.9 , 0.02], dtype=float32)",
                      "low_repr": "[-0.1   0.8   0.01]",
                      "high_repr": "[0.1  0.9  0.02]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "num_resets": 1,
                    "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
                    "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_push_v2.SawyerPushEnvV2"
                  },
                  "_max_episode_length": 500,
                  "_render_modes": [
                    "human"
                  ],
                  "_step_cnt": "None",
                  "_visualize": false,
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "_shape": [
                      39
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.01  ], dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.02 ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.01  ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.02 ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 500,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.01  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.02 ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.01  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.02 ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "_env_info": "None",
                  "$type": "garage.envs.gym_env.GymEnv"
                },
                "_task_name": "push-v2",
                "_task_id": "None",
                "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
              },
              "_task_index": 1,
              "_n_total_tasks": 10,
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.01  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.02 , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.01    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.02  1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 500,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_shape": [
                    4
                  ],
                  "low": "array([-1., -1., -1., -1.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.01  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.02 , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.01    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.02  1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": true,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          }
        ],
        "_agents": [
          "None",
          "None"
        ],
        "_episode_lengths": [
          0,
          0
        ],
        "_complete_fragments": [],
        "_fragments": "None",
        "$type": "garage.sampler.fragment_worker.FragmentWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 2,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                },
                "max_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_shared_mean_log_std_network": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 49.0,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "2": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                }
              },
              "_input_dim": 49.0,
              "_hidden_sizes": [
                400,
                400,
                400
              ],
              "_action_dim": 4.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 2.061153622438558e-09,
              "_max_std": 7.38905609893065,
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "$typename": "torch.nn.modules.activation.ReLU"
              },
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": {
                "$type": "torch.Tensor"
              },
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "_shape": [
                49
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "TanhGaussianPolicy",
          "_obs_dim": 49.0,
          "_action_dim": 4.0,
          "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
        },
        "env": "None",
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "_n_envs": 2,
        "_timesteps_per_call": 1,
        "_needs_env_reset": true,
        "_envs": [
          {
            "_env": {
              "_env": {
                "_env": {
                  "_env": {
                    "frame_skip": 5,
                    "model": "<mujoco_py.cymj.PyMjModel object at 0x5556954e50b0>",
                    "sim": "<mujoco_py.cymj.MjSim object at 0x7f173adb9ec0>",
                    "data": "<mujoco_py.cymj.PyMjData object at 0x555695573da0>",
                    "viewer": "None",
                    "_viewers": {},
                    "metadata": {
                      "render.modes": [
                        "human"
                      ],
                      "video.frames_per_second": 80
                    },
                    "init_qpos": "array([0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 ,\n       0.02, 1.  , 0.  , 0.  , 0.  ])",
                    "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "_did_see_sim_exception": false,
                    "_np_random": "Generator(PCG64) at 0x7F173B2B1D60",
                    "action_scale": 0.01,
                    "action_rot_scale": 1.0,
                    "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "hand_high": "array([0.5, 1. , 0.5])",
                    "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "mocap_high": "array([0.5, 1. , 0.5])",
                    "curr_path_length": 0,
                    "seeded_rand_vec": true,
                    "_freeze_rand_vec": true,
                    "_last_rand_vec": "array([ 0.04734335,  0.68134592,  0.02      , -0.04286314,  0.87136413,\n        0.11504219])",
                    "discrete_goal_space": "None",
                    "discrete_goals": [],
                    "active_discrete_goal": "None",
                    "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
                    "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
                    "action_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.])",
                      "high": "array([1., 1., 1., 1.])",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "isV2": true,
                    "_obs_obj_max_len": 14,
                    "_obs_obj_possible_lens": [
                      6,
                      14
                    ],
                    "_set_task_called": true,
                    "_partially_observable": false,
                    "hand_init_pos": "array([0. , 0.6, 0.2])",
                    "_target_pos": "array([-0.04286314,  0.87136413,  0.11504219])",
                    "_random_reset_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                      "_shape": [
                        6
                      ],
                      "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05], dtype=float32)",
                      "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ], dtype=float32)",
                      "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                      "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "_last_stable_obs": "None",
                    "_prev_obs": "array([0.00615235, 0.6001898 , 0.19430117, 1.        , 0.04734335,\n       0.68134592, 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
                    "init_config": {
                      "obj_init_angle": 0.3,
                      "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                      "hand_init_pos": "array([0. , 0.6, 0.2])"
                    },
                    "goal": "array([0.1, 0.8, 0.2])",
                    "obj_init_angle": 0.3,
                    "obj_init_pos": "array([0.04734335, 0.68134592, 0.02      ])",
                    "goal_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.1 ,  0.8 ,  0.05], dtype=float32)",
                      "high": "array([0.1, 0.9, 0.3], dtype=float32)",
                      "low_repr": "[-0.1   0.8   0.05]",
                      "high_repr": "[0.1 0.9 0.3]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "num_resets": 1,
                    "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
                    "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                  },
                  "_max_episode_length": 500,
                  "_render_modes": [
                    "human"
                  ],
                  "_step_cnt": "None",
                  "_visualize": false,
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "_shape": [
                      39
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ], dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05  ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3  ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 500,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "_env_info": "None",
                  "$type": "garage.envs.gym_env.GymEnv"
                },
                "_task_name": "pick-place-v2",
                "_task_id": "None",
                "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
              },
              "_task_index": 2,
              "_n_total_tasks": 10,
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 500,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_shape": [
                    4
                  ],
                  "low": "array([-1., -1., -1., -1.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": true,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          {
            "_env": {
              "_env": {
                "_env": {
                  "_env": {
                    "frame_skip": 5,
                    "model": "<mujoco_py.cymj.PyMjModel object at 0x5556954fab00>",
                    "sim": "<mujoco_py.cymj.MjSim object at 0x7f173acd26c0>",
                    "data": "<mujoco_py.cymj.PyMjData object at 0x55569585cf50>",
                    "viewer": "None",
                    "_viewers": {},
                    "metadata": {
                      "render.modes": [
                        "human"
                      ],
                      "video.frames_per_second": 80
                    },
                    "init_qpos": "array([0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 ,\n       0.02, 1.  , 0.  , 0.  , 0.  ])",
                    "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "_did_see_sim_exception": false,
                    "_np_random": "Generator(PCG64) at 0x7F173B2B1F20",
                    "action_scale": 0.01,
                    "action_rot_scale": 1.0,
                    "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "hand_high": "array([0.5, 1. , 0.5])",
                    "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "mocap_high": "array([0.5, 1. , 0.5])",
                    "curr_path_length": 0,
                    "seeded_rand_vec": true,
                    "_freeze_rand_vec": true,
                    "_last_rand_vec": "array([ 0.04734335,  0.68134592,  0.02      , -0.04286314,  0.87136413,\n        0.11504219])",
                    "discrete_goal_space": "None",
                    "discrete_goals": [],
                    "active_discrete_goal": "None",
                    "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
                    "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
                    "action_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.])",
                      "high": "array([1., 1., 1., 1.])",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "isV2": true,
                    "_obs_obj_max_len": 14,
                    "_obs_obj_possible_lens": [
                      6,
                      14
                    ],
                    "_set_task_called": true,
                    "_partially_observable": false,
                    "hand_init_pos": "array([0. , 0.6, 0.2])",
                    "_target_pos": "array([-0.04286314,  0.87136413,  0.11504219])",
                    "_random_reset_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                      "_shape": [
                        6
                      ],
                      "low": "array([-0.1 ,  0.6 ,  0.02, -0.1 ,  0.8 ,  0.05], dtype=float32)",
                      "high": "array([0.1 , 0.7 , 0.02, 0.1 , 0.9 , 0.3 ], dtype=float32)",
                      "low_repr": "[-0.1   0.6   0.02 -0.1   0.8   0.05]",
                      "high_repr": "[0.1  0.7  0.02 0.1  0.9  0.3 ]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "_last_stable_obs": "None",
                    "_prev_obs": "array([0.00615235, 0.6001898 , 0.19430117, 1.        , 0.04734335,\n       0.68134592, 0.02      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
                    "init_config": {
                      "obj_init_angle": 0.3,
                      "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                      "hand_init_pos": "array([0. , 0.6, 0.2])"
                    },
                    "goal": "array([0.1, 0.8, 0.2])",
                    "obj_init_angle": 0.3,
                    "obj_init_pos": "array([0.04734335, 0.68134592, 0.02      ])",
                    "goal_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.1 ,  0.8 ,  0.05], dtype=float32)",
                      "high": "array([0.1, 0.9, 0.3], dtype=float32)",
                      "low_repr": "[-0.1   0.8   0.05]",
                      "high_repr": "[0.1 0.9 0.3]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "num_resets": 1,
                    "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
                    "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_pick_place_v2.SawyerPickPlaceEnvV2"
                  },
                  "_max_episode_length": 500,
                  "_render_modes": [
                    "human"
                  ],
                  "_step_cnt": "None",
                  "_visualize": false,
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "_shape": [
                      39
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ], dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05  ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3  ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 500,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "_env_info": "None",
                  "$type": "garage.envs.gym_env.GymEnv"
                },
                "_task_name": "pick-place-v2",
                "_task_id": "None",
                "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
              },
              "_task_index": 2,
              "_n_total_tasks": 10,
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 500,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_shape": [
                    4
                  ],
                  "low": "array([-1., -1., -1., -1.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": true,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          }
        ],
        "_agents": [
          "None",
          "None"
        ],
        "_episode_lengths": [
          0,
          0
        ],
        "_complete_fragments": [],
        "_fragments": "None",
        "$type": "garage.sampler.fragment_worker.FragmentWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 3,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                },
                "max_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_shared_mean_log_std_network": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 49.0,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "2": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                }
              },
              "_input_dim": 49.0,
              "_hidden_sizes": [
                400,
                400,
                400
              ],
              "_action_dim": 4.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 2.061153622438558e-09,
              "_max_std": 7.38905609893065,
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "$typename": "torch.nn.modules.activation.ReLU"
              },
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": {
                "$type": "torch.Tensor"
              },
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "_shape": [
                49
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "TanhGaussianPolicy",
          "_obs_dim": 49.0,
          "_action_dim": 4.0,
          "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
        },
        "env": "None",
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "_n_envs": 2,
        "_timesteps_per_call": 1,
        "_needs_env_reset": true,
        "_envs": [
          {
            "_env": {
              "_env": {
                "_env": {
                  "_env": {
                    "frame_skip": 5,
                    "model": "<mujoco_py.cymj.PyMjModel object at 0x555695cd6c40>",
                    "sim": "<mujoco_py.cymj.MjSim object at 0x7f173abd8540>",
                    "data": "<mujoco_py.cymj.PyMjData object at 0x555696f161a0>",
                    "viewer": "None",
                    "_viewers": {},
                    "metadata": {
                      "render.modes": [
                        "human"
                      ],
                      "video.frames_per_second": 80
                    },
                    "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "_did_see_sim_exception": false,
                    "_np_random": "Generator(PCG64) at 0x7F173AC23120",
                    "action_scale": 0.01,
                    "action_rot_scale": 1.0,
                    "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "hand_high": "array([0.5, 1. , 0.5])",
                    "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "mocap_high": "array([0.5, 1. , 0.5])",
                    "curr_path_length": 0,
                    "seeded_rand_vec": true,
                    "_freeze_rand_vec": true,
                    "_last_rand_vec": "array([0.06405342, 0.92718979, 0.15000001])",
                    "discrete_goal_space": "None",
                    "discrete_goals": [],
                    "active_discrete_goal": "None",
                    "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
                    "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
                    "action_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.])",
                      "high": "array([1., 1., 1., 1.])",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "isV2": true,
                    "_obs_obj_max_len": 14,
                    "_obs_obj_possible_lens": [
                      6,
                      14
                    ],
                    "_set_task_called": true,
                    "_partially_observable": false,
                    "hand_init_pos": "array([0. , 0.6, 0.2])",
                    "_target_pos": "array([-0.23594658,  0.47718979,  0.15000001])",
                    "_random_reset_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([0.  , 0.85, 0.15], dtype=float32)",
                      "high": "array([0.1 , 0.95, 0.15], dtype=float32)",
                      "low_repr": "[0.   0.85 0.15]",
                      "high_repr": "[0.1  0.95 0.15]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "_last_stable_obs": "None",
                    "_prev_obs": "array([ 0.00615235,  0.6001898 ,  0.19430117,  1.        ,  0.25477505,\n        0.7200499 ,  0.15003595,  0.6907585 , -0.15062097,  0.69087866,\n        0.15117109,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                    "init_config": {
                      "obj_init_angle": "array([0.3])",
                      "obj_init_pos": "array([0.1 , 0.95, 0.15])",
                      "hand_init_pos": "array([0. , 0.6, 0.2])"
                    },
                    "goal": "array([-0.2 ,  0.7 ,  0.15])",
                    "obj_init_pos": "array([0.06405342, 0.92718979, 0.15000001])",
                    "obj_init_angle": "array([0.3])",
                    "door_angle_idx": 9.0,
                    "goal_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.3   ,  0.4   ,  0.1499], dtype=float32)",
                      "high": "array([-0.2   ,  0.5   ,  0.1501], dtype=float32)",
                      "low_repr": "[-0.3     0.4     0.1499]",
                      "high_repr": "[-0.2     0.5     0.1501]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
                    "objHeight": 0.15003594872010784,
                    "maxPullDist": 0.5475296783430732,
                    "target_reward": 2547.529678343073,
                    "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_door_v2.SawyerDoorEnvV2"
                  },
                  "_max_episode_length": 500,
                  "_render_modes": [
                    "human"
                  ],
                  "_step_cnt": "None",
                  "_visualize": false,
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "_shape": [
                      39
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.3   ,  0.4   ,  0.1499], dtype=float32)",
                    "high": "array([ 0.525 ,  1.025 ,  0.7   ,  1.    ,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,  0.525 ,  1.025 ,  0.7   ,\n        1.    ,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf, -0.2   ,  0.5   ,  0.1501], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.3     0.4     0.1499]",
                    "high_repr": "[ 0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n  0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n -0.2     0.5     0.1501]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 500,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.3   ,  0.4   ,  0.1499], dtype=float32)",
                      "high": "array([ 0.525 ,  1.025 ,  0.7   ,  1.    ,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,  0.525 ,  1.025 ,  0.7   ,\n        1.    ,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf, -0.2   ,  0.5   ,  0.1501], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.3     0.4     0.1499]",
                      "high_repr": "[ 0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n  0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n -0.2     0.5     0.1501]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "_env_info": "None",
                  "$type": "garage.envs.gym_env.GymEnv"
                },
                "_task_name": "door-open-v2",
                "_task_id": "None",
                "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
              },
              "_task_index": 3,
              "_n_total_tasks": 10,
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.3   ,  0.4   ,  0.1499,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([ 0.525 ,  1.025 ,  0.7   ,  1.    ,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,  0.525 ,  1.025 ,  0.7   ,\n        1.    ,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf, -0.2   ,  0.5   ,  0.1501,  1.    ,  1.    ,  1.    ,\n        1.    ,  1.    ,  1.    ,  1.    ,  1.    ,  1.    ,  1.    ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.3     0.4     0.1499  0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[ 0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n  0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n -0.2     0.5     0.1501  1.      1.      1.      1.      1.      1.\n  1.      1.      1.      1.    ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 500,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_shape": [
                    4
                  ],
                  "low": "array([-1., -1., -1., -1.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.3   ,  0.4   ,  0.1499,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([ 0.525 ,  1.025 ,  0.7   ,  1.    ,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,  0.525 ,  1.025 ,  0.7   ,\n        1.    ,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf, -0.2   ,  0.5   ,  0.1501,  1.    ,  1.    ,  1.    ,\n        1.    ,  1.    ,  1.    ,  1.    ,  1.    ,  1.    ,  1.    ],\n      dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.3     0.4     0.1499  0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[ 0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n  0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n -0.2     0.5     0.1501  1.      1.      1.      1.      1.      1.\n  1.      1.      1.      1.    ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": true,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          {
            "_env": {
              "_env": {
                "_env": {
                  "_env": {
                    "frame_skip": 5,
                    "model": "<mujoco_py.cymj.PyMjModel object at 0x5556958897b0>",
                    "sim": "<mujoco_py.cymj.MjSim object at 0x7f173aae5cc0>",
                    "data": "<mujoco_py.cymj.PyMjData object at 0x555695cb04e0>",
                    "viewer": "None",
                    "_viewers": {},
                    "metadata": {
                      "render.modes": [
                        "human"
                      ],
                      "video.frames_per_second": 80
                    },
                    "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "_did_see_sim_exception": false,
                    "_np_random": "Generator(PCG64) at 0x7F173AC232E0",
                    "action_scale": 0.01,
                    "action_rot_scale": 1.0,
                    "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "hand_high": "array([0.5, 1. , 0.5])",
                    "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "mocap_high": "array([0.5, 1. , 0.5])",
                    "curr_path_length": 0,
                    "seeded_rand_vec": true,
                    "_freeze_rand_vec": true,
                    "_last_rand_vec": "array([0.06405342, 0.92718979, 0.15000001])",
                    "discrete_goal_space": "None",
                    "discrete_goals": [],
                    "active_discrete_goal": "None",
                    "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
                    "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
                    "action_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.])",
                      "high": "array([1., 1., 1., 1.])",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "isV2": true,
                    "_obs_obj_max_len": 14,
                    "_obs_obj_possible_lens": [
                      6,
                      14
                    ],
                    "_set_task_called": true,
                    "_partially_observable": false,
                    "hand_init_pos": "array([0. , 0.6, 0.2])",
                    "_target_pos": "array([-0.23594658,  0.47718979,  0.15000001])",
                    "_random_reset_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([0.  , 0.85, 0.15], dtype=float32)",
                      "high": "array([0.1 , 0.95, 0.15], dtype=float32)",
                      "low_repr": "[0.   0.85 0.15]",
                      "high_repr": "[0.1  0.95 0.15]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "_last_stable_obs": "None",
                    "_prev_obs": "array([ 0.00615235,  0.6001898 ,  0.19430117,  1.        ,  0.25477505,\n        0.7200499 ,  0.15003595,  0.6907585 , -0.15062097,  0.69087866,\n        0.15117109,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                    "init_config": {
                      "obj_init_angle": "array([0.3])",
                      "obj_init_pos": "array([0.1 , 0.95, 0.15])",
                      "hand_init_pos": "array([0. , 0.6, 0.2])"
                    },
                    "goal": "array([-0.2 ,  0.7 ,  0.15])",
                    "obj_init_pos": "array([0.06405342, 0.92718979, 0.15000001])",
                    "obj_init_angle": "array([0.3])",
                    "door_angle_idx": 9.0,
                    "goal_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.3   ,  0.4   ,  0.1499], dtype=float32)",
                      "high": "array([-0.2   ,  0.5   ,  0.1501], dtype=float32)",
                      "low_repr": "[-0.3     0.4     0.1499]",
                      "high_repr": "[-0.2     0.5     0.1501]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
                    "objHeight": 0.15003594872010784,
                    "maxPullDist": 0.5475296783430732,
                    "target_reward": 2547.529678343073,
                    "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_door_v2.SawyerDoorEnvV2"
                  },
                  "_max_episode_length": 500,
                  "_render_modes": [
                    "human"
                  ],
                  "_step_cnt": "None",
                  "_visualize": false,
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "_shape": [
                      39
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.3   ,  0.4   ,  0.1499], dtype=float32)",
                    "high": "array([ 0.525 ,  1.025 ,  0.7   ,  1.    ,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,  0.525 ,  1.025 ,  0.7   ,\n        1.    ,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf, -0.2   ,  0.5   ,  0.1501], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.3     0.4     0.1499]",
                    "high_repr": "[ 0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n  0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n -0.2     0.5     0.1501]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 500,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.3   ,  0.4   ,  0.1499], dtype=float32)",
                      "high": "array([ 0.525 ,  1.025 ,  0.7   ,  1.    ,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,  0.525 ,  1.025 ,  0.7   ,\n        1.    ,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf, -0.2   ,  0.5   ,  0.1501], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.3     0.4     0.1499]",
                      "high_repr": "[ 0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n  0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n -0.2     0.5     0.1501]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "_env_info": "None",
                  "$type": "garage.envs.gym_env.GymEnv"
                },
                "_task_name": "door-open-v2",
                "_task_id": "None",
                "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
              },
              "_task_index": 3,
              "_n_total_tasks": 10,
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.3   ,  0.4   ,  0.1499,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([ 0.525 ,  1.025 ,  0.7   ,  1.    ,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,  0.525 ,  1.025 ,  0.7   ,\n        1.    ,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf, -0.2   ,  0.5   ,  0.1501,  1.    ,  1.    ,  1.    ,\n        1.    ,  1.    ,  1.    ,  1.    ,  1.    ,  1.    ,  1.    ],\n      dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.3     0.4     0.1499  0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[ 0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n  0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n -0.2     0.5     0.1501  1.      1.      1.      1.      1.      1.\n  1.      1.      1.      1.    ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 500,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_shape": [
                    4
                  ],
                  "low": "array([-1., -1., -1., -1.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.3   ,  0.4   ,  0.1499,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([ 0.525 ,  1.025 ,  0.7   ,  1.    ,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,  0.525 ,  1.025 ,  0.7   ,\n        1.    ,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf,     inf,     inf,     inf,     inf,     inf,     inf,\n           inf, -0.2   ,  0.5   ,  0.1501,  1.    ,  1.    ,  1.    ,\n        1.    ,  1.    ,  1.    ,  1.    ,  1.    ,  1.    ,  1.    ],\n      dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.3     0.4     0.1499  0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[ 0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n  0.525   1.025   0.7     1.         inf     inf     inf     inf     inf\n     inf     inf     inf     inf     inf     inf     inf     inf     inf\n -0.2     0.5     0.1501  1.      1.      1.      1.      1.      1.\n  1.      1.      1.      1.    ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": true,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          }
        ],
        "_agents": [
          "None",
          "None"
        ],
        "_episode_lengths": [
          0,
          0
        ],
        "_complete_fragments": [],
        "_fragments": "None",
        "$type": "garage.sampler.fragment_worker.FragmentWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 4,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                },
                "max_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_shared_mean_log_std_network": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 49.0,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "2": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                }
              },
              "_input_dim": 49.0,
              "_hidden_sizes": [
                400,
                400,
                400
              ],
              "_action_dim": 4.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 2.061153622438558e-09,
              "_max_std": 7.38905609893065,
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "$typename": "torch.nn.modules.activation.ReLU"
              },
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": {
                "$type": "torch.Tensor"
              },
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "_shape": [
                49
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "TanhGaussianPolicy",
          "_obs_dim": 49.0,
          "_action_dim": 4.0,
          "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
        },
        "env": "None",
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "_n_envs": 2,
        "_timesteps_per_call": 1,
        "_needs_env_reset": true,
        "_envs": [
          {
            "_env": {
              "_env": {
                "_env": {
                  "_env": {
                    "frame_skip": 5,
                    "model": "<mujoco_py.cymj.PyMjModel object at 0x555696ebbba0>",
                    "sim": "<mujoco_py.cymj.MjSim object at 0x7f173a97c4c0>",
                    "data": "<mujoco_py.cymj.PyMjData object at 0x5556954214f0>",
                    "viewer": "None",
                    "_viewers": {},
                    "metadata": {
                      "render.modes": [
                        "human"
                      ],
                      "video.frames_per_second": 80
                    },
                    "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "_did_see_sim_exception": false,
                    "_np_random": "Generator(PCG64) at 0x7F173AC234A0",
                    "action_scale": 0.01,
                    "action_rot_scale": 1.0,
                    "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "hand_high": "array([0.5, 1. , 0.5])",
                    "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "mocap_high": "array([0.5, 1. , 0.5])",
                    "curr_path_length": 0,
                    "seeded_rand_vec": true,
                    "_freeze_rand_vec": true,
                    "_last_rand_vec": "array([0.09325532, 0.89999998, 0.        ])",
                    "discrete_goal_space": "None",
                    "discrete_goals": [],
                    "active_discrete_goal": "None",
                    "init_left_pad": "array([0.00424391, 0.64740393, 0.1945706 ])",
                    "init_right_pad": "array([0.00807892, 0.55313929, 0.19412857])",
                    "action_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.])",
                      "high": "array([1., 1., 1., 1.])",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "isV2": true,
                    "_obs_obj_max_len": 14,
                    "_obs_obj_possible_lens": [
                      6,
                      14
                    ],
                    "_set_task_called": true,
                    "_partially_observable": false,
                    "hand_init_pos": "array([0. , 0.6, 0.2], dtype=float32)",
                    "_target_pos": "array([0.09325532, 0.53999998, 0.09      ])",
                    "_random_reset_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.1,  0.9,  0. ], dtype=float32)",
                      "high": "array([0.1, 0.9, 0. ], dtype=float32)",
                      "low_repr": "[-0.1  0.9  0. ]",
                      "high_repr": "[0.1 0.9 0. ]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "_last_stable_obs": "None",
                    "_prev_obs": "array([0.00616141, 0.60027169, 0.19434958, 1.        , 0.        ,\n       0.73      , 0.09      , 1.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
                    "init_config": {
                      "obj_init_angle": "array([0.3], dtype=float32)",
                      "obj_init_pos": "array([0. , 0.9, 0. ], dtype=float32)",
                      "hand_init_pos": "array([0. , 0.6, 0.2], dtype=float32)"
                    },
                    "obj_init_pos": "array([0.09325532, 0.89999998, 0.        ])",
                    "obj_init_angle": "array([0.3], dtype=float32)",
                    "goal_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                      "high": "array([0.5, 1. , 0.5], dtype=float32)",
                      "low_repr": "[-0.5   0.4   0.05]",
                      "high_repr": "[0.5 1.  0.5]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "maxDist": 0.2,
                    "target_reward": 2200.0,
                    "init_tcp": "array([0.00600364, 0.6004762 , 0.14935033])",
                    "prev_obs": "array([0.00616141, 0.60027169, 0.19434958, 1.        , 0.        ,\n       0.73      , 0.09      , 1.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
                    "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_open_v2.SawyerDrawerOpenEnvV2"
                  },
                  "_max_episode_length": 500,
                  "_render_modes": [
                    "human"
                  ],
                  "_step_cnt": "None",
                  "_visualize": false,
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "_shape": [
                      39
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 500,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "_env_info": "None",
                  "$type": "garage.envs.gym_env.GymEnv"
                },
                "_task_name": "drawer-open-v2",
                "_task_id": "None",
                "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
              },
              "_task_index": 4,
              "_n_total_tasks": 10,
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 500,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_shape": [
                    4
                  ],
                  "low": "array([-1., -1., -1., -1.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": true,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          {
            "_env": {
              "_env": {
                "_env": {
                  "_env": {
                    "frame_skip": 5,
                    "model": "<mujoco_py.cymj.PyMjModel object at 0x55569ff87530>",
                    "sim": "<mujoco_py.cymj.MjSim object at 0x7f173a88ac40>",
                    "data": "<mujoco_py.cymj.PyMjData object at 0x55569d3cda00>",
                    "viewer": "None",
                    "_viewers": {},
                    "metadata": {
                      "render.modes": [
                        "human"
                      ],
                      "video.frames_per_second": 80
                    },
                    "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "_did_see_sim_exception": false,
                    "_np_random": "Generator(PCG64) at 0x7F173AC23660",
                    "action_scale": 0.01,
                    "action_rot_scale": 1.0,
                    "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "hand_high": "array([0.5, 1. , 0.5])",
                    "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "mocap_high": "array([0.5, 1. , 0.5])",
                    "curr_path_length": 0,
                    "seeded_rand_vec": true,
                    "_freeze_rand_vec": true,
                    "_last_rand_vec": "array([0.09325532, 0.89999998, 0.        ])",
                    "discrete_goal_space": "None",
                    "discrete_goals": [],
                    "active_discrete_goal": "None",
                    "init_left_pad": "array([0.00424391, 0.64740393, 0.1945706 ])",
                    "init_right_pad": "array([0.00807892, 0.55313929, 0.19412857])",
                    "action_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.])",
                      "high": "array([1., 1., 1., 1.])",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "isV2": true,
                    "_obs_obj_max_len": 14,
                    "_obs_obj_possible_lens": [
                      6,
                      14
                    ],
                    "_set_task_called": true,
                    "_partially_observable": false,
                    "hand_init_pos": "array([0. , 0.6, 0.2], dtype=float32)",
                    "_target_pos": "array([0.09325532, 0.53999998, 0.09      ])",
                    "_random_reset_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.1,  0.9,  0. ], dtype=float32)",
                      "high": "array([0.1, 0.9, 0. ], dtype=float32)",
                      "low_repr": "[-0.1  0.9  0. ]",
                      "high_repr": "[0.1 0.9 0. ]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "_last_stable_obs": "None",
                    "_prev_obs": "array([0.00616141, 0.60027169, 0.19434958, 1.        , 0.        ,\n       0.73      , 0.09      , 1.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
                    "init_config": {
                      "obj_init_angle": "array([0.3], dtype=float32)",
                      "obj_init_pos": "array([0. , 0.9, 0. ], dtype=float32)",
                      "hand_init_pos": "array([0. , 0.6, 0.2], dtype=float32)"
                    },
                    "obj_init_pos": "array([0.09325532, 0.89999998, 0.        ])",
                    "obj_init_angle": "array([0.3], dtype=float32)",
                    "goal_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                      "high": "array([0.5, 1. , 0.5], dtype=float32)",
                      "low_repr": "[-0.5   0.4   0.05]",
                      "high_repr": "[0.5 1.  0.5]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "maxDist": 0.2,
                    "target_reward": 2200.0,
                    "init_tcp": "array([0.00600364, 0.6004762 , 0.14935033])",
                    "prev_obs": "array([0.00616141, 0.60027169, 0.19434958, 1.        , 0.        ,\n       0.73      , 0.09      , 1.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
                    "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_open_v2.SawyerDrawerOpenEnvV2"
                  },
                  "_max_episode_length": 500,
                  "_render_modes": [
                    "human"
                  ],
                  "_step_cnt": "None",
                  "_visualize": false,
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "_shape": [
                      39
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 500,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "_env_info": "None",
                  "$type": "garage.envs.gym_env.GymEnv"
                },
                "_task_name": "drawer-open-v2",
                "_task_id": "None",
                "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
              },
              "_task_index": 4,
              "_n_total_tasks": 10,
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 500,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_shape": [
                    4
                  ],
                  "low": "array([-1., -1., -1., -1.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": true,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          }
        ],
        "_agents": [
          "None",
          "None"
        ],
        "_episode_lengths": [
          0,
          0
        ],
        "_complete_fragments": [],
        "_fragments": "None",
        "$type": "garage.sampler.fragment_worker.FragmentWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 5,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                },
                "max_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_shared_mean_log_std_network": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 49.0,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "2": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                }
              },
              "_input_dim": 49.0,
              "_hidden_sizes": [
                400,
                400,
                400
              ],
              "_action_dim": 4.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 2.061153622438558e-09,
              "_max_std": 7.38905609893065,
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "$typename": "torch.nn.modules.activation.ReLU"
              },
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": {
                "$type": "torch.Tensor"
              },
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "_shape": [
                49
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "TanhGaussianPolicy",
          "_obs_dim": 49.0,
          "_action_dim": 4.0,
          "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
        },
        "env": "None",
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "_n_envs": 2,
        "_timesteps_per_call": 1,
        "_needs_env_reset": true,
        "_envs": [
          {
            "_env": {
              "_env": {
                "_env": {
                  "_env": {
                    "frame_skip": 5,
                    "model": "<mujoco_py.cymj.PyMjModel object at 0x55569a2ceae0>",
                    "sim": "<mujoco_py.cymj.MjSim object at 0x7f173a7a0440>",
                    "data": "<mujoco_py.cymj.PyMjData object at 0x55569558e840>",
                    "viewer": "None",
                    "_viewers": {},
                    "metadata": {
                      "render.modes": [
                        "human"
                      ],
                      "video.frames_per_second": 80
                    },
                    "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "_did_see_sim_exception": false,
                    "_np_random": "Generator(PCG64) at 0x7F173AC23820",
                    "action_scale": 0.01,
                    "action_rot_scale": 1.0,
                    "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "hand_high": "array([0.5, 1. , 0.5])",
                    "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "mocap_high": "array([0.5, 1. , 0.5])",
                    "curr_path_length": 0,
                    "seeded_rand_vec": true,
                    "_freeze_rand_vec": true,
                    "_last_rand_vec": "array([-0.03591261,  0.89999998,  0.        ])",
                    "discrete_goal_space": "None",
                    "discrete_goals": [],
                    "active_discrete_goal": "None",
                    "init_left_pad": "array([0.00455658, 0.64733405, 0.19452415])",
                    "init_right_pad": "array([0.00774813, 0.55304544, 0.1940782 ])",
                    "action_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.])",
                      "high": "array([1., 1., 1., 1.])",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "isV2": true,
                    "_obs_obj_max_len": 14,
                    "_obs_obj_possible_lens": [
                      6,
                      14
                    ],
                    "_set_task_called": true,
                    "_partially_observable": false,
                    "hand_init_pos": "array([0. , 0.6, 0.2], dtype=float32)",
                    "_target_pos": "array([-0.03591261,  0.73999998,  0.09      ])",
                    "_random_reset_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.1,  0.9,  0. ], dtype=float32)",
                      "high": "array([0.1, 0.9, 0. ], dtype=float32)",
                      "low_repr": "[-0.1  0.9  0. ]",
                      "high_repr": "[0.1 0.9 0. ]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "_last_stable_obs": "None",
                    "_prev_obs": "array([ 0.00615235,  0.60018983,  0.19430118,  1.        , -0.03591261,\n        0.57999998,  0.14      ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                    "init_config": {
                      "obj_init_angle": "array([0.3], dtype=float32)",
                      "obj_init_pos": "array([0. , 0.9, 0. ], dtype=float32)",
                      "hand_init_pos": "array([0. , 0.6, 0.2], dtype=float32)"
                    },
                    "obj_init_pos": "array([-0.03591261,  0.57999998,  0.14      ])",
                    "obj_init_angle": "array([0.3], dtype=float32)",
                    "goal_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                      "high": "array([0.5, 1. , 0.5], dtype=float32)",
                      "low_repr": "[-0.5   0.4   0.05]",
                      "high_repr": "[0.5 1.  0.5]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "maxDist": 0.15,
                    "target_reward": 2150.0,
                    "init_tcp": "array([0.00600364, 0.6004762 , 0.14935033])",
                    "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_close_v2.SawyerDrawerCloseEnvV2"
                  },
                  "_max_episode_length": 500,
                  "_render_modes": [
                    "human"
                  ],
                  "_step_cnt": "None",
                  "_visualize": false,
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "_shape": [
                      39
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 500,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "_env_info": "None",
                  "$type": "garage.envs.gym_env.GymEnv"
                },
                "_task_name": "drawer-close-v2",
                "_task_id": "None",
                "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
              },
              "_task_index": 5,
              "_n_total_tasks": 10,
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 500,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_shape": [
                    4
                  ],
                  "low": "array([-1., -1., -1., -1.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": true,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          {
            "_env": {
              "_env": {
                "_env": {
                  "_env": {
                    "frame_skip": 5,
                    "model": "<mujoco_py.cymj.PyMjModel object at 0x555695ca5120>",
                    "sim": "<mujoco_py.cymj.MjSim object at 0x7f173a6afbc0>",
                    "data": "<mujoco_py.cymj.PyMjData object at 0x55569537c430>",
                    "viewer": "None",
                    "_viewers": {},
                    "metadata": {
                      "render.modes": [
                        "human"
                      ],
                      "video.frames_per_second": 80
                    },
                    "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "_did_see_sim_exception": false,
                    "_np_random": "Generator(PCG64) at 0x7F173AC239E0",
                    "action_scale": 0.01,
                    "action_rot_scale": 1.0,
                    "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "hand_high": "array([0.5, 1. , 0.5])",
                    "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "mocap_high": "array([0.5, 1. , 0.5])",
                    "curr_path_length": 0,
                    "seeded_rand_vec": true,
                    "_freeze_rand_vec": true,
                    "_last_rand_vec": "array([-0.03591261,  0.89999998,  0.        ])",
                    "discrete_goal_space": "None",
                    "discrete_goals": [],
                    "active_discrete_goal": "None",
                    "init_left_pad": "array([0.00455658, 0.64733405, 0.19452415])",
                    "init_right_pad": "array([0.00774813, 0.55304544, 0.1940782 ])",
                    "action_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.])",
                      "high": "array([1., 1., 1., 1.])",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "isV2": true,
                    "_obs_obj_max_len": 14,
                    "_obs_obj_possible_lens": [
                      6,
                      14
                    ],
                    "_set_task_called": true,
                    "_partially_observable": false,
                    "hand_init_pos": "array([0. , 0.6, 0.2], dtype=float32)",
                    "_target_pos": "array([-0.03591261,  0.73999998,  0.09      ])",
                    "_random_reset_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.1,  0.9,  0. ], dtype=float32)",
                      "high": "array([0.1, 0.9, 0. ], dtype=float32)",
                      "low_repr": "[-0.1  0.9  0. ]",
                      "high_repr": "[0.1 0.9 0. ]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "_last_stable_obs": "None",
                    "_prev_obs": "array([ 0.00615235,  0.60018983,  0.19430118,  1.        , -0.03591261,\n        0.57999998,  0.14      ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                    "init_config": {
                      "obj_init_angle": "array([0.3], dtype=float32)",
                      "obj_init_pos": "array([0. , 0.9, 0. ], dtype=float32)",
                      "hand_init_pos": "array([0. , 0.6, 0.2], dtype=float32)"
                    },
                    "obj_init_pos": "array([-0.03591261,  0.57999998,  0.14      ])",
                    "obj_init_angle": "array([0.3], dtype=float32)",
                    "goal_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                      "high": "array([0.5, 1. , 0.5], dtype=float32)",
                      "low_repr": "[-0.5   0.4   0.05]",
                      "high_repr": "[0.5 1.  0.5]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "maxDist": 0.15,
                    "target_reward": 2150.0,
                    "init_tcp": "array([0.00600364, 0.6004762 , 0.14935033])",
                    "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_drawer_close_v2.SawyerDrawerCloseEnvV2"
                  },
                  "_max_episode_length": 500,
                  "_render_modes": [
                    "human"
                  ],
                  "_step_cnt": "None",
                  "_visualize": false,
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "_shape": [
                      39
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 500,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "_env_info": "None",
                  "$type": "garage.envs.gym_env.GymEnv"
                },
                "_task_name": "drawer-close-v2",
                "_task_id": "None",
                "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
              },
              "_task_index": 5,
              "_n_total_tasks": 10,
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 500,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_shape": [
                    4
                  ],
                  "low": "array([-1., -1., -1., -1.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": true,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          }
        ],
        "_agents": [
          "None",
          "None"
        ],
        "_episode_lengths": [
          0,
          0
        ],
        "_complete_fragments": [],
        "_fragments": "None",
        "$type": "garage.sampler.fragment_worker.FragmentWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 6,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                },
                "max_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_shared_mean_log_std_network": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 49.0,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "2": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                }
              },
              "_input_dim": 49.0,
              "_hidden_sizes": [
                400,
                400,
                400
              ],
              "_action_dim": 4.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 2.061153622438558e-09,
              "_max_std": 7.38905609893065,
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "$typename": "torch.nn.modules.activation.ReLU"
              },
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": {
                "$type": "torch.Tensor"
              },
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "_shape": [
                49
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "TanhGaussianPolicy",
          "_obs_dim": 49.0,
          "_action_dim": 4.0,
          "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
        },
        "env": "None",
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "_n_envs": 2,
        "_timesteps_per_call": 1,
        "_needs_env_reset": true,
        "_envs": [
          {
            "_env": {
              "_env": {
                "_env": {
                  "_env": {
                    "frame_skip": 5,
                    "model": "<mujoco_py.cymj.PyMjModel object at 0x5556959448d0>",
                    "sim": "<mujoco_py.cymj.MjSim object at 0x7f173a5463c0>",
                    "data": "<mujoco_py.cymj.PyMjData object at 0x55569a2a3670>",
                    "viewer": "None",
                    "_viewers": {},
                    "metadata": {
                      "render.modes": [
                        "human"
                      ],
                      "video.frames_per_second": 80
                    },
                    "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "_did_see_sim_exception": false,
                    "_np_random": "Generator(PCG64) at 0x7F173AC23BA0",
                    "action_scale": 0.01,
                    "action_rot_scale": 1.0,
                    "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "hand_high": "array([0.5, 1. , 0.5])",
                    "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "mocap_high": "array([0.5, 1. , 0.5])",
                    "curr_path_length": 0,
                    "seeded_rand_vec": true,
                    "_freeze_rand_vec": true,
                    "_last_rand_vec": "array([0.09841687, 0.86121587, 0.115     ])",
                    "discrete_goal_space": "None",
                    "discrete_goals": [],
                    "active_discrete_goal": "None",
                    "init_left_pad": "array([0.00494545, 0.44686319, 0.19504709])",
                    "init_right_pad": "array([0.00687854, 0.35253942, 0.19492245])",
                    "action_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.])",
                      "high": "array([1., 1., 1., 1.])",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "isV2": true,
                    "_obs_obj_max_len": 14,
                    "_obs_obj_possible_lens": [
                      6,
                      14
                    ],
                    "_set_task_called": true,
                    "_partially_observable": false,
                    "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)",
                    "_target_pos": "array([0.        , 0.84992037, 0.21999997])",
                    "_random_reset_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.1  ,  0.8  ,  0.115], dtype=float32)",
                      "high": "array([0.1  , 0.9  , 0.115], dtype=float32)",
                      "low_repr": "[-0.1    0.8    0.115]",
                      "high_repr": "[0.1   0.9   0.115]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "_last_stable_obs": "None",
                    "_prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        ,  0.        ,\n        0.84999963,  0.31346152,  0.70738827, -0.70682518,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                    "init_config": {
                      "obj_init_pos": "array([0.   , 0.8  , 0.115], dtype=float32)",
                      "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)"
                    },
                    "goal": "array([0.  , 0.88, 0.1 ])",
                    "obj_init_pos": "array([0.09841687, 0.86121587, 0.115     ])",
                    "goal_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                      "high": "array([0.5, 1. , 0.5], dtype=float32)",
                      "low_repr": "[-0.5   0.4   0.05]",
                      "high_repr": "[0.5 1.  0.5]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "init_tcp": "array([0.00588028, 0.39976012, 0.14998482])",
                    "_obj_to_target_init": 0.09349997035412655,
                    "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_button_press_topdown_v2.SawyerButtonPressTopdownEnvV2"
                  },
                  "_max_episode_length": 500,
                  "_render_modes": [
                    "human"
                  ],
                  "_step_cnt": "None",
                  "_visualize": false,
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "_shape": [
                      39
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 500,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "_env_info": "None",
                  "$type": "garage.envs.gym_env.GymEnv"
                },
                "_task_name": "button-press-topdown-v2",
                "_task_id": "None",
                "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
              },
              "_task_index": 6,
              "_n_total_tasks": 10,
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 500,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_shape": [
                    4
                  ],
                  "low": "array([-1., -1., -1., -1.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": true,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          {
            "_env": {
              "_env": {
                "_env": {
                  "_env": {
                    "frame_skip": 5,
                    "model": "<mujoco_py.cymj.PyMjModel object at 0x5556953779d0>",
                    "sim": "<mujoco_py.cymj.MjSim object at 0x7f173a453bc0>",
                    "data": "<mujoco_py.cymj.PyMjData object at 0x55569546c120>",
                    "viewer": "None",
                    "_viewers": {},
                    "metadata": {
                      "render.modes": [
                        "human"
                      ],
                      "video.frames_per_second": 80
                    },
                    "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "_did_see_sim_exception": false,
                    "_np_random": "Generator(PCG64) at 0x7F173AC23D60",
                    "action_scale": 0.01,
                    "action_rot_scale": 1.0,
                    "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "hand_high": "array([0.5, 1. , 0.5])",
                    "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "mocap_high": "array([0.5, 1. , 0.5])",
                    "curr_path_length": 0,
                    "seeded_rand_vec": true,
                    "_freeze_rand_vec": true,
                    "_last_rand_vec": "array([0.09841687, 0.86121587, 0.115     ])",
                    "discrete_goal_space": "None",
                    "discrete_goals": [],
                    "active_discrete_goal": "None",
                    "init_left_pad": "array([0.00494545, 0.44686319, 0.19504709])",
                    "init_right_pad": "array([0.00687854, 0.35253942, 0.19492245])",
                    "action_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.])",
                      "high": "array([1., 1., 1., 1.])",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "isV2": true,
                    "_obs_obj_max_len": 14,
                    "_obs_obj_possible_lens": [
                      6,
                      14
                    ],
                    "_set_task_called": true,
                    "_partially_observable": false,
                    "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)",
                    "_target_pos": "array([0.        , 0.84992037, 0.21999997])",
                    "_random_reset_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.1  ,  0.8  ,  0.115], dtype=float32)",
                      "high": "array([0.1  , 0.9  , 0.115], dtype=float32)",
                      "low_repr": "[-0.1    0.8    0.115]",
                      "high_repr": "[0.1   0.9   0.115]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "_last_stable_obs": "None",
                    "_prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        ,  0.        ,\n        0.84999963,  0.31346152,  0.70738827, -0.70682518,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                    "init_config": {
                      "obj_init_pos": "array([0.   , 0.8  , 0.115], dtype=float32)",
                      "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)"
                    },
                    "goal": "array([0.  , 0.88, 0.1 ])",
                    "obj_init_pos": "array([0.09841687, 0.86121587, 0.115     ])",
                    "goal_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                      "high": "array([0.5, 1. , 0.5], dtype=float32)",
                      "low_repr": "[-0.5   0.4   0.05]",
                      "high_repr": "[0.5 1.  0.5]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "init_tcp": "array([0.00588028, 0.39976012, 0.14998482])",
                    "_obj_to_target_init": 0.09349997035412655,
                    "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_button_press_topdown_v2.SawyerButtonPressTopdownEnvV2"
                  },
                  "_max_episode_length": 500,
                  "_render_modes": [
                    "human"
                  ],
                  "_step_cnt": "None",
                  "_visualize": false,
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "_shape": [
                      39
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 500,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "_env_info": "None",
                  "$type": "garage.envs.gym_env.GymEnv"
                },
                "_task_name": "button-press-topdown-v2",
                "_task_id": "None",
                "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
              },
              "_task_index": 6,
              "_n_total_tasks": 10,
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 500,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_shape": [
                    4
                  ],
                  "low": "array([-1., -1., -1., -1.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": true,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          }
        ],
        "_agents": [
          "None",
          "None"
        ],
        "_episode_lengths": [
          0,
          0
        ],
        "_complete_fragments": [],
        "_fragments": "None",
        "$type": "garage.sampler.fragment_worker.FragmentWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 7,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                },
                "max_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_shared_mean_log_std_network": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 49.0,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "2": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                }
              },
              "_input_dim": 49.0,
              "_hidden_sizes": [
                400,
                400,
                400
              ],
              "_action_dim": 4.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 2.061153622438558e-09,
              "_max_std": 7.38905609893065,
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "$typename": "torch.nn.modules.activation.ReLU"
              },
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": {
                "$type": "torch.Tensor"
              },
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "_shape": [
                49
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "TanhGaussianPolicy",
          "_obs_dim": 49.0,
          "_action_dim": 4.0,
          "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
        },
        "env": "None",
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "_n_envs": 2,
        "_timesteps_per_call": 1,
        "_needs_env_reset": true,
        "_envs": [
          {
            "_env": {
              "_env": {
                "_env": {
                  "_env": {
                    "frame_skip": 5,
                    "model": "<mujoco_py.cymj.PyMjModel object at 0x55569537fc30>",
                    "sim": "<mujoco_py.cymj.MjSim object at 0x7f173a369340>",
                    "data": "<mujoco_py.cymj.PyMjData object at 0x5556953abee0>",
                    "viewer": "None",
                    "_viewers": {},
                    "metadata": {
                      "render.modes": [
                        "human"
                      ],
                      "video.frames_per_second": 80
                    },
                    "init_qpos": "array([0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 ,\n       0.03, 1.  , 0.  , 0.  , 0.  ])",
                    "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "_did_see_sim_exception": false,
                    "_np_random": "Generator(PCG64) at 0x7F173AC23F20",
                    "action_scale": 0.01,
                    "action_rot_scale": 1.0,
                    "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "hand_high": "array([0.5, 1. , 0.5])",
                    "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "mocap_high": "array([0.5, 1. , 0.5])",
                    "curr_path_length": 0,
                    "seeded_rand_vec": true,
                    "_freeze_rand_vec": true,
                    "_last_rand_vec": "array([ 6.62255991e-02,  6.35421029e-01,  1.99999996e-02, -2.64869171e-01,\n        4.59752731e-01,  6.10006397e-04])",
                    "discrete_goal_space": "None",
                    "discrete_goals": [],
                    "active_discrete_goal": "None",
                    "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
                    "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
                    "action_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.])",
                      "high": "array([1., 1., 1., 1.])",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "isV2": true,
                    "_obs_obj_max_len": 14,
                    "_obs_obj_possible_lens": [
                      6,
                      14
                    ],
                    "_set_task_called": true,
                    "_partially_observable": false,
                    "hand_init_pos": "array([0. , 0.6, 0.2])",
                    "_target_pos": "array([-0.23486917,  0.45975273,  0.13061001])",
                    "_random_reset_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                      "_shape": [
                        6
                      ],
                      "low": "array([ 0.   ,  0.5  ,  0.02 , -0.35 ,  0.4  , -0.001], dtype=float32)",
                      "high": "array([ 0.2  ,  0.7  ,  0.02 , -0.25 ,  0.7  ,  0.001], dtype=float32)",
                      "low_repr": "[ 0.     0.5    0.02  -0.35   0.4   -0.001]",
                      "high_repr": "[ 0.2    0.7    0.02  -0.25   0.7    0.001]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "_last_stable_obs": "None",
                    "_prev_obs": "array([0.00615235, 0.6001898 , 0.19430117, 1.        , 0.0962256 ,\n       0.63542103, 0.03      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
                    "init_config": {
                      "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                      "hand_init_pos": "array([0. , 0.6, 0.2])"
                    },
                    "goal": "array([-0.3,  0.6,  0. ])",
                    "obj_init_pos": "array([0.0662256 , 0.63542103, 0.02      ])",
                    "goal_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.32 ,  0.4  ,  0.129], dtype=float32)",
                      "high": "array([-0.22 ,  0.7  ,  0.131], dtype=float32)",
                      "low_repr": "[-0.32   0.4    0.129]",
                      "high_repr": "[-0.22   0.7    0.131]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
                    "peg_head_pos_init": "array([-0.1       ,  0.6       ,  0.01478467])",
                    "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_peg_insertion_side_v2.SawyerPegInsertionSideEnvV2"
                  },
                  "_max_episode_length": 500,
                  "_render_modes": [
                    "human"
                  ],
                  "_step_cnt": "None",
                  "_visualize": false,
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "_shape": [
                      39
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.32  ,  0.4   ,  0.129 ], dtype=float32)",
                    "high": "array([ 0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,  0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf, -0.22 ,  0.7  ,  0.131],\n      dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.32    0.4     0.129 ]",
                    "high_repr": "[ 0.525  1.025  0.7    1.       inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf    inf    inf  0.525  1.025\n  0.7    1.       inf    inf    inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf -0.22   0.7    0.131]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 500,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.32  ,  0.4   ,  0.129 ], dtype=float32)",
                      "high": "array([ 0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,  0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf, -0.22 ,  0.7  ,  0.131],\n      dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.32    0.4     0.129 ]",
                      "high_repr": "[ 0.525  1.025  0.7    1.       inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf    inf    inf  0.525  1.025\n  0.7    1.       inf    inf    inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf -0.22   0.7    0.131]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "_env_info": "None",
                  "$type": "garage.envs.gym_env.GymEnv"
                },
                "_task_name": "peg-insert-side-v2",
                "_task_id": "None",
                "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
              },
              "_task_index": 7,
              "_n_total_tasks": 10,
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.32  ,  0.4   ,  0.129 ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([ 0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,  0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf, -0.22 ,  0.7  ,  0.131,  1.   ,\n        1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,\n        1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.32    0.4     0.129   0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[ 0.525  1.025  0.7    1.       inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf    inf    inf  0.525  1.025\n  0.7    1.       inf    inf    inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf -0.22   0.7    0.131  1.\n  1.     1.     1.     1.     1.     1.     1.     1.     1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 500,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_shape": [
                    4
                  ],
                  "low": "array([-1., -1., -1., -1.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.32  ,  0.4   ,  0.129 ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([ 0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,  0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf, -0.22 ,  0.7  ,  0.131,  1.   ,\n        1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,\n        1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.32    0.4     0.129   0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[ 0.525  1.025  0.7    1.       inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf    inf    inf  0.525  1.025\n  0.7    1.       inf    inf    inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf -0.22   0.7    0.131  1.\n  1.     1.     1.     1.     1.     1.     1.     1.     1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": true,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          {
            "_env": {
              "_env": {
                "_env": {
                  "_env": {
                    "frame_skip": 5,
                    "model": "<mujoco_py.cymj.PyMjModel object at 0x5556953acf10>",
                    "sim": "<mujoco_py.cymj.MjSim object at 0x7f173a1fca40>",
                    "data": "<mujoco_py.cymj.PyMjData object at 0x55569d42ace0>",
                    "viewer": "None",
                    "_viewers": {},
                    "metadata": {
                      "render.modes": [
                        "human"
                      ],
                      "video.frames_per_second": 80
                    },
                    "init_qpos": "array([0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 ,\n       0.03, 1.  , 0.  , 0.  , 0.  ])",
                    "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "_did_see_sim_exception": false,
                    "_np_random": "Generator(PCG64) at 0x7F173A248120",
                    "action_scale": 0.01,
                    "action_rot_scale": 1.0,
                    "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "hand_high": "array([0.5, 1. , 0.5])",
                    "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "mocap_high": "array([0.5, 1. , 0.5])",
                    "curr_path_length": 0,
                    "seeded_rand_vec": true,
                    "_freeze_rand_vec": true,
                    "_last_rand_vec": "array([ 6.62255991e-02,  6.35421029e-01,  1.99999996e-02, -2.64869171e-01,\n        4.59752731e-01,  6.10006397e-04])",
                    "discrete_goal_space": "None",
                    "discrete_goals": [],
                    "active_discrete_goal": "None",
                    "init_left_pad": "array([0.00455658, 0.64733402, 0.19452415])",
                    "init_right_pad": "array([0.00774813, 0.55304542, 0.1940782 ])",
                    "action_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.])",
                      "high": "array([1., 1., 1., 1.])",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "isV2": true,
                    "_obs_obj_max_len": 14,
                    "_obs_obj_possible_lens": [
                      6,
                      14
                    ],
                    "_set_task_called": true,
                    "_partially_observable": false,
                    "hand_init_pos": "array([0. , 0.6, 0.2])",
                    "_target_pos": "array([-0.23486917,  0.45975273,  0.13061001])",
                    "_random_reset_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True,  True,  True])",
                      "_shape": [
                        6
                      ],
                      "low": "array([ 0.   ,  0.5  ,  0.02 , -0.35 ,  0.4  , -0.001], dtype=float32)",
                      "high": "array([ 0.2  ,  0.7  ,  0.02 , -0.25 ,  0.7  ,  0.001], dtype=float32)",
                      "low_repr": "[ 0.     0.5    0.02  -0.35   0.4   -0.001]",
                      "high_repr": "[ 0.2    0.7    0.02  -0.25   0.7    0.001]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "_last_stable_obs": "None",
                    "_prev_obs": "array([0.00615235, 0.6001898 , 0.19430117, 1.        , 0.0962256 ,\n       0.63542103, 0.03      , 0.        , 0.        , 0.        ,\n       1.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])",
                    "init_config": {
                      "obj_init_pos": "array([0.  , 0.6 , 0.02])",
                      "hand_init_pos": "array([0. , 0.6, 0.2])"
                    },
                    "goal": "array([-0.3,  0.6,  0. ])",
                    "obj_init_pos": "array([0.0662256 , 0.63542103, 0.02      ])",
                    "goal_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.32 ,  0.4  ,  0.129], dtype=float32)",
                      "high": "array([-0.22 ,  0.7  ,  0.131], dtype=float32)",
                      "low_repr": "[-0.32   0.4    0.129]",
                      "high_repr": "[-0.22   0.7    0.131]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "init_tcp": "array([0.00600364, 0.60047618, 0.14935032])",
                    "peg_head_pos_init": "array([-0.1       ,  0.6       ,  0.01478467])",
                    "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_peg_insertion_side_v2.SawyerPegInsertionSideEnvV2"
                  },
                  "_max_episode_length": 500,
                  "_render_modes": [
                    "human"
                  ],
                  "_step_cnt": "None",
                  "_visualize": false,
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "_shape": [
                      39
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.32  ,  0.4   ,  0.129 ], dtype=float32)",
                    "high": "array([ 0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,  0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf, -0.22 ,  0.7  ,  0.131],\n      dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.32    0.4     0.129 ]",
                    "high_repr": "[ 0.525  1.025  0.7    1.       inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf    inf    inf  0.525  1.025\n  0.7    1.       inf    inf    inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf -0.22   0.7    0.131]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 500,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.32  ,  0.4   ,  0.129 ], dtype=float32)",
                      "high": "array([ 0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,  0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf, -0.22 ,  0.7  ,  0.131],\n      dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.32    0.4     0.129 ]",
                      "high_repr": "[ 0.525  1.025  0.7    1.       inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf    inf    inf  0.525  1.025\n  0.7    1.       inf    inf    inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf -0.22   0.7    0.131]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "_env_info": "None",
                  "$type": "garage.envs.gym_env.GymEnv"
                },
                "_task_name": "peg-insert-side-v2",
                "_task_id": "None",
                "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
              },
              "_task_index": 7,
              "_n_total_tasks": 10,
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.32  ,  0.4   ,  0.129 ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([ 0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,  0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf, -0.22 ,  0.7  ,  0.131,  1.   ,\n        1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,\n        1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.32    0.4     0.129   0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[ 0.525  1.025  0.7    1.       inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf    inf    inf  0.525  1.025\n  0.7    1.       inf    inf    inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf -0.22   0.7    0.131  1.\n  1.     1.     1.     1.     1.     1.     1.     1.     1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 500,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_shape": [
                    4
                  ],
                  "low": "array([-1., -1., -1., -1.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.32  ,  0.4   ,  0.129 ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([ 0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,  0.525,  1.025,  0.7  ,  1.   ,    inf,    inf,\n          inf,    inf,    inf,    inf,    inf,    inf,    inf,    inf,\n          inf,    inf,    inf,    inf, -0.22 ,  0.7  ,  0.131,  1.   ,\n        1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,  1.   ,\n        1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.32    0.4     0.129   0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[ 0.525  1.025  0.7    1.       inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf    inf    inf  0.525  1.025\n  0.7    1.       inf    inf    inf    inf    inf    inf    inf    inf\n    inf    inf    inf    inf    inf    inf -0.22   0.7    0.131  1.\n  1.     1.     1.     1.     1.     1.     1.     1.     1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": true,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          }
        ],
        "_agents": [
          "None",
          "None"
        ],
        "_episode_lengths": [
          0,
          0
        ],
        "_complete_fragments": [],
        "_fragments": "None",
        "$type": "garage.sampler.fragment_worker.FragmentWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 8,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                },
                "max_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_shared_mean_log_std_network": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 49.0,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "2": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                }
              },
              "_input_dim": 49.0,
              "_hidden_sizes": [
                400,
                400,
                400
              ],
              "_action_dim": 4.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 2.061153622438558e-09,
              "_max_std": 7.38905609893065,
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "$typename": "torch.nn.modules.activation.ReLU"
              },
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": {
                "$type": "torch.Tensor"
              },
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "_shape": [
                49
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "TanhGaussianPolicy",
          "_obs_dim": 49.0,
          "_action_dim": 4.0,
          "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
        },
        "env": "None",
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "_n_envs": 2,
        "_timesteps_per_call": 1,
        "_needs_env_reset": true,
        "_envs": [
          {
            "_env": {
              "_env": {
                "_env": {
                  "_env": {
                    "frame_skip": 5,
                    "model": "<mujoco_py.cymj.PyMjModel object at 0x55569540de20>",
                    "sim": "<mujoco_py.cymj.MjSim object at 0x7f173a112240>",
                    "data": "<mujoco_py.cymj.PyMjData object at 0x55569a62f220>",
                    "viewer": "None",
                    "_viewers": {},
                    "metadata": {
                      "render.modes": [
                        "human"
                      ],
                      "video.frames_per_second": 80
                    },
                    "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "_did_see_sim_exception": false,
                    "_np_random": "Generator(PCG64) at 0x7F173A2482E0",
                    "action_scale": 0.01,
                    "action_rot_scale": 1.0,
                    "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "hand_high": "array([0.5, 1. , 0.5])",
                    "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "mocap_high": "array([0.5, 1. , 0.5])",
                    "curr_path_length": 0,
                    "seeded_rand_vec": true,
                    "_freeze_rand_vec": true,
                    "_last_rand_vec": "array([-0.01160344,  0.84441865,  0.16      ])",
                    "discrete_goal_space": "None",
                    "discrete_goals": [],
                    "active_discrete_goal": "None",
                    "init_left_pad": "array([0.00494545, 0.44686319, 0.19504709])",
                    "init_right_pad": "array([0.00687854, 0.35253942, 0.19492245])",
                    "action_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.])",
                      "high": "array([1., 1., 1., 1.])",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "isV2": true,
                    "_obs_obj_max_len": 14,
                    "_obs_obj_possible_lens": [
                      6,
                      14
                    ],
                    "_set_task_called": true,
                    "_partially_observable": false,
                    "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)",
                    "_target_pos": "array([0.18839656, 0.84441865, 0.16      ])",
                    "_random_reset_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.1 ,  0.7 ,  0.16], dtype=float32)",
                      "high": "array([0.1 , 0.9 , 0.16], dtype=float32)",
                      "low_repr": "[-0.1   0.7   0.16]",
                      "high_repr": "[0.1  0.9  0.16]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "_last_stable_obs": "None",
                    "_prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        , -0.14      ,\n        0.69      ,  0.202     ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                    "init_config": {
                      "obj_init_angle": "array([0.3], dtype=float32)",
                      "obj_init_pos": "array([-0.1  ,  0.785,  0.16 ], dtype=float32)",
                      "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)"
                    },
                    "obj_init_pos": "array([-0.01160344,  0.84441865,  0.16      ])",
                    "obj_init_angle": "array([0.3], dtype=float32)",
                    "goal_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                      "high": "array([0.5, 1. , 0.5], dtype=float32)",
                      "low_repr": "[-0.5   0.4   0.05]",
                      "high_repr": "[0.5 1.  0.5]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "maxPullDist": 0.2,
                    "target_reward": 2200.0,
                    "init_tcp": "array([0.00588028, 0.39976012, 0.14998482])",
                    "prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        , -0.14      ,\n        0.69      ,  0.202     ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                    "window_handle_pos_init": "array([-0.14 ,  0.69 ,  0.202])",
                    "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_open_v2.SawyerWindowOpenEnvV2"
                  },
                  "_max_episode_length": 500,
                  "_render_modes": [
                    "human"
                  ],
                  "_step_cnt": "None",
                  "_visualize": false,
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "_shape": [
                      39
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 500,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "_env_info": "None",
                  "$type": "garage.envs.gym_env.GymEnv"
                },
                "_task_name": "window-open-v2",
                "_task_id": "None",
                "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
              },
              "_task_index": 8,
              "_n_total_tasks": 10,
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 500,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_shape": [
                    4
                  ],
                  "low": "array([-1., -1., -1., -1.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": true,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          {
            "_env": {
              "_env": {
                "_env": {
                  "_env": {
                    "frame_skip": 5,
                    "model": "<mujoco_py.cymj.PyMjModel object at 0x55569554e0f0>",
                    "sim": "<mujoco_py.cymj.MjSim object at 0x7f173a01e9c0>",
                    "data": "<mujoco_py.cymj.PyMjData object at 0x5556953b5990>",
                    "viewer": "None",
                    "_viewers": {},
                    "metadata": {
                      "render.modes": [
                        "human"
                      ],
                      "video.frames_per_second": 80
                    },
                    "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "_did_see_sim_exception": false,
                    "_np_random": "Generator(PCG64) at 0x7F173A2484A0",
                    "action_scale": 0.01,
                    "action_rot_scale": 1.0,
                    "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "hand_high": "array([0.5, 1. , 0.5])",
                    "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "mocap_high": "array([0.5, 1. , 0.5])",
                    "curr_path_length": 0,
                    "seeded_rand_vec": true,
                    "_freeze_rand_vec": true,
                    "_last_rand_vec": "array([-0.01160344,  0.84441865,  0.16      ])",
                    "discrete_goal_space": "None",
                    "discrete_goals": [],
                    "active_discrete_goal": "None",
                    "init_left_pad": "array([0.00494545, 0.44686319, 0.19504709])",
                    "init_right_pad": "array([0.00687854, 0.35253942, 0.19492245])",
                    "action_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.])",
                      "high": "array([1., 1., 1., 1.])",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "isV2": true,
                    "_obs_obj_max_len": 14,
                    "_obs_obj_possible_lens": [
                      6,
                      14
                    ],
                    "_set_task_called": true,
                    "_partially_observable": false,
                    "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)",
                    "_target_pos": "array([0.18839656, 0.84441865, 0.16      ])",
                    "_random_reset_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.1 ,  0.7 ,  0.16], dtype=float32)",
                      "high": "array([0.1 , 0.9 , 0.16], dtype=float32)",
                      "low_repr": "[-0.1   0.7   0.16]",
                      "high_repr": "[0.1  0.9  0.16]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "_last_stable_obs": "None",
                    "_prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        , -0.14      ,\n        0.69      ,  0.202     ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                    "init_config": {
                      "obj_init_angle": "array([0.3], dtype=float32)",
                      "obj_init_pos": "array([-0.1  ,  0.785,  0.16 ], dtype=float32)",
                      "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)"
                    },
                    "obj_init_pos": "array([-0.01160344,  0.84441865,  0.16      ])",
                    "obj_init_angle": "array([0.3], dtype=float32)",
                    "goal_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                      "high": "array([0.5, 1. , 0.5], dtype=float32)",
                      "low_repr": "[-0.5   0.4   0.05]",
                      "high_repr": "[0.5 1.  0.5]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "maxPullDist": 0.2,
                    "target_reward": 2200.0,
                    "init_tcp": "array([0.00588028, 0.39976012, 0.14998482])",
                    "prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        , -0.14      ,\n        0.69      ,  0.202     ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                    "window_handle_pos_init": "array([-0.14 ,  0.69 ,  0.202])",
                    "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_open_v2.SawyerWindowOpenEnvV2"
                  },
                  "_max_episode_length": 500,
                  "_render_modes": [
                    "human"
                  ],
                  "_step_cnt": "None",
                  "_visualize": false,
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "_shape": [
                      39
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 500,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "_env_info": "None",
                  "$type": "garage.envs.gym_env.GymEnv"
                },
                "_task_name": "window-open-v2",
                "_task_id": "None",
                "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
              },
              "_task_index": 8,
              "_n_total_tasks": 10,
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 500,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_shape": [
                    4
                  ],
                  "low": "array([-1., -1., -1., -1.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": true,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          }
        ],
        "_agents": [
          "None",
          "None"
        ],
        "_episode_lengths": [
          0,
          0
        ],
        "_complete_fragments": [],
        "_fragments": "None",
        "$type": "garage.sampler.fragment_worker.FragmentWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 9,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                },
                "max_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_shared_mean_log_std_network": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 49.0,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "2": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 400,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {
                                "module": {
                                  "training": true,
                                  "_parameters": {},
                                  "_buffers": {},
                                  "_non_persistent_buffers_set": [],
                                  "_backward_hooks": {},
                                  "_forward_hooks": {},
                                  "_forward_pre_hooks": {},
                                  "_state_dict_hooks": {},
                                  "_load_state_dict_pre_hooks": {},
                                  "_modules": {},
                                  "inplace": false,
                                  "$type": "torch.nn.modules.activation.ReLU"
                                }
                              },
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 400,
                              "out_features": 4.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "$type": "garage.torch.modules.multi_headed_mlp_module.MultiHeadedMLPModule"
                }
              },
              "_input_dim": 49.0,
              "_hidden_sizes": [
                400,
                400,
                400
              ],
              "_action_dim": 4.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 2.061153622438558e-09,
              "_max_std": 7.38905609893065,
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f17da01d5e0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": {
                "$typename": "torch.nn.modules.activation.ReLU"
              },
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "garage.torch.distributions.tanh_normal.TanhNormal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": {
                "$type": "torch.Tensor"
              },
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPTwoHeadedModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 500,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True])",
              "_shape": [
                4
              ],
              "low": "array([-1., -1., -1., -1.], dtype=float32)",
              "high": "array([1., 1., 1., 1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
              "_shape": [
                49
              ],
              "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.1   ,  0.8   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
              "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.1  , 0.9  , 0.3  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
              "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.1     0.8     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
              "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.1   0.9   0.3   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "TanhGaussianPolicy",
          "_obs_dim": 49.0,
          "_action_dim": 4.0,
          "$type": "garage.torch.policies.tanh_gaussian_mlp_policy.TanhGaussianMLPPolicy"
        },
        "env": "None",
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "_n_envs": 2,
        "_timesteps_per_call": 1,
        "_needs_env_reset": true,
        "_envs": [
          {
            "_env": {
              "_env": {
                "_env": {
                  "_env": {
                    "frame_skip": 5,
                    "model": "<mujoco_py.cymj.PyMjModel object at 0x5556959a6eb0>",
                    "sim": "<mujoco_py.cymj.MjSim object at 0x7f1739eb51c0>",
                    "data": "<mujoco_py.cymj.PyMjData object at 0x555695c8f3c0>",
                    "viewer": "None",
                    "_viewers": {},
                    "metadata": {
                      "render.modes": [
                        "human"
                      ],
                      "video.frames_per_second": 80
                    },
                    "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "_did_see_sim_exception": false,
                    "_np_random": "Generator(PCG64) at 0x7F173A248660",
                    "action_scale": 0.01,
                    "action_rot_scale": 1.0,
                    "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "hand_high": "array([0.5, 1. , 0.5])",
                    "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "mocap_high": "array([0.5, 1. , 0.5])",
                    "curr_path_length": 0,
                    "seeded_rand_vec": true,
                    "_freeze_rand_vec": true,
                    "_last_rand_vec": "array([0.       , 0.7773647, 0.2      ])",
                    "discrete_goal_space": "None",
                    "discrete_goals": [],
                    "active_discrete_goal": "None",
                    "init_left_pad": "array([0.00494545, 0.44686319, 0.19504709])",
                    "init_right_pad": "array([0.00687854, 0.35253942, 0.19492245])",
                    "action_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.])",
                      "high": "array([1., 1., 1., 1.])",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "isV2": true,
                    "_obs_obj_max_len": 14,
                    "_obs_obj_possible_lens": [
                      6,
                      14
                    ],
                    "_set_task_called": true,
                    "_partially_observable": false,
                    "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)",
                    "_target_pos": "array([0.       , 0.7773647, 0.2      ])",
                    "_random_reset_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([0.  , 0.75, 0.2 ], dtype=float32)",
                      "high": "array([0. , 0.9, 0.2], dtype=float32)",
                      "low_repr": "[0.   0.75 0.2 ]",
                      "high_repr": "[0.  0.9 0.2]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "_last_stable_obs": "None",
                    "_prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        , -0.09      ,\n        0.69      ,  0.202     ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                    "init_config": {
                      "obj_init_angle": 0.3,
                      "obj_init_pos": "array([0.1  , 0.785, 0.16 ], dtype=float32)",
                      "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)"
                    },
                    "obj_init_pos": "array([0.       , 0.7773647, 0.2      ])",
                    "obj_init_angle": 0.3,
                    "liftThresh": 0.02,
                    "goal_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                      "high": "array([0.5, 1. , 0.5], dtype=float32)",
                      "low_repr": "[-0.5   0.4   0.05]",
                      "high_repr": "[0.5 1.  0.5]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "maxPullDist": 0.2,
                    "target_reward": 2200.0,
                    "init_tcp": "array([0.00588028, 0.39976012, 0.14998482])",
                    "prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        , -0.09      ,\n        0.69      ,  0.202     ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                    "window_handle_pos_init": "array([0.11 , 0.69 , 0.202])",
                    "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_close_v2.SawyerWindowCloseEnvV2"
                  },
                  "_max_episode_length": 500,
                  "_render_modes": [
                    "human"
                  ],
                  "_step_cnt": "None",
                  "_visualize": false,
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "_shape": [
                      39
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 500,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "_env_info": "None",
                  "$type": "garage.envs.gym_env.GymEnv"
                },
                "_task_name": "window-close-v2",
                "_task_id": "None",
                "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
              },
              "_task_index": 9,
              "_n_total_tasks": 10,
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 500,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_shape": [
                    4
                  ],
                  "low": "array([-1., -1., -1., -1.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": true,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          {
            "_env": {
              "_env": {
                "_env": {
                  "_env": {
                    "frame_skip": 5,
                    "model": "<mujoco_py.cymj.PyMjModel object at 0x5556953b4fc0>",
                    "sim": "<mujoco_py.cymj.MjSim object at 0x7f1739dc0940>",
                    "data": "<mujoco_py.cymj.PyMjData object at 0x55569546c8f0>",
                    "viewer": "None",
                    "_viewers": {},
                    "metadata": {
                      "render.modes": [
                        "human"
                      ],
                      "video.frames_per_second": 80
                    },
                    "init_qpos": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
                    "_did_see_sim_exception": false,
                    "_np_random": "Generator(PCG64) at 0x7F173A248820",
                    "action_scale": 0.01,
                    "action_rot_scale": 1.0,
                    "hand_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "hand_high": "array([0.5, 1. , 0.5])",
                    "mocap_low": "array([-0.5 ,  0.4 ,  0.05])",
                    "mocap_high": "array([0.5, 1. , 0.5])",
                    "curr_path_length": 0,
                    "seeded_rand_vec": true,
                    "_freeze_rand_vec": true,
                    "_last_rand_vec": "array([0.       , 0.7773647, 0.2      ])",
                    "discrete_goal_space": "None",
                    "discrete_goals": [],
                    "active_discrete_goal": "None",
                    "init_left_pad": "array([0.00494545, 0.44686319, 0.19504709])",
                    "init_right_pad": "array([0.00687854, 0.35253942, 0.19492245])",
                    "action_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.])",
                      "high": "array([1., 1., 1., 1.])",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "isV2": true,
                    "_obs_obj_max_len": 14,
                    "_obs_obj_possible_lens": [
                      6,
                      14
                    ],
                    "_set_task_called": true,
                    "_partially_observable": false,
                    "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)",
                    "_target_pos": "array([0.       , 0.7773647, 0.2      ])",
                    "_random_reset_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([0.  , 0.75, 0.2 ], dtype=float32)",
                      "high": "array([0. , 0.9, 0.2], dtype=float32)",
                      "low_repr": "[0.   0.75 0.2 ]",
                      "high_repr": "[0.  0.9 0.2]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "_last_stable_obs": "None",
                    "_prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        , -0.09      ,\n        0.69      ,  0.202     ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                    "init_config": {
                      "obj_init_angle": 0.3,
                      "obj_init_pos": "array([0.1  , 0.785, 0.16 ], dtype=float32)",
                      "hand_init_pos": "array([0. , 0.4, 0.2], dtype=float32)"
                    },
                    "obj_init_pos": "array([0.       , 0.7773647, 0.2      ])",
                    "obj_init_angle": 0.3,
                    "liftThresh": 0.02,
                    "goal_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True])",
                      "_shape": [
                        3
                      ],
                      "low": "array([-0.5 ,  0.4 ,  0.05], dtype=float32)",
                      "high": "array([0.5, 1. , 0.5], dtype=float32)",
                      "low_repr": "[-0.5   0.4   0.05]",
                      "high_repr": "[0.5 1.  0.5]",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "maxPullDist": 0.2,
                    "target_reward": 2200.0,
                    "init_tcp": "array([0.00588028, 0.39976012, 0.14998482])",
                    "prev_obs": "array([ 0.005912  ,  0.39970134,  0.19498477,  1.        , -0.09      ,\n        0.69      ,  0.202     ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ])",
                    "window_handle_pos_init": "array([0.11 , 0.69 , 0.202])",
                    "$type": "metaworld.envs.mujoco.sawyer_xyz.v2.sawyer_window_close_v2.SawyerWindowCloseEnvV2"
                  },
                  "_max_episode_length": 500,
                  "_render_modes": [
                    "human"
                  ],
                  "_step_cnt": "None",
                  "_visualize": false,
                  "_action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True])",
                    "_shape": [
                      4
                    ],
                    "low": "array([-1., -1., -1., -1.], dtype=float32)",
                    "high": "array([1., 1., 1., 1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_observation_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                    "_shape": [
                      39
                    ],
                    "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                    "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                    "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                    "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                    "_np_random": "None",
                    "$type": "akro.box.Box"
                  },
                  "_spec": {
                    "max_episode_length": 500,
                    "input_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True])",
                      "_shape": [
                        4
                      ],
                      "low": "array([-1., -1., -1., -1.], dtype=float32)",
                      "high": "array([1., 1., 1., 1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "output_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True])",
                      "_shape": [
                        39
                      ],
                      "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ], dtype=float32)",
                      "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  ], dtype=float32)",
                      "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05  ]",
                      "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5  ]",
                      "_np_random": "None",
                      "$type": "akro.box.Box"
                    },
                    "$type": "garage._environment.EnvSpec"
                  },
                  "_env_info": "None",
                  "$type": "garage.envs.gym_env.GymEnv"
                },
                "_task_name": "window-close-v2",
                "_task_id": "None",
                "$type": "garage.envs.task_name_wrapper.TaskNameWrapper"
              },
              "_task_index": 9,
              "_n_total_tasks": 10,
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                "_shape": [
                  49
                ],
                "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 500,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True])",
                  "_shape": [
                    4
                  ],
                  "low": "array([-1., -1., -1., -1.], dtype=float32)",
                  "high": "array([1., 1., 1., 1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True])",
                  "_shape": [
                    49
                  ],
                  "low": "array([-0.525 ,  0.348 , -0.0525, -1.    ,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf, -0.525 ,  0.348 , -0.0525,\n       -1.    ,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf,    -inf,    -inf,    -inf,    -inf,    -inf,    -inf,\n          -inf, -0.5   ,  0.4   ,  0.05  ,  0.    ,  0.    ,  0.    ,\n        0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ,  0.    ],\n      dtype=float32)",
                  "high": "array([0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.525, 1.025, 0.7  , 1.   ,   inf,   inf,   inf,   inf,   inf,\n         inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,   inf,\n       0.5  , 1.   , 0.5  , 1.   , 1.   , 1.   , 1.   , 1.   , 1.   ,\n       1.   , 1.   , 1.   , 1.   ], dtype=float32)",
                  "low_repr": "[-0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.525   0.348  -0.0525 -1.        -inf    -inf    -inf    -inf    -inf\n    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf    -inf\n -0.5     0.4     0.05    0.      0.      0.      0.      0.      0.\n  0.      0.      0.      0.    ]",
                  "high_repr": "[0.525 1.025 0.7   1.      inf   inf   inf   inf   inf   inf   inf   inf\n   inf   inf   inf   inf   inf   inf 0.525 1.025 0.7   1.      inf   inf\n   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf   inf\n 0.5   1.    0.5   1.    1.    1.    1.    1.    1.    1.    1.    1.\n 1.   ]",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "$type": "garage.envs.task_onehot_wrapper.TaskOnehotWrapper"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": true,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          }
        ],
        "_agents": [
          "None",
          "None"
        ],
        "_episode_lengths": [
          0,
          0
        ],
        "_complete_fragments": [],
        "_fragments": "None",
        "$type": "garage.sampler.fragment_worker.FragmentWorker"
      }
    ],
    "total_env_steps": 0,
    "$type": "garage.sampler.local_sampler.LocalSampler"
  },
  "_plotter": "None",
  "_start_time": "None",
  "_itr_start_time": "None",
  "step_itr": "None",
  "step_episode": "None",
  "enable_logging": true,
  "_n_workers": "None",
  "_worker_class": "None",
  "_worker_args": "None",
  "$type": "garage.trainer.Trainer"
}